; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\class.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?nil@luabind@@3Unil_type@detail@1@A		; luabind::nil
_BSS	SEGMENT
?nil@luabind@@3Unil_type@detail@1@A DB 01H DUP (?)	; luabind::nil
_BSS	ENDS
CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
?yield@luabind@@3U?$policy_cons@Uyield_policy@detail@luabind@@Unull_type@23@@detail@1@B	ORG $+1 ; luabind::yield
	ORG $+2
$SG120298 DB	'invalid argument', 00H
	ORG $+3
$SG120299 DB	'%s', 00H
	ORG $+1
$SG120302 DB	00H, 00H
	ORG $+2
$SG120300 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.34.31933\include\xmemory', 00H
	ORG $+2
$SG112189 DB	'l', 00H, 'u', 00H, 'a', 00H, '_', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '(', 00H, 'L', 00H, ',', 00H, ' ', 00H, '-'
	DB	00H, '1', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'L', 00H, 'U', 00H, 'A', 00H, '_', 00H, 'T', 00H, 'T', 00H, 'A'
	DB	00H, 'B', 00H, 'L', 00H, 'E', 00H, 00H, 00H
$SG120301 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG120303 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG112190 DB	'__luabind_class_map', 00H
$SG112188 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG112192 DB	'__luabind_cast_graph', 00H
	ORG $+3
$SG112193 DB	'__luabind_class_id_map', 00H
	ORG $+1
$SG112367 DB	' [', 00H
	ORG $+1
$SG112368 DB	']', 00H
	ORG $+2
$SG112380 DB	'L', 00H, 00H, 00H
$SG112379 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG112383 DB	'custom', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ	; boost::foreach_detail_::auto_any_base::operator bool
PUBLIC	?set_false@foreach_detail_@boost@@YA_NAA_N@Z	; boost::foreach_detail_::set_false
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_unlocked
PUBLIC	?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_locked
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
PUBLIC	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
PUBLIC	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$tuple@$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?before@type_info@@QBE_NABV1@@Z			; type_info::before
PUBLIC	?name@type_info@@QBEPBDXZ			; type_info::name
PUBLIC	??Rltstr@detail@luabind@@QBE_NPBD0@Z		; luabind::detail::ltstr::operator()
PUBLIC	??0type_id@luabind@@QAE@XZ			; luabind::type_id::type_id
PUBLIC	??0type_id@luabind@@QAE@ABVtype_info@@@Z	; luabind::type_id::type_id
PUBLIC	??Mtype_id@luabind@@QBE_NABV01@@Z		; luabind::type_id::operator<
PUBLIC	?name@type_id@luabind@@QBEPBDXZ			; luabind::type_id::name
PUBLIC	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
PUBLIC	?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z ; luabind::detail::class_id_map::put
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::max_size
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Check_grow_by_1
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Rrotate
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Insert_node
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>,1>::_Get_first
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>
PUBLIC	??$make_pair@ABVtype_id@luabind@@H@std@@YA?AU?$pair@Vtype_id@luabind@@H@0@ABVtype_id@luabind@@$$QAH@Z ; std::make_pair<luabind::type_id const &,int>
PUBLIC	??$?0Vtype_id@luabind@@H$0A@@?$pair@$$CBVtype_id@luabind@@I@std@@QAE@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::pair<luabind::type_id const ,unsigned int>::pair<luabind::type_id const ,unsigned int><luabind::type_id,int,0>
PUBLIC	??$insert@U?$pair@Vtype_id@luabind@@H@std@@$0A@@?$map@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::map<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> > >::insert<std::pair<luabind::type_id,int>,0>
PUBLIC	?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z ; luabind::detail::class_map::put
PUBLIC	?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep *>::deallocate
PUBLIC	?allocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEPAPAVclass_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@PAVclass_rep@detail@luabind@@@2@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::max_size
PUBLIC	?resize@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXI@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::resize
PUBLIC	?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
PUBLIC	?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::max_size
PUBLIC	?capacity@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::capacity
PUBLIC	??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEAAPAVclass_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEII@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXQAPAVclass_rep@detail@luabind@@II@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@CAXXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range
PUBLIC	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
PUBLIC	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first
PUBLIC	?push@handle@luabind@@QBEXPAUlua_State@@@Z	; luabind::handle::push
PUBLIC	?name@class_rep@detail@luabind@@QBEPBDXZ	; luabind::detail::class_rep::name
PUBLIC	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table
PUBLIC	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
PUBLIC	??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	?_Swap_val_excluding_comp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@AAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Swap_val_excluding_comp
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
PUBLIC	?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::swap
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAEAAUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
PUBLIC	??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
PUBLIC	?swap@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV12@@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::swap
PUBLIC	??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
PUBLIC	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::stack_checker_type::stack_checker_type
PUBLIC	??1stack_checker_type@detail@luabind@@QAE@XZ	; luabind::detail::stack_checker_type::~stack_checker_type
PUBLIC	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
PUBLIC	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
PUBLIC	?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z ; luabind::detail::get_class_name
PUBLIC	??0class_base@detail@luabind@@QAE@PBD@Z		; luabind::detail::class_base::class_base
PUBLIC	?init@class_base@detail@luabind@@QAEXABVtype_id@3@I0I@Z ; luabind::detail::class_base::init
PUBLIC	?add_base@class_base@detail@luabind@@QAEXABVtype_id@3@P6APAXPAX@Z@Z ; luabind::detail::class_base::add_base
PUBLIC	?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ; luabind::detail::class_base::add_member
PUBLIC	?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ; luabind::detail::class_base::add_default_member
PUBLIC	?name@class_base@detail@luabind@@QBEPBDXZ	; luabind::detail::class_base::name
PUBLIC	?add_static_constant@class_base@detail@luabind@@QAEXPBDH@Z ; luabind::detail::class_base::add_static_constant
PUBLIC	?add_inner_scope@class_base@detail@luabind@@QAEXAAUscope@3@@Z ; luabind::detail::class_base::add_inner_scope
PUBLIC	?add_cast@class_base@detail@luabind@@QAEXIIP6APAXPAX@Z@Z ; luabind::detail::class_base::add_cast
PUBLIC	??0class_registration@detail@luabind@@QAE@PBD@Z	; luabind::detail::class_registration::class_registration
PUBLIC	?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z ; luabind::detail::class_registration::register_
PUBLIC	??0?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAE@XZ ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate
PUBLIC	?allocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAIABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
PUBLIC	??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	?push_back@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::push_back
PUBLIC	?begin@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::begin
PUBLIC	?end@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::end
PUBLIC	?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
PUBLIC	?capacity@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::capacity
PUBLIC	?_Calculate_growth@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEII@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@II@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@CAXXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first
PUBLIC	??1class_registration@detail@luabind@@UAE@XZ	; luabind::detail::class_registration::~class_registration
PUBLIC	??_Gclass_registration@detail@luabind@@UAEPAXI@Z ; luabind::detail::class_registration::`scalar deleting destructor'
PUBLIC	??$swap@Ultstr@detail@luabind@@$0A@@std@@YAXAAUltstr@detail@luabind@@0@Z ; std::swap<luabind::detail::ltstr,0>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
PUBLIC	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
PUBLIC	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
PUBLIC	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
PUBLIC	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
PUBLIC	?release@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAEPAUregistration@detail@luabind@@XZ ; std::auto_ptr<luabind::detail::registration>::release
PUBLIC	??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>
PUBLIC	??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
PUBLIC	??$make_pair@ABVtype_id@luabind@@AAP6APAXPAX@Z@std@@YA?AU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ; std::make_pair<luabind::type_id const &,void * (__cdecl*&)(void *)>
PUBLIC	?add_custom_name@detail@luabind@@YAXABVtype_id@2@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::detail::add_custom_name
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
PUBLIC	??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> &>
PUBLIC	??$_Emplace_one_at_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_one_at_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1><>
PUBLIC	??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize<std::_Value_init_tag>
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@SAPAU?$pair@$$CBVtype_id@luabind@@I@2@AAU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,unsigned int> *>::pointer_to
PUBLIC	??$_Convert_size@II@std@@YAII@Z			; std::_Convert_size<unsigned int,unsigned int>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??$addressof@V?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@@std@@YAPAV?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> > >
PUBLIC	??$_Pocs@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ; std::_Pocs<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Swap_adl@Ultstr@detail@luabind@@@std@@YAXAAUltstr@detail@luabind@@0@Z ; std::_Swap_adl<luabind::detail::ltstr>
PUBLIC	??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > const >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Swap_adl@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Swap_adl<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$swap@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$0A@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::swap<std::_Tree_node<std::pair<char const * const,int>,void *> *,0>
PUBLIC	??$swap@I$0A@@std@@YAXAAI0@Z			; std::swap<unsigned int,0>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
PUBLIC	??$?0ABVtype_id@luabind@@H$0A@@?$pair@Vtype_id@luabind@@H@std@@QAE@ABVtype_id@luabind@@$$QAH@Z ; std::pair<luabind::type_id,int>::pair<luabind::type_id,int><luabind::type_id const &,int,0>
PUBLIC	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
PUBLIC	??$emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::emplace<std::pair<luabind::type_id,int> >
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z ; std::forward<void * (__cdecl*&)(void *)>
PUBLIC	??$?0ABVtype_id@luabind@@AAP6APAXPAX@Z$0A@@?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@QAE@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ; std::pair<luabind::type_id,void * (__cdecl*)(void *)>::pair<luabind::type_id,void * (__cdecl*)(void *)><luabind::type_id const &,void * (__cdecl*&)(void *),0>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back_with_unused_capacity<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_reallocate<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>
PUBLIC	??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
PUBLIC	??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
PUBLIC	??$forward@ABQBD@std@@YAABQBDABQBD@Z		; std::forward<char const * const &>
PUBLIC	??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
PUBLIC	??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z		; std::tuple<char const * const &>::tuple<char const * const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<luabind::detail::class_rep *> >
PUBLIC	??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Find_lower_bound<luabind::type_id>
PUBLIC	??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Lower_bound_duplicate<luabind::type_id>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$?8U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@U01@@std@@YA_NABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ; std::operator==<std::_Tree_node<std::pair<char const * const,int>,void *>,std::_Tree_node<std::pair<char const * const,int>,void *> >
PUBLIC	??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ; std::forward<luabind::detail::ltstr const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
PUBLIC	??$move@AAI@std@@YA$$QAIAAI@Z			; std::move<unsigned int &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
PUBLIC	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z ; std::move<luabind::detail::ltstr &>
PUBLIC	??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$_Emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Emplace<std::pair<luabind::type_id,int> >
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool const &,0>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Construct_in_place@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@std@@YAXAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@$$QAU10@@Z ; std::_Construct_in_place<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::construct<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
PUBLIC	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep * *,std::allocator<luabind::detail::class_rep *> >
PUBLIC	??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ; std::_Unfancy<luabind::detail::class_rep *>
PUBLIC	??$_Zero_range@PAPAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0@Z ; std::_Zero_range<luabind::detail::class_rep * *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<>
PUBLIC	??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z ; std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0>::_Kfn<luabind::type_id const ,unsigned int>
PUBLIC	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * *>
PUBLIC	??$_Get_size_of_n@$0M@@std@@YAII@Z		; std::_Get_size_of_n<12>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
PUBLIC	?_Extract@?$_In_place_key_extract_map@Vtype_id@luabind@@U?$pair@Vtype_id@luabind@@H@std@@@std@@SAABVtype_id@luabind@@ABU?$pair@Vtype_id@luabind@@H@2@@Z ; std::_In_place_key_extract_map<luabind::type_id,std::pair<luabind::type_id,int> >::_Extract
PUBLIC	??$?0AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &,bool,0>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
PUBLIC	??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > ><std::pair<luabind::type_id,int> >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool,0>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > > >
PUBLIC	??$forward@AB_N@std@@YAAB_NAB_N@Z		; std::forward<bool const &>
PUBLIC	??$addressof@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
PUBLIC	??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Get_unwrapped<std::pair<luabind::type_id,void * (__cdecl*)(void *)> * const &>
PUBLIC	??$_Copy_memmove@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@PAU12@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@00@Z ; std::_Copy_memmove<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Release
PUBLIC	??$_Emplace_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
PUBLIC	??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
PUBLIC	??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ; std::_Voidify_iter<std::pair<char const * const,int> *>
PUBLIC	??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep * * const &>
PUBLIC	??$move@AAPAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ; std::move<luabind::detail::class_rep * &>
PUBLIC	??$_Copy_memmove@PAPAVclass_rep@detail@luabind@@PAPAV123@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@00@Z ; std::_Copy_memmove<luabind::detail::class_rep * *,luabind::detail::class_rep * *>
PUBLIC	??$_Emplace_back@PAVclass_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEX$$QAPAVclass_rep@detail@luabind@@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<luabind::detail::class_rep *>
PUBLIC	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
PUBLIC	??$construct@PAVclass_rep@detail@luabind@@$$V@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *>
PUBLIC	??$destroy@U?$pair@$$CBVtype_id@luabind@@I@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::destroy<std::pair<luabind::type_id const ,unsigned int> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::nullptr_t>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CBVtype_id@luabind@@I@std@@U?$pair@Vtype_id@luabind@@H@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::construct<std::pair<luabind::type_id const ,unsigned int>,std::pair<luabind::type_id,int> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
PUBLIC	??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
PUBLIC	??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
PUBLIC	??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ; std::forward<luabind::detail::class_rep *>
PUBLIC	??$construct@PAVclass_rep@detail@luabind@@PAV123@@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@$$QAPAV345@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *,luabind::detail::class_rep *>
PUBLIC	??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep * *>
PUBLIC	??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@I@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id const ,unsigned int> *>
PUBLIC	??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
PUBLIC	??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ; std::_Tuple_get<0,char const * const &>
PUBLIC	??$forward@Vtype_id@luabind@@@std@@YA$$QAVtype_id@luabind@@AAV12@@Z ; std::forward<luabind::type_id>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R0?AUnull_type@detail@luabind@@@8		; luabind::detail::null_type `RTTI Type Descriptor'
PUBLIC	??_C@_1KM@EAPOGOKM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ ; `string'
PUBLIC	??_C@_1CG@PBEMIDNO@?$AAi?$AAd?$AA?5?$AA?$DM?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA_?$AAi?$AAd?$AA_?$AAb@ ; `string'
PUBLIC	??_C@_1KK@BKHOEKNE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?4?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?5?$AA?$HM@ ; `string'
PUBLIC	??_C@_1KA@FDCAJHLM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ ; `string'
PUBLIC	??_C@_1DG@CAPFJFIB@?$AAm?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAu?$AAa?$AA_@ ; `string'
PUBLIC	??_7class_registration@detail@luabind@@6B@	; luabind::detail::class_registration::`vftable'
PUBLIC	?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::detail::null_type>::id
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0GA@GNHKHACC@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MA@LENEFKFL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ ; `string'
PUBLIC	??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0CB@PKNBJHCN@containers?5incompatible?5for?5swa@ ; `string'
PUBLIC	??_C@_1EG@DFCHKBDO@?$AA?$CC?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0GD@JKKFFOCD@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MG@JJBOPAGB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4class_registration@detail@luabind@@6B@	; luabind::detail::class_registration::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUclass_registration@detail@luabind@@@8	; luabind::detail::class_registration `RTTI Type Descriptor'
PUBLIC	??_R3class_registration@detail@luabind@@8	; luabind::detail::class_registration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2class_registration@detail@luabind@@8	; luabind::detail::class_registration::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@class_registration@detail@luabind@@8 ; luabind::detail::class_registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@registration@detail@luabind@@8	; luabind::detail::registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUregistration@detail@luabind@@@8		; luabind::detail::registration `RTTI Type Descriptor'
PUBLIC	??_R3registration@detail@luabind@@8		; luabind::detail::registration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2registration@detail@luabind@@8		; luabind::detail::registration::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_insert:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_newuserdata:PROC
EXTRN	_lua_settable:PROC
EXTRN	_lua_next:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__wassert:PROC
EXTRN	___std_type_info_compare:PROC
EXTRN	___std_type_info_name:PROC
EXTRN	??0registration@detail@luabind@@QAE@XZ:PROC	; luabind::detail::registration::registration
EXTRN	??1registration@detail@luabind@@UAE@XZ:PROC	; luabind::detail::registration::~registration
EXTRN	??0scope@luabind@@QAE@XZ:PROC			; luabind::scope::scope
EXTRN	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z:PROC ; luabind::scope::scope
EXTRN	??0scope@luabind@@QAE@ABU01@@Z:PROC		; luabind::scope::scope
EXTRN	??1scope@luabind@@QAE@XZ:PROC			; luabind::scope::~scope
EXTRN	??Qscope@luabind@@QAEAAU01@U01@@Z:PROC		; luabind::scope::operator,
EXTRN	?register_@scope@luabind@@QBEXPAUlua_State@@@Z:PROC ; luabind::scope::register_
EXTRN	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z:PROC ; luabind::detail::class_registry::get_registry
EXTRN	?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z:PROC ; luabind::detail::class_registry::add_class
EXTRN	?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z:PROC ; luabind::detail::class_registry::find_class
EXTRN	?insert@cast_graph@detail@luabind@@QAEXIIP6APAXPAX@Z@Z:PROC ; luabind::detail::cast_graph::insert
EXTRN	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z:PROC ; luabind::detail::allocate_class_id
EXTRN	??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z:PROC ; luabind::detail::class_rep::class_rep
EXTRN	?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z:PROC ; luabind::detail::class_rep::add_base_class
EXTRN	??_Eclass_registration@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::class_registration::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:BYTE ; __type_info_root_node
EXTRN	?local_id_base@class_id_map@detail@luabind@@0IB:DWORD ; luabind::detail::class_id_map::local_id_base
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init
?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init_if
_BSS	ENDS
;	COMDAT ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB
_BSS	SEGMENT
?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB DD 01H DUP (?) ; luabind::detail::registered_class<luabind::detail::null_type>::id
_BSS	ENDS
;	COMDAT ?t@?1???$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV34@@Z@4PAV34@A
_BSS	SEGMENT
?t@?1???$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV34@@Z@4PAV34@A DD 01H DUP (?) ; `boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >'::`2'::t
_BSS	ENDS
CRT$XCU	SEGMENT
?in_place_init$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2registration@detail@luabind@@8
rdata$r	SEGMENT
??_R2registration@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8 ; luabind::detail::registration::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3registration@detail@luabind@@8
rdata$r	SEGMENT
??_R3registration@detail@luabind@@8 DD 00H		; luabind::detail::registration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUregistration@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AUregistration@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::registration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUregistration@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@registration@detail@luabind@@8 DD FLAT:??_R0?AUregistration@detail@luabind@@@8 ; luabind::detail::registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@class_registration@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@class_registration@detail@luabind@@8 DD FLAT:??_R0?AUclass_registration@detail@luabind@@@8 ; luabind::detail::class_registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3class_registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2class_registration@detail@luabind@@8
rdata$r	SEGMENT
??_R2class_registration@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@class_registration@detail@luabind@@8 ; luabind::detail::class_registration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3class_registration@detail@luabind@@8
rdata$r	SEGMENT
??_R3class_registration@detail@luabind@@8 DD 00H	; luabind::detail::class_registration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2class_registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUclass_registration@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AUclass_registration@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::class_registration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUclass_registration@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4class_registration@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4class_registration@detail@luabind@@6B@ DD 00H	; luabind::detail::class_registration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUclass_registration@detail@luabind@@@8
	DD	FLAT:??_R3class_registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@JJBOPAGB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MG@JJBOPAGB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1', 00H, '9'
	DB	00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@JKKFFOCD@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GD@JKKFFOCD@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'34.31933\include\xutility', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@DFCHKBDO@?$AA?$CC?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc@
CONST	SEGMENT
??_C@_1EG@DFCHKBDO@?$AA?$CC?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc@ DB '"'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 's', 00H, 'w', 00H, 'a', 00H, 'p', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PKNBJHCN@containers?5incompatible?5for?5swa@
CONST	SEGMENT
??_C@_0CB@PKNBJHCN@containers?5incompatible?5for?5swa@ DB 'containers inc'
	DB	'ompatible for swap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ DB 'vector iterators '
	DB	'incompatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
CONST	SEGMENT
??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ DB 'can''t increm'
	DB	'ent vector iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ DB 'can''t increm'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@LENEFKFL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MA@LENEFKFL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1', 00H, '9'
	DB	00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@GNHKHACC@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GA@GNHKHACC@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'34.31933\include\xtree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1', 00H, '9'
	DB	00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'34.31933\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7class_registration@detail@luabind@@6B@
CONST	SEGMENT
??_7class_registration@detail@luabind@@6B@ DD FLAT:??_R4class_registration@detail@luabind@@6B@ ; luabind::detail::class_registration::`vftable'
	DD	FLAT:??_Eclass_registration@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z
CONST	ENDS
;	COMDAT ??_C@_1DG@CAPFJFIB@?$AAm?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAu?$AAa?$AA_@
CONST	SEGMENT
??_C@_1DG@CAPFJFIB@?$AAm?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAu?$AAa?$AA_@ DB 'm'
	DB	00H, '_', 00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'l', 00H, 'u', 00H, 'a'
	DB	00H, '_', 00H, 'g', 00H, 'e', 00H, 't', 00H, 't', 00H, 'o', 00H
	DB	'p', 00H, '(', 00H, 'm', 00H, '_', 00H, 'L', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1KA@FDCAJHLM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
CONST	SEGMENT
??_C@_1KA@FDCAJHLM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H, 'e', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	'\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n', 00H, '_'
	DB	00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9', 00H, '.'
	DB	00H, '1', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	'b', 00H, 'u', 00H, 'g', 00H, '.', 00H, 'h', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@BKHOEKNE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?4?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?5?$AA?$HM@
CONST	SEGMENT
??_C@_1KK@BKHOEKNE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?4?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?5?$AA?$HM@ DB 'r'
	DB	00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, '.', 00H
	DB	's', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, '.', 00H, 'f', 00H, 'i', 00H, 'r'
	DB	00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, '.', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 'd', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'i', 00H, 'd'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@PBEMIDNO@?$AAi?$AAd?$AA?5?$AA?$DM?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA_?$AAi?$AAd?$AA_?$AAb@
CONST	SEGMENT
??_C@_1CG@PBEMIDNO@?$AAi?$AAd?$AA?5?$AA?$DM?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA_?$AAi?$AAd?$AA_?$AAb@ DB 'i'
	DB	00H, 'd', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'i', 00H, 'd', 00H, '_'
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@EAPOGOKM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
CONST	SEGMENT
??_C@_1KM@EAPOGOKM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H, 'e', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	'\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n', 00H, '_'
	DB	00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9', 00H, '.'
	DB	00H, '1', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'h', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'a', 00H, 'n'
	DB	00H, 'c', 00H, 'e', 00H, '.', 00H, 'h', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_R0?AUnull_type@detail@luabind@@@8
data$r	SEGMENT
??_R0?AUnull_type@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::null_type `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUnull_type@detail@luabind@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1', 00H, '9'
	DB	00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'34.31933\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z$0
__ehfuncinfo$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$0
__unwindtable$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$0
__unwindtable$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z$0
__ehfuncinfo$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z$0
__ehfuncinfo$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ
	DD	09H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ
	DD	09H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	03cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$0
	DD	04dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0class_base@detail@luabind@@QAE@PBD@Z$0
	DD	025H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z$0
	DD	016H
	DD	020H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z
	DD	02bH
	DD	0103H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z$0
__unwindtable$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0
__unwindtable$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0
__unwindtable$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z$0
__unwindtable$??0class_base@detail@luabind@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_base@detail@luabind@@QAE@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_base@detail@luabind@@QAE@PBD@Z$1
__ehfuncinfo$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0class_registration@detail@luabind@@QAE@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0class_registration@detail@luabind@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0class_base@detail@luabind@@QAE@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0class_base@detail@luabind@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$5
__unwindtable$??0class_registration@detail@luabind@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$5
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?in_place_init_if$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init_if@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init_if$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ ; ??id$initializer$@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@Vtype_id@luabind@@@std@@YA$$QAVtype_id@luabind@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Vtype_id@luabind@@@std@@YA$$QAVtype_id@luabind@@AAV12@@Z PROC ; std::forward<luabind::type_id>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@Vtype_id@luabind@@@std@@YA$$QAVtype_id@luabind@@AAV12@@Z ENDP ; std::forward<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z PROC ; std::_Tuple_get<0,char const * const &>, COMDAT

; 768  : _NODISCARD constexpr auto&& _Tuple_get(tuple<_Types...>&& _Tuple) noexcept {

	push	ebp
	mov	ebp, esp

; 769  :     // used by pair's piecewise constructor
; 770  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 771  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 772  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

	mov	eax, DWORD PTR __Tuple$[ebp]
	mov	eax, DWORD PTR [eax]

; 773  : }

	pop	ebp
	ret	0
??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ENDP ; std::_Tuple_get<0,char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::move<std::tuple<char const * const &> &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::move<std::tuple<char const * const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@I@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@I@0@@Z PROC ; std::_Voidify_iter<std::pair<luabind::type_id const ,unsigned int> *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@I@0@@Z ENDP ; std::_Voidify_iter<std::pair<luabind::type_id const ,unsigned int> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z PROC ; std::_Voidify_iter<luabind::detail::class_rep * *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z ENDP ; std::_Voidify_iter<luabind::detail::class_rep * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@PAVclass_rep@detail@luabind@@PAV123@@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@$$QAPAV345@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVclass_rep@detail@luabind@@PAV123@@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@$$QAPAV345@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *,luabind::detail::class_rep *>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ; std::forward<luabind::detail::class_rep *>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 681  :         }
; 682  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAVclass_rep@detail@luabind@@PAV123@@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@$$QAPAV345@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *,luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z PROC ; std::forward<luabind::detail::class_rep *>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ENDP ; std::forward<luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
	add	esp, 4
	push	eax
	call	??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ; std::_Tuple_get<0,char const * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z PROC	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>, COMDAT
; _this$ = ecx

; 144  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 199  :     constexpr tuple(_Tag) noexcept /* strengthened */ {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z PROC ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>, COMDAT

; 3712 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 3713 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3714 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 3715 : }

	pop	ebp
	ret	0
??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ENDP ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z PROC ; std::_To_address<luabind::detail::`anonymous namespace'::cast_entry *>, COMDAT

; 3712 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 3713 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3714 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 3715 : }

	pop	ebp
	ret	0
??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ENDP ; std::_To_address<luabind::detail::`anonymous namespace'::cast_entry *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBVtype_id@luabind@@I@std@@U?$pair@Vtype_id@luabind@@H@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBVtype_id@luabind@@I@std@@U?$pair@Vtype_id@luabind@@H@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::construct<std::pair<luabind::type_id const ,unsigned int>,std::pair<luabind::type_id,int> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@I@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id const ,unsigned int> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??$?0Vtype_id@luabind@@H$0A@@?$pair@$$CBVtype_id@luabind@@I@std@@QAE@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::pair<luabind::type_id const ,unsigned int>::pair<luabind::type_id const ,unsigned int><luabind::type_id,int,0>

; 681  :         }
; 682  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@$$CBVtype_id@luabind@@I@std@@U?$pair@Vtype_id@luabind@@H@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::construct<std::pair<luabind::type_id const ,unsigned int>,std::pair<luabind::type_id,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::nullptr_t>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 655  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBVtype_id@luabind@@I@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBVtype_id@luabind@@I@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::destroy<std::pair<luabind::type_id const ,unsigned int> >, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

	pop	ebp
	ret	0
??$destroy@U?$pair@$$CBVtype_id@luabind@@I@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::destroy<std::pair<luabind::type_id const ,unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@PAVclass_rep@detail@luabind@@$$V@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@PAVclass_rep@detail@luabind@@$$V@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR $T2[ebp], 4
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAPAVclass_rep@detail@luabind@@@std@@YAPAXPAPAVclass_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 681  :         }
; 682  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAVclass_rep@detail@luabind@@$$V@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z PROC ; std::_To_address<luabind::detail::class_rep * *>, COMDAT

; 3712 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 3713 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3714 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 3715 : }

	pop	ebp
	ret	0
??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ENDP ; std::_To_address<luabind::detail::class_rep * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@PAVclass_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEX$$QAPAVclass_rep@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAVclass_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEX$$QAPAVclass_rep@detail@luabind@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<luabind::detail::class_rep *>, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@PAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ; std::forward<luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ; std::_Unfancy<luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@PAVclass_rep@detail@luabind@@PAV123@@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@$$QAPAV345@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *,luabind::detail::class_rep *>
	add	esp, 12					; 0000000cH

; 1664 :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1665 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@PAVclass_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEX$$QAPAVclass_rep@detail@luabind@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVclass_rep@detail@luabind@@PAPAV123@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVclass_rep@detail@luabind@@PAPAV123@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@00@Z PROC ; std::_Copy_memmove<luabind::detail::class_rep * *,luabind::detail::class_rep * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 3834 :     auto _FirstPtr              = _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 3835 :     auto _LastPtr               = _To_address(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 3836 :     auto _DestPtr               = _To_address(_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	ecx, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	edx, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAPAVclass_rep@detail@luabind@@PAPAV123@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@00@Z ENDP ; std::_Copy_memmove<luabind::detail::class_rep * *,luabind::detail::class_rep * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAPAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z PROC ; std::move<luabind::detail::class_rep * &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAPAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ENDP ; std::move<luabind::detail::class_rep * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z PROC ; std::_Get_unwrapped<luabind::detail::class_rep * * const &>, COMDAT

; 911  :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z ENDP ; std::_Get_unwrapped<luabind::detail::class_rep * * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>, COMDAT
; _this$ = ecx

; 218  :         : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T1[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z PROC ; std::_Voidify_iter<std::pair<char const * const,int> *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ENDP ; std::_Voidify_iter<std::pair<char const * const,int> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z PROC ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>, COMDAT
; _this$ = ecx

; 239  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
	mov	ecx, DWORD PTR __This_arg$[ebp]
	push	ecx
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ENDP ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::construct<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 12					; 0000000cH

; 1664 :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1665 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Release, COMDAT
; _this$ = ecx

; 1667 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1668 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1669 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1670 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 12					; 0000000cH

; 1659 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@PAU12@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@PAU12@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@00@Z PROC ; std::_Copy_memmove<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 3834 :     auto _FirstPtr              = _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 3835 :     auto _LastPtr               = _To_address(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 3836 :     auto _DestPtr               = _To_address(_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_To_address@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_PABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_To_address<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	ecx, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	edx, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@PAU12@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z PROC ; std::_Get_unwrapped<std::pair<luabind::type_id,void * (__cdecl*)(void *)> * const &>, COMDAT

; 911  :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ENDP ; std::_Get_unwrapped<std::pair<luabind::type_id,void * (__cdecl*)(void *)> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z PROC ; std::_Voidify_iter<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ENDP ; std::_Voidify_iter<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z PROC ; std::addressof<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ENDP ; std::addressof<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@QAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::construct<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>
	add	esp, 12					; 0000000cH

; 1664 :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1665 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Release
; _this$ = ecx

; 1667 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1668 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1669 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1670 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 12					; 0000000cH

; 1659 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; _this$ = ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@00@Z PROC ; std::_Copy_memmove<luabind::detail::`anonymous namespace'::cast_entry *,luabind::detail::A0x440dba7a::cast_entry *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 3834 :     auto _FirstPtr              = _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_To_address<luabind::detail::`anonymous namespace'::cast_entry *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 3835 :     auto _LastPtr               = _To_address(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_To_address<luabind::detail::`anonymous namespace'::cast_entry *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 3836 :     auto _DestPtr               = _To_address(_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_To_address@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_PABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_To_address<luabind::detail::`anonymous namespace'::cast_entry *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	ecx, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	edx, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@00@Z ENDP ; std::_Copy_memmove<luabind::detail::`anonymous namespace'::cast_entry *,luabind::detail::A0x440dba7a::cast_entry *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_TABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_TABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z PROC ; std::_Get_unwrapped<luabind::detail::`anonymous namespace'::cast_entry * const &>, COMDAT

; 911  :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_TABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ENDP ; std::_Get_unwrapped<luabind::detail::`anonymous namespace'::cast_entry * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAXPAUcast_entry@?A0x440dba7a@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAXPAUcast_entry@?A0x440dba7a@detail@luabind@@@Z PROC ; std::_Voidify_iter<luabind::detail::`anonymous namespace'::cast_entry *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAXPAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ENDP ; std::_Voidify_iter<luabind::detail::`anonymous namespace'::cast_entry *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z PROC ; std::addressof<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ENDP ; std::addressof<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AB_N@std@@YAAB_NAB_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AB_N@std@@YAAB_NAB_N@Z PROC			; std::forward<bool const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@AB_N@std@@YAAB_NAB_N@Z ENDP			; std::forward<bool const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > > >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > ><std::pair<luabind::type_id,int> >, COMDAT
; _this$ = ecx

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	mov	ecx, DWORD PTR _<_Vals_0>$[ebp]
	push	ecx
	call	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$construct@U?$pair@$$CBVtype_id@luabind@@I@std@@U?$pair@Vtype_id@luabind@@H@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::construct<std::pair<luabind::type_id const ,unsigned int>,std::pair<luabind::type_id,int> >
	add	esp, 12					; 0000000cH

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
	add	esp, 8

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
	add	esp, 8

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
	add	esp, 8

; 811  :         this->_Ptr->_Color = _Red;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 812  :         this->_Ptr->_Isnil = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+13], 0

; 813  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > ><std::pair<luabind::type_id,int> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >, COMDAT
; _this$ = ecx

; 818  :     ~_Tree_temp_node() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 819  :         if (this->_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tree_temp_

; 820  :             _Destroy_in_place(this->_Ptr->_Left);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
	add	esp, 4

; 821  :             _Destroy_in_place(this->_Ptr->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
	add	esp, 4

; 822  :             _Destroy_in_place(this->_Ptr->_Right);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
	add	esp, 4

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$destroy@U?$pair@$$CBVtype_id@luabind@@I@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@I@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::destroy<std::pair<luabind::type_id const ,unsigned int> >
	add	esp, 8
$LN1@Tree_temp_:

; 824  :         }
; 825  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >, COMDAT
; _this$ = ecx

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 786  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Allocate

; 787  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >, COMDAT
; _this$ = ecx

; 1016 :     _CONSTEXPR20 ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1017 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1018 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::deallocate
$LN3@Alloc_cons:

; 1019 :         }
; 1020 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1011 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1013 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1014 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1007 :     _NODISCARD _CONSTEXPR20 pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1008 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,std::nullptr_t>
	add	esp, 8

; 1009 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >, COMDAT
; _this$ = ecx

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map@Vtype_id@luabind@@U?$pair@Vtype_id@luabind@@H@std@@@std@@SAABVtype_id@luabind@@ABU?$pair@Vtype_id@luabind@@H@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Extract@?$_In_place_key_extract_map@Vtype_id@luabind@@U?$pair@Vtype_id@luabind@@H@std@@@std@@SAABVtype_id@luabind@@ABU?$pair@Vtype_id@luabind@@H@2@@Z PROC ; std::_In_place_key_extract_map<luabind::type_id,std::pair<luabind::type_id,int> >::_Extract, COMDAT

; 1973 :     static const _Key& _Extract(const pair<_First, _Second>& _Val) {

	push	ebp
	mov	ebp, esp

; 1974 :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 1975 :     }

	pop	ebp
	ret	0
?_Extract@?$_In_place_key_extract_map@Vtype_id@luabind@@U?$pair@Vtype_id@luabind@@H@std@@@std@@SAABVtype_id@luabind@@ABU?$pair@Vtype_id@luabind@@H@2@@Z ENDP ; std::_In_place_key_extract_map<luabind::type_id,std::pair<luabind::type_id,int> >::_Extract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0M@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0M@@std@@YAII@Z PROC			; std::_Get_size_of_n<12>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 357913941 ; 15555555H

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 12
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0M@@std@@YAII@Z ENDP			; std::_Get_size_of_n<12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z PROC ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>, COMDAT

; 1092 :     noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1093 :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 1094 :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
	mov	BYTE PTR __Result$[ebp], al

; 1095 :     if (_Result) {

	movzx	edx, BYTE PTR __Result$[ebp]
	test	edx, edx
	je	SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1096 :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1096					; 00000448H
	push	OFFSET ??_C@_0GD@JKKFFOCD@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	push	0
	push	1096					; 00000448H
	push	OFFSET ??_C@_1MG@JJBOPAGB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
	xor	edx, edx
	jne	SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1097 :     }
; 1098 : 
; 1099 :     return _Result;

	mov	al, BYTE PTR __Result$[ebp]

; 1100 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ENDP ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z PROC ; std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0>::_Kfn<luabind::type_id const ,unsigned int>, COMDAT

; 67   :     static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp

; 68   :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 69   :     }

	pop	ebp
	ret	0
??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z ENDP ; std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0>::_Kfn<luabind::type_id const ,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ; std::_Unfancy<luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	??$construct@PAVclass_rep@detail@luabind@@$$V@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@PAVclass_rep@detail@luabind@@@1@QAPAVclass_rep@detail@luabind@@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::construct<luabind::detail::class_rep *>
	add	esp, 8

; 1664 :         ++_Last;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1665 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Release, COMDAT
; _this$ = ecx

; 1667 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1668 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1669 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1670 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH

; 1659 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Zero_range@PAPAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0@Z
_TEXT	SEGMENT
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0@Z PROC ; std::_Zero_range<luabind::detail::class_rep * *>, COMDAT

; 1878 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1879 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
	add	esp, 4
	mov	DWORD PTR __First_ch$[ebp], eax

; 1880 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAPAVclass_rep@detail@luabind@@@std@@YA?A_PABQAPAVclass_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep * *>
	add	esp, 4
	mov	DWORD PTR __Last_ch$[ebp], eax

; 1881 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	edx, DWORD PTR __Last_ch$[ebp]
	sub	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __First_ch$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1882 :     return _Last;

	mov	eax, DWORD PTR __Last$[ebp]

; 1883 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Zero_range@PAPAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0@Z ENDP ; std::_Zero_range<luabind::detail::class_rep * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z PROC ; std::_Unfancy<luabind::detail::class_rep *>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ENDP ; std::_Unfancy<luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$ = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z PROC ; std::_Uninitialized_move<luabind::detail::class_rep * *,std::allocator<luabind::detail::class_rep *> >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep * * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@ABQAPAVclass_rep@detail@luabind@@@std@@YA?A_TABQAPAVclass_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep * * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ; std::_Unfancy<luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAPAVclass_rep@detail@luabind@@PAPAV123@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@00@Z ; std::_Copy_memmove<luabind::detail::class_rep * *,luabind::detail::class_rep * *>
	add	esp, 12					; 0000000cH

; 1801 :             return _Dest + (_ULast - _UFirst);

	mov	edx, DWORD PTR __ULast$[ebp]
	sub	edx, DWORD PTR __UFirst$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN1@Uninitiali

; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	cmp	ecx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$move@AAPAVclass_rep@detail@luabind@@@std@@YA$$QAPAVclass_rep@detail@luabind@@AAPAV123@@Z ; std::move<luabind::detail::class_rep * &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@PAVclass_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEX$$QAPAVclass_rep@detail@luabind@@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<luabind::detail::class_rep *>

; 1808 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1809 : 
; 1810 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1811 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ENDP ; std::_Uninitialized_move<luabind::detail::class_rep * *,std::allocator<luabind::detail::class_rep *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 380  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 381  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
	add	esp, 8

; 383  :         _Freenode0(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 384  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 655  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ; std::_Voidify_iter<std::pair<char const * const,int> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	push	ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _<_Args_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	push	ecx
	mov	esi, esp
	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z	; std::tuple<char const * const &>::tuple<char const * const &>
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>

; 681  :         }
; 682  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::forward<std::tuple<char const * const &> >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::forward<std::tuple<char const * const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z PROC	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>, COMDAT
; _this$ = ecx

; 277  :         : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __This_arg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z PROC ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>, COMDAT

; 1092 :     noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1093 :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 1094 :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Left$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??Rltstr@detail@luabind@@QBE_NPBD0@Z	; luabind::detail::ltstr::operator()
	mov	BYTE PTR __Result$[ebp], al

; 1095 :     if (_Result) {

	movzx	ecx, BYTE PTR __Result$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1096 :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	edx, DWORD PTR __Left$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??Rltstr@detail@luabind@@QBE_NPBD0@Z	; luabind::detail::ltstr::operator()
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1096					; 00000448H
	push	OFFSET ??_C@_0GD@JKKFFOCD@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	push	0
	push	1096					; 00000448H
	push	OFFSET ??_C@_1MG@JJBOPAGB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
	xor	eax, eax
	jne	SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1097 :     }
; 1098 : 
; 1099 :     return _Result;

	mov	al, BYTE PTR __Result$[ebp]

; 1100 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ENDP ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z PROC ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>, COMDAT

; 67   :     static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp

; 68   :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 69   :     }

	pop	ebp
	ret	0
??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ENDP ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$ = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Get_unwrapped<std::pair<luabind::type_id,void * (__cdecl*)(void *)> * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@ABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA?A_TABQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Get_unwrapped<std::pair<luabind::type_id,void * (__cdecl*)(void *)> * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@PAU12@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@00@Z ; std::_Copy_memmove<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 12					; 0000000cH

; 1801 :             return _Dest + (_ULast - _UFirst);

	mov	edx, DWORD PTR __ULast$[ebp]
	sub	edx, DWORD PTR __UFirst$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	jmp	SHORT $LN1@Uninitiali

; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 8
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	cmp	ecx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >

; 1808 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1809 : 
; 1810 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1811 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~_Uninitialized_backout_al<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::construct<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 681  :         }
; 682  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::construct<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z PROC ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z ENDP ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@std@@YAXAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@$$QAU10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@std@@YAXAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@$$QAU10@@Z PROC ; std::_Construct_in_place<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@std@@YAXAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@$$QAU10@@Z ENDP ; std::_Construct_in_place<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 669  :         }
; 670  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$ = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z PROC ; std::_Uninitialized_move<luabind::detail::`anonymous namespace'::cast_entry *,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_TABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::`anonymous namespace'::cast_entry * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@ABQAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA?A_TABQAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::`anonymous namespace'::cast_entry * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@00@Z ; std::_Copy_memmove<luabind::detail::`anonymous namespace'::cast_entry *,luabind::detail::A0x440dba7a::cast_entry *>
	add	esp, 12					; 0000000cH

; 1801 :             return _Dest + (_ULast - _UFirst);

	mov	eax, DWORD PTR __ULast$[ebp]
	sub	eax, DWORD PTR __UFirst$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	imul	eax, eax, 12
	add	eax, DWORD PTR __Dest$[ebp]
	jmp	SHORT $LN1@Uninitiali

; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
	mov	edx, DWORD PTR __UFirst$[ebp]
	cmp	edx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$move@AAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::move<luabind::detail::`anonymous namespace'::cast_entry &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back<luabind::detail::`anonymous namespace'::cast_entry>

; 1808 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1809 : 
; 1810 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1811 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ENDP ; std::_Uninitialized_move<luabind::detail::`anonymous namespace'::cast_entry *,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@QAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU3456@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@QAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU3456@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::construct<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAXPAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::`anonymous namespace'::cast_entry *>
	add	esp, 4
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 681  :         }
; 682  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@QAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU3456@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::construct<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z PROC ; std::_Unfancy<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z ENDP ; std::_Unfancy<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@std@@YAXAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU1234@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@std@@YAXAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU1234@@Z PROC ; std::_Construct_in_place<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::addressof<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAXPAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::`anonymous namespace'::cast_entry *>
	add	esp, 4
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@std@@YAXAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU1234@@Z ENDP ; std::_Construct_in_place<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\range\end.hpp
;	COMDAT ??$range_end@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
??$range_end@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z PROC ; boost::range_detail::range_end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >, COMDAT

; 40   :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 41   :             //
; 42   :             // If you get a compile-error here, it is most likely because
; 43   :             // you have not implemented range_begin() properly in
; 44   :             // the namespace of C
; 45   :             //
; 46   :             return c.end();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	call	?end@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::end
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 47   :         }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$range_end@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ENDP ; boost::range_detail::range_end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\range\begin.hpp
;	COMDAT ??$range_begin@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
??$range_begin@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z PROC ; boost::range_detail::range_begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >, COMDAT

; 39   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 40   :         //
; 41   :         // If you get a compile-error here, it is most likely because
; 42   :         // you have not implemented range_begin() properly in
; 43   :         // the namespace of C
; 44   :         //
; 45   :         return c.begin();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	call	?begin@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::begin
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 46   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$range_begin@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ENDP ; boost::range_detail::range_begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@1@AB_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool const &,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@AB_N@std@@YAAB_NAB_N@Z	; std::forward<bool const &>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
tv141 = -72						; size = 4
$T1 = -68						; size = 4
$T2 = -61						; size = 1
$T3 = -60						; size = 8
$T4 = -49						; size = 1
$T5 = -48						; size = 12
__Keyval$6 = -36					; size = 4
__Inserted$ = -32					; size = 4
__Loc$ = -24						; size = 12
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Emplace<std::pair<luabind::type_id,int> >, COMDAT
; _this$ = ecx

; 994  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 995  :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 996  :         const auto _Scary             = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 997  :         _Tree_find_result<_Nodeptr> _Loc;
; 998  :         _Nodeptr _Inserted;
; 999  :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1000 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	?_Extract@?$_In_place_key_extract_map@Vtype_id@luabind@@U?$pair@Vtype_id@luabind@@H@std@@@std@@SAABVtype_id@luabind@@ABU?$pair@Vtype_id@luabind@@H@2@@Z ; std::_In_place_key_extract_map<luabind::type_id,std::pair<luabind::type_id,int> >::_Extract
	add	esp, 4
	mov	DWORD PTR __Keyval$6[ebp], eax

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

	mov	ecx, DWORD PTR __Keyval$6[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Find_lower_bound<luabind::type_id>
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Loc$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Loc$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Loc$[ebp+8], eax

; 1002 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	ecx, DWORD PTR __Keyval$6[ebp]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Lower_bound_duplicate<luabind::type_id>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Emplace

; 1003 :                 return {_Loc._Bound, false};

	mov	BYTE PTR $T4[ebp], 0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	lea	edx, DWORD PTR __Loc$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> * &,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@Emplace
$LN2@Emplace:

; 1004 :             }
; 1005 : 
; 1006 :             _Check_grow_by_1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Check_grow_by_1

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??$?0U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > ><std::pair<luabind::type_id,int> >
	mov	DWORD PTR tv141[ebp], eax
	mov	ecx, DWORD PTR tv141[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::_Release
	mov	DWORD PTR __Inserted$[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >

; 1008 :             // nothrow hereafter
; 1009 :         } else {
; 1010 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);
; 1011 :             const auto& _Keyval = _Traits::_Kfn(_Newnode._Ptr->_Myval);
; 1012 :             if constexpr (_Multi) { // duplicate check if unique
; 1013 :                 _Loc = _Find_upper_bound(_Keyval);
; 1014 :             } else {
; 1015 :                 _Loc = _Find_lower_bound(_Keyval);
; 1016 :                 if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1017 :                     return {_Loc._Bound, false};
; 1018 :                 }
; 1019 :             }
; 1020 : 
; 1021 :             _Check_grow_by_1();
; 1022 :             // nothrow hereafter
; 1023 :             _Inserted = _Newnode._Release();
; 1024 :         }
; 1025 : 
; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, DWORD PTR __Inserted$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Insert_node
	mov	DWORD PTR $T1[ebp], eax
	mov	BYTE PTR $T2[ebp], 1
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Emplace:

; 1027 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Emplace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Emplace:
	DD	1
	DD	$LN6@Emplace
$LN6@Emplace:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN5@Emplace
$LN5@Emplace:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Emplace<std::pair<luabind::type_id,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z PROC ; std::move<luabind::detail::ltstr &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z ENDP ; std::move<luabind::detail::ltstr &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]

; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 24
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 655  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

	pop	ebp
	ret	0
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z PROC ; std::addressof<std::pair<char const * const,int> >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ENDP ; std::addressof<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 130  :     if (_Block_size <= _Bytes) {

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET $SG120298
	push	OFFSET $SG120299
	push	0
	push	135					; 00000087H
	push	OFFSET $SG120300
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	135					; 00000087H
	push	OFFSET $SG120301
	push	OFFSET $SG120302
	push	OFFSET $SG120303
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 143  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAI@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAI@std@@YA$$QAIAAI@Z PROC			; std::move<unsigned int &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAI@std@@YA$$QAIAAI@Z ENDP			; std::move<unsigned int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z PROC ; std::forward<luabind::detail::ltstr const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ENDP ; std::forward<luabind::detail::ltstr const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?8U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@U01@@std@@YA_NABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@U01@@std@@YA_NABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z PROC ; std::operator==<std::_Tree_node<std::pair<char const * const,int>,void *>,std::_Tree_node<std::pair<char const * const,int>,void *> >, COMDAT

; 895  : _NODISCARD _CONSTEXPR20 bool operator==(const allocator<_Ty>&, const allocator<_Other>&) noexcept {

	push	ebp
	mov	ebp, esp

; 896  :     return true;

	mov	al, 1

; 897  : }

	pop	ebp
	ret	0
??$?8U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@U01@@std@@YA_NABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ENDP ; std::operator==<std::_Tree_node<std::pair<char const * const,int>,void *>,std::_Tree_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Lower_bound_duplicate<luabind::type_id>, COMDAT
; _this$ = ecx

; 1604 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Bound$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	edx, DWORD PTR __Bound$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z ; std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0>::_Kfn<luabind::type_id const ,unsigned int>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
	mov	al, BYTE PTR tv78[ebp]

; 1606 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Lower_bound_duplicate<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
__Trynode$ = -32					; size = 4
__Result$ = -24						; size = 12
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Find_lower_bound<luabind::type_id>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1610 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Result$[ebp], edx
	mov	DWORD PTR __Result$[ebp+4], 0
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Result$[ebp+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;

	mov	edx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx
$LN2@Find_lower:

; 1613 :         while (!_Trynode->_Isnil) {

	mov	eax, DWORD PTR __Trynode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Find_lower

; 1614 :             _Result._Location._Parent = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp], edx

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Trynode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Kfn@$$CBVtype_id@luabind@@I@?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@I@1@@Z ; std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0>::_Kfn<luabind::type_id const ,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;

	mov	DWORD PTR __Result$[ebp+4], 0

; 1617 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 1618 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;

	mov	DWORD PTR __Result$[ebp+4], 1

; 1620 :                 _Result._Bound           = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp+8], edx

; 1621 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], ecx
$LN5@Find_lower:

; 1622 :             }
; 1623 :         }

	jmp	SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1624 : 
; 1625 :         return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Result$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1626 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Find_lower
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@Find_lower:
	DD	1
	DD	$LN8@Find_lower
$LN8@Find_lower:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN7@Find_lower
$LN7@Find_lower:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Find_lower_bound<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Backout$ = -32					; size = 12
__PFirst$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<luabind::detail::class_rep *> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unfancy@PAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@@Z ; std::_Unfancy<luabind::detail::class_rep *>
	add	esp, 4
	mov	DWORD PTR __PFirst$3[ebp], eax

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __PFirst$3[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __PFirst$3[ebp]
	push	ecx
	call	??$_Zero_range@PAPAVclass_rep@detail@luabind@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0@Z ; std::_Zero_range<luabind::detail::class_rep * *>
	add	esp, 8

; 1897 :             return _First + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN1@Uninitiali

; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@PAPAVclass_rep@detail@luabind@@AAV?$allocator@PAVclass_rep@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1902 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Uninitiali:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Uninitiali

; 1903 :         _Backout._Emplace_back();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Emplace_back<>

; 1904 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1905 : 
; 1906 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEPAPAVclass_rep@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1907 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<luabind::detail::class_rep *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv140 = -60						; size = 4
__Appended_last$ = -56					; size = 4
__Appended_first$ = -52					; size = 4
__Newvec$ = -48						; size = 4
__Newcapacity$ = -44					; size = 4
__Oldsize$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1575 :         if (_Newsize > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::max_size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jbe	SHORT $LN2@Resize_rea

; 1576 :             _Xlength();

	call	?_Xlength@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@CAXXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Xlength
$LN2@Resize_rea:

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1580 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1581 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1582 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldsize$[ebp], edx

; 1585 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEII@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 1586 : 
; 1587 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEPAPAVclass_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep *>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Appended_first$[ebp], ecx

; 1589 :         pointer _Appended_last        = _Appended_first;

	mov	edx, DWORD PTR __Appended_first$[ebp]
	mov	DWORD PTR __Appended_last$[ebp], edx

; 1590 : 
; 1591 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1592 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1593 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1594 :         } else {
; 1595 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, DWORD PTR __Oldsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Appended_first$[ebp]
	push	edx
	call	??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv140[ebp], eax
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR __Appended_last$[ebp], eax

; 1597 :         }
; 1598 : 
; 1599 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Uninitialized_move@PAPAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@QAPAV123@0PAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep * *,std::allocator<luabind::detail::class_rep *> >
	add	esp, 16					; 00000010H
	jmp	SHORT $LN5@Resize_rea
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1601 :         } else {
; 1602 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1603 :         }
; 1604 :         _CATCH_ALL
; 1605 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Appended_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Appended_first$[ebp]
	push	eax
	call	??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH

; 1606 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep *>::deallocate

; 1607 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1608 :         _CATCH_END

	mov	eax, $LN8@Resize_rea
	ret	0
$LN5@Resize_rea:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1
$LN8@Resize_rea:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1:

; 1609 : 
; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXQAPAVclass_rep@detail@luabind@@II@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Change_array
$LN4@Resize_rea:

; 1611 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z PROC ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 371  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 372  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 373  :         _Destroy_in_place(_Ptr->_Left);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 374  :         _Destroy_in_place(_Ptr->_Parent);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 375  :         _Destroy_in_place(_Ptr->_Right);

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 8
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 376  :         allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 377  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	eax, DWORD PTR __Rootnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN4@Erase_tree

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	edx, DWORD PTR __Rootnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	lea	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 748  :         }

	jmp	SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 749  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
_<_Vals_1>$ = 20					; size = 4
_<_Vals_2>$ = 24					; size = 4
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	mov	ecx, DWORD PTR _<_Vals_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _<_Vals_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
	add	esp, 20					; 00000014H

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 811  :         this->_Ptr->_Color = _Red;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 812  :         this->_Ptr->_Isnil = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+13], 0

; 813  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 818  :     ~_Tree_temp_node() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 819  :         if (this->_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tree_temp_

; 820  :             _Destroy_in_place(this->_Ptr->_Left);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 821  :             _Destroy_in_place(this->_Ptr->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 822  :             _Destroy_in_place(this->_Ptr->_Right);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
	add	esp, 8
$LN1@Tree_temp_:

; 824  :         }
; 825  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 786  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate

; 787  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 1016 :     _CONSTEXPR20 ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1017 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1018 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
$LN3@Alloc_cons:

; 1019 :         }
; 1020 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1011 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1013 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1014 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1007 :     _NODISCARD _CONSTEXPR20 pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1008 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
	add	esp, 8

; 1009 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 823  : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 824  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 825  : }

	pop	ebp
	ret	0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z PROC		; std::tuple<char const * const &>::tuple<char const * const &>, COMDAT
; _this$ = ecx

; 288  :     tuple(tuple&&)      = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z ENDP		; std::tuple<char const * const &>::tuple<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z PROC ; std::forward_as_tuple<char const * const &>, COMDAT

; 823  : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 824  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 825  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ENDP ; std::forward_as_tuple<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQBD@std@@YAABQBDABQBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQBD@std@@YAABQBDABQBD@Z PROC		; std::forward<char const * const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABQBD@std@@YAABQBDABQBD@Z ENDP		; std::forward<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>, COMDAT
; _this$ = ecx

; 1604 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Bound$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	edx, DWORD PTR __Bound$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
	mov	al, BYTE PTR tv78[ebp]

; 1606 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z
_TEXT	SEGMENT
__Trynode$ = -32					; size = 4
__Result$ = -24						; size = 12
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1610 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Result$[ebp], edx
	mov	DWORD PTR __Result$[ebp+4], 0
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Result$[ebp+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;

	mov	edx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx
$LN2@Find_lower:

; 1613 :         while (!_Trynode->_Isnil) {

	mov	eax, DWORD PTR __Trynode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Find_lower

; 1614 :             _Result._Location._Parent = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp], edx

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Trynode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;

	mov	DWORD PTR __Result$[ebp+4], 0

; 1617 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 1618 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;

	mov	DWORD PTR __Result$[ebp+4], 1

; 1620 :                 _Result._Bound           = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp+8], edx

; 1621 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], ecx
$LN5@Find_lower:

; 1622 :             }
; 1623 :         }

	jmp	SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1624 : 
; 1625 :         return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Result$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1626 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Find_lower
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@Find_lower:
	DD	1
	DD	$LN8@Find_lower
$LN8@Find_lower:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN7@Find_lower
$LN7@Find_lower:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_reallocate<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 878  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 879  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 880  :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 888  :             _Xlength();

	call	?_Xlength@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@CAXXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Xlength
$LN2@Emplace_re:

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 892  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEII@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 893  : 
; 894  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 896  :         pointer _Constructed_first      = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 897  : 
; 898  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Unfancy@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@PAU10@@Z ; std::_Unfancy<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$construct@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::construct<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 12					; 0000000cH

; 900  :         _Constructed_first = _Newvec + _Whereoff;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Whereptr$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@Emplace_re

; 903  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 904  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 16					; 00000010H

; 905  :             } else {
; 906  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 907  :             }
; 908  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 16					; 00000010H

; 910  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@YAPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@0PAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Uninitialized_move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> *,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 12					; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate

; 916  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 917  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z$1:

; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@II@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Change_array

; 920  :         return _Newvec + _Whereoff;

	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
$LN6@Emplace_re:

; 921  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_reallocate<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back_with_unused_capacity<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 853  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 854  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 855  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 856  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 857  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 858  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 859  :             _ASAN_VECTOR_MODIFY(1);
; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Construct_in_place@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@U12@@std@@YAXAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@$$QAU10@@Z ; std::_Construct_in_place<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 8

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range

; 868  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 869  :         ++_Mylast;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 870  : 
; 871  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 872  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back_with_unused_capacity<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z PROC ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ENDP ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 980  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 981  :     // deallocate a plain pointer using an allocator
; 982  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 983  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 984  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 985  :     } else {
; 986  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 987  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 988  :     }
; 989  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_reallocate<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 878  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 879  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 880  :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 888  :             _Xlength();

	call	?_Xlength@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@CAXXZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Xlength
$LN2@Emplace_re:

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 892  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEII@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 893  : 
; 894  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	edx, DWORD PTR __Whereoff$[ebp], 12
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 896  :         pointer _Constructed_first      = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 897  : 
; 898  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	add	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	call	??$_Unfancy@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@QAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::construct<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>
	add	esp, 12					; 0000000cH

; 900  :         _Constructed_first = _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 12
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR __Whereptr$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@Emplace_re

; 903  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 904  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::`anonymous namespace'::cast_entry *,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 16					; 00000010H

; 905  :             } else {
; 906  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 907  :             }
; 908  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::`anonymous namespace'::cast_entry *,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 16					; 00000010H

; 910  :             _Constructed_first = _Newvec;

	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAUcast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::`anonymous namespace'::cast_entry *,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	call	??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 12					; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::deallocate

; 916  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 917  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z$1:

; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@II@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 12
	add	eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 921  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_reallocate<luabind::detail::`anonymous namespace'::cast_entry>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back_with_unused_capacity<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 853  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 854  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 855  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 856  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 857  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 858  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 859  :             _ASAN_VECTOR_MODIFY(1);
; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Construct_in_place@Ucast_entry@?A0x440dba7a@detail@luabind@@U1234@@std@@YAXAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU1234@@Z ; std::_Construct_in_place<luabind::detail::`anonymous namespace'::cast_entry,luabind::detail::A0x440dba7a::cast_entry>
	add	esp, 8

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range

; 868  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 869  :         ++_Mylast;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 870  : 
; 871  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 872  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back_with_unused_capacity<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z PROC ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ENDP ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0ABVtype_id@luabind@@AAP6APAXPAX@Z$0A@@?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@QAE@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABVtype_id@luabind@@AAP6APAXPAX@Z$0A@@?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@QAE@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z PROC ; std::pair<luabind::type_id,void * (__cdecl*)(void *)>::pair<luabind::type_id,void * (__cdecl*)(void *)><luabind::type_id const &,void * (__cdecl*&)(void *),0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z ; std::forward<void * (__cdecl*&)(void *)>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABVtype_id@luabind@@AAP6APAXPAX@Z$0A@@?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@QAE@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ENDP ; std::pair<luabind::type_id,void * (__cdecl*)(void *)>::pair<luabind::type_id,void * (__cdecl*)(void *)><luabind::type_id const &,void * (__cdecl*&)(void *),0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z PROC ; std::forward<void * (__cdecl*&)(void *)>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z ENDP ; std::forward<void * (__cdecl*&)(void *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z PROC ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >, COMDAT

; 277  : {

	push	ebp
	mov	ebp, esp

; 278  :     return static_cast<auto_any<T> const &>(a).item;

	mov	eax, DWORD PTR _a$[ebp]

; 279  : }

	pop	ebp
	ret	0
??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z ENDP ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\range\end.hpp
;	COMDAT ??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z PROC ; boost::range_adl_barrier::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 106  : #if !BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564))
; 107  :     using namespace range_detail;
; 108  : #endif
; 109  :     return range_end( r );

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$range_end@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ; boost::range_detail::range_end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 8
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 110  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ENDP ; boost::range_adl_barrier::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\range\begin.hpp
;	COMDAT ??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z PROC ; boost::range_adl_barrier::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 112  : #if !BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564))
; 113  :     using namespace range_detail;
; 114  : #endif
; 115  :     return range_begin( r );

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$range_begin@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_detail@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ; boost::range_detail::range_begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 8
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 116  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ENDP ; boost::range_adl_barrier::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$auto_any_cast@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABUauto_any_base@01@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??$auto_any_cast@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABUauto_any_base@01@@Z PROC ; boost::foreach_detail_::auto_any_cast<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *,boost::mpl::bool_<0> >, COMDAT

; 277  : {

	push	ebp
	mov	ebp, esp

; 278  :     return static_cast<auto_any<T> const &>(a).item;

	mov	eax, DWORD PTR _a$[ebp]

; 279  : }

	pop	ebp
	ret	0
??$auto_any_cast@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABUauto_any_base@01@@Z ENDP ; boost::foreach_detail_::auto_any_cast<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *,boost::mpl::bool_<0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\core\addressof.hpp
;	COMDAT ??$addressof@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@YAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV12@@Z
_TEXT	SEGMENT
_o$ = 8							; size = 4
??$addressof@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@YAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV12@@Z PROC ; boost::addressof<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   :     return __builtin_addressof(o);

	mov	eax, DWORD PTR _o$[ebp]

; 41   : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@YAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV12@@Z ENDP ; boost::addressof<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ
text$di	SEGMENT
$T1 = -4						; size = 4
??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ PROC ; `dynamic initializer for 'luabind::detail::registered_class<luabind::detail::null_type>::id'', COMDAT

; 159  : class_id const registered_class<T>::id = allocate_class_id(typeid(T));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	push	OFFSET ??_R0?AUnull_type@detail@luabind@@@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z ; luabind::detail::allocate_class_id
	add	esp, 4
	mov	DWORD PTR ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB, eax ; luabind::detail::registered_class<luabind::detail::null_type>::id
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ ENDP ; `dynamic initializer for 'luabind::detail::registered_class<luabind::detail::null_type>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 67   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
tv83 = -40						; size = 4
$T1 = -36						; size = 4
$T2 = -32						; size = 12
__Result$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::emplace<std::pair<luabind::type_id,int> >, COMDAT
; _this$ = ecx

; 1031 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1032 :         const auto _Result = _Emplace(_STD forward<_Valtys>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Emplace<std::pair<luabind::type_id,int> >

; 1033 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
	push	eax
	mov	edx, DWORD PTR __Result$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z
	mov	DWORD PTR tv83[ebp], eax
	lea	eax, DWORD PTR __Result$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool const &,0>
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1034 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@emplace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@emplace:
	DD	1
	DD	$LN7@emplace
$LN7@emplace:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN6@emplace
$LN6@emplace:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::emplace<std::pair<luabind::type_id,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z PROC ; std::forward<std::pair<luabind::type_id,int> >, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ENDP ; std::forward<std::pair<luabind::type_id,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0ABVtype_id@luabind@@H$0A@@?$pair@Vtype_id@luabind@@H@std@@QAE@ABVtype_id@luabind@@$$QAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABVtype_id@luabind@@H$0A@@?$pair@Vtype_id@luabind@@H@std@@QAE@ABVtype_id@luabind@@$$QAH@Z PROC ; std::pair<luabind::type_id,int>::pair<luabind::type_id,int><luabind::type_id const &,int,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABVtype_id@luabind@@H$0A@@?$pair@Vtype_id@luabind@@H@std@@QAE@ABVtype_id@luabind@@$$QAH@Z ENDP ; std::pair<luabind::type_id,int>::pair<luabind::type_id,int><luabind::type_id const &,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z PROC ; std::forward<luabind::type_id const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1426 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1427 : }

	pop	ebp
	ret	0
??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ENDP ; std::forward<luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4897 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4898 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4899 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4900 :         if (_New_size > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 4901 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4902 :         }
; 4903 : 
; 4904 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 4905 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4906 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4907 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4908 : 
; 4909 : #if _HAS_CXX20
; 4910 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4911 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4912 :         }
; 4913 : #endif // _HAS_CXX20
; 4914 :         _Mypair._Myval2._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4915 :         _ASAN_STRING_REMOVE(*this);
; 4916 :         _Mypair._Myval2._Mysize = _New_size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 4917 :         _Mypair._Myval2._Myres  = _New_capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4918 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	edx, DWORD PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4919 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 4920 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4921 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 4922 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4923 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4924 :         }
; 4925 : 
; 4926 :         _ASAN_STRING_CREATE(*this);
; 4927 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4928 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN8@Reallocate:
	DD	1
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Reallocate
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 3541 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3539 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3540 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3541 :             },

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@I$0A@@std@@YAXAAI0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@I$0A@@std@@YAXAAI0@Z PROC			; std::swap<unsigned int,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAI@std@@YA$$QAIAAI@Z		; std::move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAI@std@@YA$$QAIAAI@Z		; std::move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAI@std@@YA$$QAIAAI@Z		; std::move<unsigned int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@I$0A@@std@@YAXAAI0@Z ENDP			; std::swap<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$0A@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$0A@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z PROC ; std::swap<std::_Tree_node<std::pair<char const * const,int>,void *> *,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::move<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$0A@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ENDP ; std::swap<std::_Tree_node<std::pair<char const * const,int>,void *> *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$_Swap_adl@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z PROC ; std::_Swap_adl<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 106  : _CONSTEXPR20 void _Swap_adl(_Ty& _Left, _Ty& _Right) noexcept(_Is_nothrow_swappable<_Ty>::value) {

	push	ebp
	mov	ebp, esp

; 107  :     swap(_Left, _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$swap@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$0A@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::swap<std::_Tree_node<std::pair<char const * const,int>,void *> *,0>
	add	esp, 8

; 108  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Swap_adl@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ENDP ; std::_Swap_adl<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 344  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 345  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
; 346  :         const auto _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	add	edx, 8
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 350  :         _Pnode->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 351  :         _Pnode->_Isnil = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+13], 1

; 352  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 353  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Buyheadnod:
	DD	1
	DD	$LN4@Buyheadnod
$LN4@Buyheadnod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Buyheadnod
$LN3@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1340 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1341 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1342 :             _Delete_plain_internal(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1343 :         }
; 1344 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1326 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1327 :         // create a new _Container_proxy pointing at _Mycont
; 1328 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1329 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1330 :         _Mycont._Myproxy = _Ptr;

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1331 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 256  :     }
; 257  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z PROC	; std::_Construct_in_place<char *,char * &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 232  :     }
; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ENDP	; std::_Construct_in_place<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4931 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4932 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4933 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4934 :         auto& _My_data            = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4935 :         const size_type _Old_size = _My_data._Mysize;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __Old_size$[ebp], edx

; 4936 :         if (max_size() - _Old_size < _Size_increase) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 4937 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4938 :         }
; 4939 : 
; 4940 :         const size_type _New_size     = _Old_size + _Size_increase;

	mov	eax, DWORD PTR __Old_size$[ebp]
	add	eax, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], eax

; 4941 :         const size_type _Old_capacity = _My_data._Myres;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Old_capacity$[ebp], edx

; 4942 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4943 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4944 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	ecx, DWORD PTR __New_capacity$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4945 : 
; 4946 : #if _HAS_CXX20
; 4947 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4948 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4949 :         }
; 4950 : #endif // _HAS_CXX20
; 4951 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4952 :         _ASAN_STRING_REMOVE(*this);
; 4953 :         _My_data._Mysize      = _New_size;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [edx+20], eax

; 4954 :         _My_data._Myres       = _New_capacity;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 4955 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

	mov	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 4956 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 4957 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Old_ptr$1[ebp], edx

; 4958 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4959 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4960 :             _My_data._Bx._Ptr = _New_ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4961 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4962 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4963 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4964 :         }
; 4965 : 
; 4966 :         _ASAN_STRING_CREATE(*this);
; 4967 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4968 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN8@Reallocate:
	DD	1
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN6@Reallocate
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 3438 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3435 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3436 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3437 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3438 :             },

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>, COMDAT
; _this$ = ecx

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 1381 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ; std::forward<luabind::detail::ltstr const &>
	add	esp, 4
	mov	ecx, DWORD PTR _<_Val2_0>$[ebp]
	push	ecx
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$_Swap_adl@Ultstr@detail@luabind@@@std@@YAXAAUltstr@detail@luabind@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@Ultstr@detail@luabind@@@std@@YAXAAUltstr@detail@luabind@@0@Z PROC ; std::_Swap_adl<luabind::detail::ltstr>, COMDAT

; 106  : _CONSTEXPR20 void _Swap_adl(_Ty& _Left, _Ty& _Right) noexcept(_Is_nothrow_swappable<_Ty>::value) {

	push	ebp
	mov	ebp, esp

; 107  :     swap(_Left, _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$swap@Ultstr@detail@luabind@@$0A@@std@@YAXAAUltstr@detail@luabind@@0@Z ; std::swap<luabind::detail::ltstr,0>
	add	esp, 8

; 108  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Swap_adl@Ultstr@detail@luabind@@@std@@YAXAAUltstr@detail@luabind@@0@Z ENDP ; std::_Swap_adl<luabind::detail::ltstr>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Pocs@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z PROC ; std::_Pocs<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 934  : _CONSTEXPR20 void _Pocs(_Alloc& _Left, _Alloc& _Right) noexcept {

	push	ebp
	mov	ebp, esp
$LN4@Pocs:

; 935  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_swap::value) {
; 936  :         _Swap_adl(_Left, _Right);
; 937  :     } else {
; 938  :         _STL_ASSERT(_Left == _Right, "containers incompatible for swap");

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?8U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@U01@@std@@YA_NABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ; std::operator==<std::_Tree_node<std::pair<char const * const,int>,void *>,std::_Tree_node<std::pair<char const * const,int>,void *> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@Pocs
	jmp	SHORT $LN2@Pocs
$LN7@Pocs:
	push	OFFSET ??_C@_0CB@PKNBJHCN@containers?5incompatible?5for?5swa@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	938					; 000003aaH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Pocs
	int	3
$LN11@Pocs:
	push	0
	push	938					; 000003aaH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EG@DFCHKBDO@?$AA?$CC?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Pocs
$LN2@Pocs:
	xor	edx, edx
	jne	SHORT $LN4@Pocs

; 939  :     }
; 940  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Pocs@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ENDP ; std::_Pocs<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@@std@@YAPAV?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@@std@@YAPAV?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@@std@@YAPAV?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z PROC ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z PROC ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z ENDP ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1381 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Convert_size@II@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@II@std@@YAII@Z PROC			; std::_Convert_size<unsigned int,unsigned int>, COMDAT

; 965  :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

	push	ebp
	mov	ebp, esp

; 966  :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 967  :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 968  :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 969  : 
; 970  :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 971  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 972  :             _Xlength_error("size is too long for _Size_type");
; 973  :         }
; 974  :     }
; 975  : 
; 976  :     return static_cast<_Size_type>(_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 977  : }

	pop	ebp
	ret	0
??$_Convert_size@II@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@SAPAU?$pair@$$CBVtype_id@luabind@@I@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@SAPAU?$pair@$$CBVtype_id@luabind@@I@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<luabind::type_id const ,unsigned int> *>::pointer_to, COMDAT

; 267  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 268  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@I@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,unsigned int> >
	add	esp, 4

; 269  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@SAPAU?$pair@$$CBVtype_id@luabind@@I@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<luabind::type_id const ,unsigned int> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldlast$1 = -36					; size = 4
__Oldcapacity$2 = -32					; size = 4
__Newlast$3 = -28					; size = 4
__Oldsize$ = -24					; size = 4
__Mylast$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1614 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1615 :         // trim or append elements, provide strong guarantee
; 1616 :         auto& _Al           = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1617 :         auto& _My_data      = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1618 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1619 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldsize$[ebp], edx

; 1621 :         if (_Newsize < _Oldsize) { // trim

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jae	SHORT $LN2@Resize

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __Newlast$3[ebp], ecx

; 1623 :             _Orphan_range(_Newlast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Newlast$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range

; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Newlast$3[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newlast$3[ebp]
	mov	DWORD PTR [eax], ecx

; 1627 :             return;

	jmp	SHORT $LN1@Resize
$LN2@Resize:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

	mov	edx, DWORD PTR __Newsize$[ebp]
	cmp	edx, DWORD PTR __Oldsize$[ebp]
	jbe	SHORT $LN1@Resize

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldcapacity$2[ebp], edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldcapacity$2[ebp]
	jbe	SHORT $LN4@Resize

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1635 :             }
; 1636 : 
; 1637 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1638 :             const pointer _Oldlast = _Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Oldlast$1[ebp], ecx

; 1639 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1640 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1641 :             } else {
; 1642 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	sub	eax, DWORD PTR __Oldsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldlast$1[ebp]
	push	ecx
	call	??$_Uninitialized_value_construct_n@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAPAPAVclass_rep@detail@luabind@@PAPAV123@IAAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], eax

; 1644 :             }
; 1645 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1646 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	eax, DWORD PTR __Oldlast$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldlast$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range
$LN1@Resize:

; 1647 :         }
; 1648 : 
; 1649 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1650 :     }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >, COMDAT
; _this$ = ecx

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 752  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 753  :         this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 755  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 756  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z
_TEXT	SEGMENT
tv164 = -64						; size = 4
$T1 = -60						; size = 4
$T2 = -53						; size = 1
$T3 = -52						; size = 4
$T4 = -45						; size = 1
$T5 = -44						; size = 8
$T6 = -33						; size = 1
__Inserted$ = -32					; size = 4
__Scary$ = -28						; size = 4
__Loc$ = -20						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>, COMDAT
; _this$ = ecx

; 195  :     pair<_Nodeptr, bool> _Try_emplace(_Keyty&& _Keyval, _Mappedty&&... _Mapval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>

; 197  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Try_emplac

; 198  :             return {_Loc._Bound, false};

	mov	BYTE PTR $T6[ebp], 0
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@Try_emplac
$LN2@Try_emplac:

; 199  :         }
; 200  : 
; 201  :         _Mybase::_Check_grow_by_1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1

; 202  : 
; 203  :         const auto _Scary    = _Mybase::_Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
	add	esp, 8
	push	eax
	push	OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR tv164[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
	mov	DWORD PTR __Inserted$[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 205  :             _STD forward_as_tuple(_STD forward<_Keyty>(_Keyval)),
; 206  :             _STD forward_as_tuple(_STD forward<_Mappedty>(_Mapval)...))
; 207  :                                    ._Release();
; 208  : 
; 209  :         // nothrow hereafter
; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, DWORD PTR __Inserted$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
	mov	DWORD PTR $T1[ebp], eax
	mov	BYTE PTR $T2[ebp], 1
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Try_emplac:

; 211  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Try_emplac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Try_emplac:
	DD	1
	DD	$LN6@Try_emplac
$LN6@Try_emplac:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@Try_emplac
$LN5@Try_emplac:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1><>, COMDAT
; _this$ = ecx

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAE@XZ ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z
_TEXT	SEGMENT
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_one_at_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 839  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 840  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 841  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 842  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 843  : 
; 844  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@Emplace_on

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_back_with_unused_capacity<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_reallocate<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
$LN1@Emplace_on:

; 849  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_one_at_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z PROC ; std::move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ENDP ; std::move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1064 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1065 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1066 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1067 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1068 :         _New_proxy->_Mycont = this;

	mov	edx, DWORD PTR __New_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1069 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1><>, COMDAT
; _this$ = ecx

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAE@XZ ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocator<luabind::detail::`anonymous namespace'::cast_entry>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 992  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp

; 993  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 994  :     using _Ty = typename _Alloc::value_type;
; 995  :     _Ptr->~_Ty();
; 996  :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 997  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 655  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0Ucast_entry@?A0x440dba7a@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0Ucast_entry@?A0x440dba7a@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::`anonymous namespace'::cast_entry>, COMDAT
; _this$ = ecx

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0Ucast_entry@?A0x440dba7a@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_one_at_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z
_TEXT	SEGMENT
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_one_at_back<luabind::detail::`anonymous namespace'::cast_entry>, COMDAT
; _this$ = ecx

; 839  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 840  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 841  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 842  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 843  : 
; 844  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@Emplace_on

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_back_with_unused_capacity<luabind::detail::`anonymous namespace'::cast_entry>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::`anonymous namespace'::cast_entry>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU2345@$$QAU2345@@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_reallocate<luabind::detail::`anonymous namespace'::cast_entry>
$LN1@Emplace_on:

; 849  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_one_at_back<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z PROC ; std::move<luabind::detail::`anonymous namespace'::cast_entry &>, COMDAT

; 1436 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1438 : }

	pop	ebp
	ret	0
??$move@AAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ENDP ; std::move<luabind::detail::`anonymous namespace'::cast_entry &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_i$ = 8							; size = 4
_s$ = 12						; size = 4
?add_custom_name@detail@luabind@@YAXABVtype_id@2@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; luabind::detail::add_custom_name

; 293  : 	{

	push	ebp
	mov	ebp, esp

; 294  : 		s += " [";

	push	OFFSET $SG112367
	mov	ecx, DWORD PTR _s$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 295  : 		s += i.name();

	mov	ecx, DWORD PTR _i$[ebp]
	call	?name@type_id@luabind@@QBEPBDXZ		; luabind::type_id::name
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 296  : 		s += "]";

	push	OFFSET $SG112368
	mov	ecx, DWORD PTR _s$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 297  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?add_custom_name@detail@luabind@@YAXABVtype_id@2@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; luabind::detail::add_custom_name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$make_pair@ABVtype_id@luabind@@AAP6APAXPAX@Z@std@@YA?AU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@ABVtype_id@luabind@@AAP6APAXPAX@Z@std@@YA?AU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z PROC ; std::make_pair<luabind::type_id const &,void * (__cdecl*&)(void *)>, COMDAT

; 443  :         is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 444  :     // return pair composed from arguments
; 445  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 446  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@AAP6APAXPAX@Z@std@@YAAAP6APAXPAX@ZAAP6APAX0@Z@Z ; std::forward<void * (__cdecl*&)(void *)>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABVtype_id@luabind@@AAP6APAXPAX@Z$0A@@?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@QAE@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ; std::pair<luabind::type_id,void * (__cdecl*)(void *)>::pair<luabind::type_id,void * (__cdecl*)(void *)><luabind::type_id const &,void * (__cdecl*&)(void *),0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 447  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$make_pair@ABVtype_id@luabind@@AAP6APAXPAX@Z@std@@YA?AU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ENDP ; std::make_pair<luabind::type_id const &,void * (__cdecl*&)(void *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
_TEXT	SEGMENT
__Ans$ = -28						; size = 4
__Cvtptr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ PROC ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 961  :     operator auto_ptr_ref<_Other>() noexcept { // convert to compatible auto_ptr_ref

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 962  :         _Other* _Cvtptr = _Myptr; // test implicit conversion

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$[ebp], ecx

; 963  :         auto_ptr_ref<_Other> _Ans(_Cvtptr);

	mov	edx, DWORD PTR __Cvtptr$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>

; 964  :         _Myptr = nullptr; // pass ownership to auto_ptr_ref

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 965  :         return _Ans;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Ans$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 966  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@auto_ptr_r
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@auto_ptr_r:
	DD	1
	DD	$LN5@auto_ptr_r
$LN5@auto_ptr_r:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN3@auto_ptr_r
$LN3@auto_ptr_r:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ENDP ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z PROC ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 935  :     explicit auto_ptr_ref(_Ty* _Right) : _Ref(_Right) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ENDP ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ?release@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAEPAUregistration@detail@luabind@@XZ
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
?release@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAEPAUregistration@detail@luabind@@XZ PROC ; std::auto_ptr<luabind::detail::registration>::release, COMDAT
; _this$ = ecx

; 1013 :     _Ty* release() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1014 :         _Ty* _Tmp = _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 1015 :         _Myptr    = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1016 :         return _Tmp;

	mov	eax, DWORD PTR __Tmp$[ebp]

; 1017 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAEPAUregistration@detail@luabind@@XZ ENDP ; std::auto_ptr<luabind::detail::registration>::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ
_TEXT	SEGMENT
tv71 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ PROC ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 989  :     ~auto_ptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 990  :         delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@auto_ptr
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN2@auto_ptr
$LN3@auto_ptr:
	mov	DWORD PTR tv71[ebp], 0
$LN2@auto_ptr:

; 991  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ENDP ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z PROC ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 949  :     auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 950  :         _Ty* _Ptr   = _Right._Ref;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 951  :         _Right._Ref = nullptr; // release old

	mov	DWORD PTR __Right$[ebp], 0

; 952  :         _Myptr      = _Ptr; // reset this

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx], edx

; 953  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ENDP ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z PROC ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 947  :     auto_ptr(auto_ptr& _Right) noexcept : _Myptr(_Right.release()) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?release@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAEPAUregistration@detail@luabind@@XZ ; std::auto_ptr<luabind::detail::registration>::release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z ENDP ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\memory
;	COMDAT ??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z PROC ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 945  :     explicit auto_ptr(_Ty* _Ptr = nullptr) noexcept : _Myptr(_Ptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ENDP ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++, COMDAT
; _this$ = ecx

; 275  :     _CONSTEXPR20 _Vector_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 276  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++

; 277  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 278  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator->, COMDAT
; _this$ = ecx

; 264  :     _NODISCARD _CONSTEXPR20 pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 265  : #if _ITERATOR_DEBUG_LEVEL != 0
; 266  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 267  :         _STL_VERIFY(this->_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	267					; 0000010bH
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	267					; 0000010bH
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 268  :         _STL_VERIFY(_Mycont->_Myfirst <= this->_Ptr && this->_Ptr < _Mycont->_Mylast,

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	269					; 0000010dH
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	269					; 0000010dH
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 269  :             "can't dereference out of range vector iterator");
; 270  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 271  : 
; 272  :         return this->_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 273  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Compat, COMDAT
; _this$ = ecx

; 187  :     _CONSTEXPR20 void _Compat(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 188  :         // test for compatible iterator pair
; 189  : #if _ITERATOR_DEBUG_LEVEL == 0
; 190  :         (void) _Right;
; 191  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 192  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	192					; 000000c0H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	192					; 000000c0H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 193  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 194  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator!=, COMDAT
; _this$ = ecx

; 165  :     _NODISCARD bool operator!=(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 166  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 167  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator==, COMDAT
; _this$ = ecx

; 154  :     _NODISCARD _CONSTEXPR20 bool operator==(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 155  :         _Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Compat

; 156  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 157  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++, COMDAT
; _this$ = ecx

; 67   :     _CONSTEXPR20 _Vector_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 68   : #if _ITERATOR_DEBUG_LEVEL != 0
; 69   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 70   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 71   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 72   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 73   : 
; 74   :         ++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 75   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 76   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 42   :         this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 43   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$deref@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAABUcast_entry@?A0x440dba7a@detail@luabind@@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z
_TEXT	SEGMENT
_cur$ = 8						; size = 4
___formal$ = 12						; size = 4
??$deref@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAABUcast_entry@?A0x440dba7a@detail@luabind@@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z PROC ; boost::foreach_detail_::deref<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >, COMDAT

; 776  : {

	push	ebp
	mov	ebp, esp

; 777  :     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
; 778  :     return *auto_any_cast<iter_t, boost::mpl::false_>(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >
	add	esp, 4
	mov	ecx, eax
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEABUcast_entry@?A0x440dba7a@detail@luabind@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator*

; 779  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$deref@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAABUcast_entry@?A0x440dba7a@detail@luabind@@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ENDP ; boost::foreach_detail_::deref<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$next@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAXABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z
_TEXT	SEGMENT
_cur$ = 8						; size = 4
___formal$ = 12						; size = 4
??$next@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAXABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z PROC ; boost::foreach_detail_::next<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >, COMDAT

; 765  : {

	push	ebp
	mov	ebp, esp

; 766  :     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
; 767  :     ++auto_any_cast<iter_t, boost::mpl::false_>(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >
	add	esp, 4
	mov	ecx, eax
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator++

; 768  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$next@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAXABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ENDP ; boost::foreach_detail_::next<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$done@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA_NABUauto_any_base@01@0PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_end$ = 12						; size = 4
___formal$ = 16						; size = 4
??$done@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA_NABUauto_any_base@01@0PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z PROC ; boost::foreach_detail_::done<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >, COMDAT

; 747  : {

	push	ebp
	mov	ebp, esp

; 748  :     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
; 749  :     return auto_any_cast<iter_t, boost::mpl::false_>(cur) == auto_any_cast<iter_t, boost::mpl::false_>(end);

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	call	??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	??$auto_any_cast@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<0> >
	add	esp, 4
	mov	ecx, eax
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator==

; 750  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$done@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA_NABUauto_any_base@01@0PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ENDP ; boost::foreach_detail_::done<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
_TEXT	SEGMENT
tv76 = -36						; size = 4
tv65 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_col$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z PROC ; boost::foreach_detail_::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >, COMDAT

; 716  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 717  :     typedef BOOST_DEDUCED_TYPENAME type2type<T, C>::type type;
; 718  :     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iterator;
; 719  :     return auto_any<BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type>(

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	call	??$auto_any_cast@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *,boost::mpl::bool_<0> >
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ; boost::range_adl_barrier::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@Z ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 720  :         iterator(boost::end(BOOST_FOREACH_DEREFOF((auto_any_cast<type *, boost::mpl::false_>(col))))));
; 721  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z ENDP ; boost::foreach_detail_::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ PROC ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::~auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ ENDP ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::~auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Compat
; _this$ = ecx

; 187  :     _CONSTEXPR20 void _Compat(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 188  :         // test for compatible iterator pair
; 189  : #if _ITERATOR_DEBUG_LEVEL == 0
; 190  :         (void) _Right;
; 191  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 192  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	192					; 000000c0H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	192					; 000000c0H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 193  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 194  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator==
; _this$ = ecx

; 154  :     _NODISCARD _CONSTEXPR20 bool operator==(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 155  :         _Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Compat

; 156  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 157  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator++
; _this$ = ecx

; 67   :     _CONSTEXPR20 _Vector_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 68   : #if _ITERATOR_DEBUG_LEVEL != 0
; 69   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 70   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 71   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 72   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 73   : 
; 74   :         ++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 75   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 76   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEABUcast_entry@?A0x440dba7a@detail@luabind@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator*
; _this$ = ecx

; 45   :     _NODISCARD _CONSTEXPR20 reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	48					; 00000030H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	48					; 00000030H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 49   :         _STL_VERIFY(

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	50					; 00000032H
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	50					; 00000032H
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 54   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QBEABUcast_entry@?A0x440dba7a@detail@luabind@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
; _this$ = ecx

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 42   :         this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 43   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@Z PROC ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
; _this$ = ecx

; 264  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 263  :       : item(t)

	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@ABV01@@Z

; 265  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@Z ENDP ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
_TEXT	SEGMENT
tv76 = -36						; size = 4
tv65 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_col$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z PROC ; boost::foreach_detail_::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >, COMDAT

; 676  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 677  :     typedef BOOST_DEDUCED_TYPENAME type2type<T, C>::type type;
; 678  :     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iterator;
; 679  :     return auto_any<BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type>(

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	call	??$auto_any_cast@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$0A@@mpl@boost@@@foreach_detail_@boost@@YAAAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABUauto_any_base@01@@Z ; boost::foreach_detail_::auto_any_cast<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *,boost::mpl::bool_<0> >
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@range_adl_barrier@boost@@YA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@3@@Z ; boost::range_adl_barrier::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@Z ; boost::foreach_detail_::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >::auto_any<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 680  :         iterator(boost::begin(BOOST_FOREACH_DEREFOF((auto_any_cast<type *, boost::mpl::false_>(col))))));
; 681  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z ENDP ; boost::foreach_detail_::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z PROC ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 417  : inline type2type<T, const_> *encode_type(T const &, boost::mpl::true_*) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ENDP ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z PROC ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 232  : inline boost::mpl::true_ *is_const_(T const &) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ENDP ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@QAE@ABQBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z PROC ; boost::foreach_detail_::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>
; _this$ = ecx

; 264  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  :       : item(t)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 265  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@QAE@ABQBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ENDP ; boost::foreach_detail_::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$contain@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YA?AU?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$0A@@mpl@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_t$ = 12						; size = 4
___formal$ = 16						; size = 4
??$contain@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YA?AU?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$0A@@mpl@1@@Z PROC ; boost::foreach_detail_::contain<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >, COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 645  :     // Cannot seem to get sunpro to handle addressof() with array types.
; 646  :     #if BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x570))
; 647  :     return auto_any<T *>(&t);
; 648  :     #else
; 649  :     return auto_any<T *>(boost::addressof(t));

	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	??$addressof@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@YAPBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV12@@Z ; boost::addressof<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@QAE@ABQBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>::auto_any<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const *>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 650  :     #endif
; 651  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$contain@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YA?AU?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$0A@@mpl@1@@Z ENDP ; boost::foreach_detail_::contain<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z PROC ; boost::foreach_detail_::or_<boost::is_rvalue_reference<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>,boost::mpl::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >, COMDAT

; 216  : inline boost::mpl::or_<Bool1, Bool2> *or_(Bool1 *, Bool2 *) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z ENDP ; boost::foreach_detail_::or_<boost::is_rvalue_reference<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>,boost::mpl::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z PROC ; boost::foreach_detail_::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >, COMDAT

; 210  : inline boost::mpl::and_<Bool1, Bool2> *and_(Bool1 *, Bool2 *) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ENDP ; boost::foreach_detail_::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z PROC ; boost_foreach_is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 173  : boost_foreach_is_lightweight_proxy(T *&, BOOST_FOREACH_TAG_DEFAULT) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ENDP ; boost_foreach_is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z PROC ; boost::foreach_detail_::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >, COMDAT

; 222  : inline boost::mpl::not_<Bool1> *not_(Bool1 *) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ENDP ; boost::foreach_detail_::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z PROC ; boost_foreach_is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 198  : boost_foreach_is_noncopyable(T *&, BOOST_FOREACH_TAG_DEFAULT) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ENDP ; boost_foreach_is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z PROC ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp

; 434  :     static T *t = 0;
; 435  :     return t;

	mov	eax, OFFSET ?t@?1???$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV34@@Z@4PAV34@A

; 436  : }

	pop	ebp
	ret	0
??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ENDP ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z PROC ; boost::foreach_detail_::is_rvalue_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>, COMDAT

; 243  : inline boost::is_rvalue_reference<T &&> *is_rvalue_(T &&, int) { return 0; }

	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z ENDP ; boost::foreach_detail_::is_rvalue_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@Ultstr@detail@luabind@@$0A@@std@@YAXAAUltstr@detail@luabind@@0@Z
_TEXT	SEGMENT
__Tmp$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@Ultstr@detail@luabind@@$0A@@std@@YAXAAUltstr@detail@luabind@@0@Z PROC ; std::swap<luabind::detail::ltstr,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z ; std::move<luabind::detail::ltstr &>
	add	esp, 4

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z ; std::move<luabind::detail::ltstr &>
	add	esp, 4

; 102  :     _Right   = _STD move(_Tmp);

	lea	edx, DWORD PTR __Tmp$[ebp]
	push	edx
	call	??$move@AAUltstr@detail@luabind@@@std@@YA$$QAUltstr@detail@luabind@@AAU123@@Z ; std::move<luabind::detail::ltstr &>
	add	esp, 4

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@Ultstr@detail@luabind@@$0A@@std@@YAXAAUltstr@detail@luabind@@0@Z ENDP ; std::swap<luabind::detail::ltstr,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gclass_registration@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gclass_registration@detail@luabind@@UAEPAXI@Z PROC	; luabind::detail::class_registration::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1class_registration@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	84					; 00000054H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gclass_registration@detail@luabind@@UAEPAXI@Z ENDP	; luabind::detail::class_registration::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1class_registration@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1class_registration@detail@luabind@@UAE@XZ PROC	; luabind::detail::class_registration::~class_registration, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1class_registration@detail@luabind@@UAE@XZ ENDP	; luabind::detail::class_registration::~class_registration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
; _this$ = ecx

; 2247 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2248 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first

; 2249 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
; _this$ = ecx

; 2243 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2244 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Get_first

; 2245 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range
; _this$ = ecx

; 2228 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2229 :         // orphan iterators within specified (inclusive) range
; 2230 : #if _HAS_CXX20
; 2231 :         if (_STD is_constant_evaluated()) {
; 2232 :             _Orphan_range_unlocked(_First, _Last);
; 2233 :         } else
; 2234 : #endif // _HAS_CXX20
; 2235 :         {
; 2236 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_locked

; 2237 :         }
; 2238 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_locked
; _this$ = ecx

; 2223 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2224 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2225 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_unlocked

; 2226 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Temp$1 = -16						; size = 4
__Pnextptr$2 = -12					; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_unlocked
; _this$ = ecx

; 2209 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2210 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2211 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Orphan_ran

; 2212 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$2[ebp], edx

; 2213 :             const auto _Temp     = *_Pnext;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 2214 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	edx, DWORD PTR __Pnextptr$2[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$2[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2215 :                 _Pnext = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 2216 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2217 :                 _Temp->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [edx], 0

; 2218 :                 *_Pnext         = _Temp->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@Orphan_ran:

; 2219 :             }
; 2220 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN1@Orphan_ran:

; 2221 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEXPAUcast_entry@?A0x440dba7a@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
?_Xlength@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@CAXXZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Xlength

; 2200 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp

; 2201 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2202 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@CAXXZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Myend$ = -36						; size = 4
__Mylast$ = -32						; size = 4
__Myfirst$ = -28					; size = 4
__My_data$ = -24					; size = 4
__Al$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Tidy
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2099 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2100 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2101 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 2102 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 2103 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2104 : 
; 2105 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 12					; 0000000cH

; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::deallocate

; 2111 : 
; 2112 :             _Myfirst = nullptr;

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [ecx], 0

; 2113 :             _Mylast  = nullptr;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], 0

; 2114 :             _Myend   = nullptr;

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Tidy:

; 2115 :         }
; 2116 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Myend$ = -24						; size = 4
__Mylast$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@II@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Change_array
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2079 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2080 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 2081 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 2082 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2083 : 
; 2084 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@YAXPAUcast_entry@?A0x440dba7a@detail@luabind@@QAU1234@AAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	add	esp, 12					; 0000000cH

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::deallocate
$LN2@Change_arr:

; 2090 :         }
; 2091 : 
; 2092 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [ecx], edx

; 2093 :         _Mylast  = _Newvec + _Newsize;

	imul	eax, DWORD PTR __Newsize$[ebp], 12
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

	imul	edx, DWORD PTR __Newcapacity$[ebp], 12
	add	edx, DWORD PTR __Newvec$[ebp]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 2095 :         _ASAN_VECTOR_CREATE;
; 2096 :     }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@II@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__Geometric$ = -16					; size = 4
__Max$ = -12						; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEII@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Calculate_growth
; _this$ = ecx

; 2024 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 2027 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 2030 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 2036 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 2040 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEII@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::capacity
; _this$ = ecx

; 1940 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1941 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 1943 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
; _this$ = ecx

; 1935 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1936 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1937 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1938 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::end
; _this$ = ecx

; 1872 :     _NODISCARD _CONSTEXPR20 const_iterator end() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1873 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1874 :         return const_iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1875 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::begin
; _this$ = ecx

; 1862 :     _NODISCARD _CONSTEXPR20 const_iterator begin() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1863 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1864 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@QAE@PAUcast_entry@?A0x440dba7a@detail@luabind@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1865 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@2@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::push_back
; _this$ = ecx

; 939  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 940  :         // insert by moving into element at end, provide strong guarantee
; 941  :         _Emplace_one_at_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUcast_entry@?A0x440dba7a@detail@luabind@@@std@@YA$$QAUcast_entry@?A0x440dba7a@detail@luabind@@AAU1234@@Z ; std::move<luabind::detail::`anonymous namespace'::cast_entry &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@Ucast_entry@?A0x440dba7a@detail@luabind@@@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAUcast_entry@?A0x440dba7a@detail@luabind@@$$QAU2345@@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Emplace_one_at_back<luabind::detail::`anonymous namespace'::cast_entry>

; 942  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
$T1 = -24						; size = 4
_$S4$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEXXZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Tidy

; 831  : #if _ITERATOR_DEBUG_LEVEL != 0
; 832  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S4$[ebp]
	call	??$?0Ucast_entry@?A0x440dba7a@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::`anonymous namespace'::cast_entry>
	lea	eax, DWORD PTR _$S4$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 833  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 834  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 835  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@vector:
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	52					; 00000034H
	DB	0
??1?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; _this$ = ecx

; 673  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1>::_Compressed_pair<std::allocator<luabind::detail::`anonymous namespace'::cast_entry>,std::_Vector_val<std::_Simple_types<luabind::detail::`anonymous namespace'::cast_entry> >,1><>

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0Ucast_entry@?A0x440dba7a@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::`anonymous namespace'::cast_entry>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 675  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 357913941				; 15555555H

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocate
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0M@@std@@YAII@Z	; std::_Get_size_of_n<12>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEPAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::deallocate
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 12
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAEXQAUcast_entry@?A0x440dba7a@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAE@XZ PROC ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocator<luabind::detail::`anonymous namespace'::cast_entry>
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@QAE@XZ ENDP ; std::allocator<luabind::detail::`anonymous namespace'::cast_entry>::allocator<luabind::detail::`anonymous namespace'::cast_entry>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal, COMDAT
; _this$ = ecx

; 2247 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2248 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first

; 2249 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal, COMDAT
; _this$ = ecx

; 2243 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2244 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Get_first

; 2245 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range, COMDAT
; _this$ = ecx

; 2228 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2229 :         // orphan iterators within specified (inclusive) range
; 2230 : #if _HAS_CXX20
; 2231 :         if (_STD is_constant_evaluated()) {
; 2232 :             _Orphan_range_unlocked(_First, _Last);
; 2233 :         } else
; 2234 : #endif // _HAS_CXX20
; 2235 :         {
; 2236 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_locked

; 2237 :         }
; 2238 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 2223 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2224 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2225 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_unlocked

; 2226 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z
_TEXT	SEGMENT
__Temp$1 = -16						; size = 4
__Pnextptr$2 = -12					; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 2209 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2210 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2211 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Orphan_ran

; 2212 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$2[ebp], edx

; 2213 :             const auto _Temp     = *_Pnext;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 2214 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	edx, DWORD PTR __Pnextptr$2[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$2[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2215 :                 _Pnext = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 2216 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2217 :                 _Temp->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [edx], 0

; 2218 :                 *_Pnext         = _Temp->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@Orphan_ran:

; 2219 :             }
; 2220 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN1@Orphan_ran:

; 2221 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@0@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Xlength, COMDAT

; 2200 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp

; 2201 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2202 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -36						; size = 4
__Mylast$ = -32						; size = 4
__Myfirst$ = -28					; size = 4
__My_data$ = -24					; size = 4
__Al$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2099 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2100 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2101 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 2102 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 2103 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2104 : 
; 2105 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 12					; 0000000cH

; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate

; 2111 : 
; 2112 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 2113 :             _Mylast  = nullptr;

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], 0

; 2114 :             _Myend   = nullptr;

	mov	edx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [edx], 0
$LN3@Tidy:

; 2115 :         }
; 2116 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@II@Z
_TEXT	SEGMENT
__Myend$ = -24						; size = 4
__Mylast$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@II@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2079 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2080 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 2081 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 2082 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2083 : 
; 2084 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@YAXPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@QAU10@AAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	add	esp, 12					; 0000000cH

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate
$LN2@Change_arr:

; 2090 :         }
; 2091 : 
; 2092 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 2093 :         _Mylast  = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 2095 :         _ASAN_VECTOR_CREATE;
; 2096 :     }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@II@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -16					; size = 4
__Max$ = -12						; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 2024 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 2027 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 2030 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 2036 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 2040 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?capacity@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::capacity, COMDAT
; _this$ = ecx

; 1940 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1941 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3

; 1943 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size, COMDAT
; _this$ = ecx

; 1935 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1936 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@ABEABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAIABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1937 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1938 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?end@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::end, COMDAT
; _this$ = ecx

; 1867 :     _NODISCARD _CONSTEXPR20 iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1868 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1869 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1870 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?begin@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::begin, COMDAT
; _this$ = ecx

; 1857 :     _NODISCARD _CONSTEXPR20 iterator begin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1858 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1859 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@PAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1860 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?push_back@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@@Z PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::push_back, COMDAT
; _this$ = ecx

; 939  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 940  :         // insert by moving into element at end, provide strong guarantee
; 941  :         _Emplace_one_at_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@AAU10@@Z ; std::move<std::pair<luabind::type_id,void * (__cdecl*)(void *)> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@$$QAU21@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Emplace_one_at_back<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >

; 942  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@@Z ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
_$S5$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Tidy

; 831  : #if _ITERATOR_DEBUG_LEVEL != 0
; 832  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S5$[ebp]
	call	??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	lea	eax, DWORD PTR _$S5$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 833  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 834  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 835  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@vector:
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	53					; 00000035H
	DB	0
??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >, COMDAT
; _this$ = ecx

; 673  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1>::_Compressed_pair<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >,std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >,1><>

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@AAEAAV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 675  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAIABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAIABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 536870911				; 1fffffffH

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@SAIABV?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z PROC ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ENDP ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z PROC ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAEXQAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@I@Z ENDP ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
tv514 = -256						; size = 4
tv400 = -252						; size = 4
tv381 = -248						; size = 4
tv365 = -244						; size = 4
tv347 = -240						; size = 4
tv336 = -236						; size = 4
tv294 = -232						; size = 4
tv283 = -228						; size = 4
tv241 = -224						; size = 4
tv149 = -217						; size = 1
$T2 = -216						; size = 12
$T3 = -201						; size = 1
$T4 = -200						; size = 4
_base$5 = -192						; size = 8
_bcrep$6 = -180						; size = 4
_stack_checker_object$7 = -172				; size = 8
_i$8 = -156						; size = 12
_e$9 = -140						; size = 4
__foreach_continue$10 = -129				; size = 1
_$S3$11 = -120						; size = 12
__foreach_end$12 = -104					; size = 4
_$S2$13 = -96						; size = 12
__foreach_cur$14 = -80					; size = 4
_$S1$15 = -72						; size = 4
__foreach_col$16 = -64					; size = 4
_class_ids$ = -60					; size = 4
_casts$ = -56						; size = 4
_registry$ = -52					; size = 4
_has_wrapper$ = -45					; size = 1
_classes$ = -44						; size = 4
_r$ = -40						; size = 4
_crep$ = -36						; size = 4
_stack_checker_object$ = -28				; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z PROC ; luabind::detail::class_registration::register_
; _this$ = ecx

; 91   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 92   :         LUABIND_CHECK_STACK(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stack_checker_object$[ebp]
	call	??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::stack_checker_type::stack_checker_type
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 93   : 
; 94   :         assert(lua_type(L, -1) == LUA_TTABLE);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	cmp	eax, 5
	je	SHORT $LN28@register_
	push	94					; 0000005eH
	push	OFFSET $SG112188
	push	OFFSET $SG112189
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@register_:

; 95   : 
; 96   :         lua_pushstring(L, m_name);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 97   : 
; 98   :         detail::class_rep* crep;
; 99   : 
; 100  :         detail::class_registry* r = detail::class_registry::get_registry(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax

; 101  :         // create a class_rep structure for this class.
; 102  :         // allocate it within lua to let lua collect it on
; 103  :         // lua_close(). This is better than allocating it
; 104  :         // as a static, since it will then be destructed
; 105  :         // when the program exits instead.
; 106  :         // warning: we assume that lua will not
; 107  :         // move the userdata memory.
; 108  :         lua_newuserdata(L, sizeof(detail::class_rep));

	push	80					; 00000050H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_newuserdata
	add	esp, 8

; 109  :         crep = reinterpret_cast<detail::class_rep*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _crep$[ebp], eax

; 110  : 
; 111  :         new(crep) detail::class_rep(

	mov	eax, DWORD PTR _crep$[ebp]
	push	eax
	push	80					; 00000050H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z ; luabind::detail::class_rep::class_rep

; 112  :             m_type
; 113  :             , m_name
; 114  :             , L
; 115  : 		);
; 116  : 
; 117  :         // register this new type in the class registry
; 118  :         r->add_class(m_type, crep);

	mov	edx, DWORD PTR _crep$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	call	?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z ; luabind::detail::class_registry::add_class

; 119  : 
; 120  :         lua_pushstring(L, "__luabind_class_map");

	push	OFFSET $SG112190
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 121  :         lua_rawget(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawget
	add	esp, 8

; 122  :         class_map& classes = *static_cast<class_map*>(

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _classes$[ebp], eax

; 123  :             lua_touserdata(L, -1));
; 124  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 125  : 
; 126  :         classes.put(m_id, crep);

	mov	edx, DWORD PTR _crep$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z ; luabind::detail::class_map::put

; 127  : 
; 128  :         bool const has_wrapper = m_wrapper_id != registered_class<null_type>::id;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	cmp	eax, DWORD PTR ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::detail::null_type>::id
	je	SHORT $LN29@register_
	mov	BYTE PTR tv149[ebp], 1
	jmp	SHORT $LN30@register_
$LN29@register_:
	mov	BYTE PTR tv149[ebp], 0
$LN30@register_:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _has_wrapper$[ebp], cl

; 129  : 
; 130  :         if (has_wrapper)

	movzx	edx, BYTE PTR _has_wrapper$[ebp]
	test	edx, edx
	je	SHORT $LN15@register_

; 131  :             classes.put(m_wrapper_id, crep);

	mov	eax, DWORD PTR _crep$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z ; luabind::detail::class_map::put
$LN15@register_:

; 132  : 
; 133  :         crep->m_static_constants.swap(m_static_constants);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	add	ecx, 56					; 00000038H
	call	?swap@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV12@@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::swap

; 134  : 
; 135  : 		detail::class_registry* registry = detail::class_registry::get_registry(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _registry$[ebp], eax

; 136  : 
; 137  :         crep->get_default_table(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table

; 138  :         m_scope.register_(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	?register_@scope@luabind@@QBEXPAUlua_State@@@Z ; luabind::scope::register_

; 139  :         m_default_members.register_(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?register_@scope@luabind@@QBEXPAUlua_State@@@Z ; luabind::scope::register_

; 140  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 141  : 
; 142  :         crep->get_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 143  :         m_members.register_(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?register_@scope@luabind@@QBEXPAUlua_State@@@Z ; luabind::scope::register_

; 144  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 145  : 
; 146  :         lua_pushstring(L, "__luabind_cast_graph");

	push	OFFSET $SG112192
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 147  :         lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 148  :         cast_graph* const casts = static_cast<cast_graph*>(

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _casts$[ebp], eax

; 149  :             lua_touserdata(L, -1));
; 150  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 151  : 
; 152  :         lua_pushstring(L, "__luabind_class_id_map");

	push	OFFSET $SG112193
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 153  :         lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettable
	add	esp, 8

; 154  :         class_id_map* const class_ids = static_cast<class_id_map*>(

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _class_ids$[ebp], eax

; 155  :             lua_touserdata(L, -1));
; 156  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 157  : 
; 158  :         class_ids->put(m_id, m_type);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	ecx, DWORD PTR _class_ids$[ebp]
	call	?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z ; luabind::detail::class_id_map::put

; 159  : 
; 160  :         if (has_wrapper)

	movzx	edx, BYTE PTR _has_wrapper$[ebp]
	test	edx, edx
	je	SHORT $LN16@register_

; 161  :             class_ids->put(m_wrapper_id, m_wrapper_type);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _class_ids$[ebp]
	call	?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z ; luabind::detail::class_id_map::put
$LN16@register_:

; 162  : 
; 163  :         BOOST_FOREACH(cast_entry const& e, m_casts)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@register_
	mov	DWORD PTR tv241[ebp], 0
	jmp	SHORT $LN32@register_
$LN31@register_:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	call	??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 4
	push	eax
	call	??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 8
	push	eax
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z ; boost::foreach_detail_::is_rvalue_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>
	add	esp, 8
	push	eax
	call	??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z ; boost::foreach_detail_::or_<boost::is_rvalue_reference<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>,boost::mpl::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >
	add	esp, 8
	mov	DWORD PTR tv241[ebp], eax
$LN32@register_:
	mov	ecx, DWORD PTR tv241[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	lea	eax, DWORD PTR _$S1$15[ebp]
	push	eax
	call	??$contain@$$CBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YA?AU?$auto_any@PBV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$0A@@mpl@1@@Z ; boost::foreach_detail_::contain<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const >
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _$S1$15[ebp]
	mov	DWORD PTR __foreach_col$16[ebp], ecx
	mov	ecx, DWORD PTR __foreach_col$16[ebp]
	call	??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ ; boost::foreach_detail_::auto_any_base::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@register_
	jmp	$LN18@register_
$LN17@register_:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN33@register_
	mov	DWORD PTR tv283[ebp], 0
	jmp	SHORT $LN34@register_
$LN33@register_:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	call	??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 4
	push	eax
	call	??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 8
	push	eax
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z ; boost::foreach_detail_::is_rvalue_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>
	add	esp, 8
	push	eax
	call	??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z ; boost::foreach_detail_::or_<boost::is_rvalue_reference<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>,boost::mpl::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >
	add	esp, 8
	mov	DWORD PTR tv283[ebp], eax
$LN34@register_:
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN35@register_
	mov	DWORD PTR tv294[ebp], 0
	jmp	SHORT $LN36@register_
$LN35@register_:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv294[ebp], eax
$LN36@register_:
	mov	ecx, DWORD PTR tv283[ebp]
	push	ecx
	mov	edx, DWORD PTR tv294[ebp]
	push	edx
	mov	eax, DWORD PTR __foreach_col$16[ebp]
	push	eax
	lea	ecx, DWORD PTR _$S2$13[ebp]
	push	ecx
	call	??$begin@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z ; boost::foreach_detail_::begin<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR _$S2$13[ebp]
	mov	DWORD PTR __foreach_cur$14[ebp], edx
	mov	ecx, DWORD PTR __foreach_cur$14[ebp]
	call	??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ ; boost::foreach_detail_::auto_any_base::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@register_
	jmp	$LN20@register_
$LN19@register_:
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN37@register_
	mov	DWORD PTR tv336[ebp], 0
	jmp	SHORT $LN38@register_
$LN37@register_:
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??$to_ptr@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAAAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@ABV23@@Z ; boost::foreach_detail_::to_ptr<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	call	??$boost_foreach_is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@@YAPAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@AAPAV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@W4boost_foreach_argument_dependent_lookup_hack@@@Z ; boost_foreach_is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	push	eax
	call	??$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@foreach_detail_@boost@@YAPAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@1@PAU?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 4
	push	eax
	call	??$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@@foreach_detail_@boost@@YAPAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@1@PAU?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@31@PAU?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@1@@Z ; boost::foreach_detail_::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >
	add	esp, 8
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$is_rvalue_@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@H@Z ; boost::foreach_detail_::is_rvalue_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>
	add	esp, 8
	push	eax
	call	??$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@@foreach_detail_@boost@@YAPAU?$or_@U?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@boost@@U?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@mpl@2@U?$bool_@$0A@@42@U542@U542@@mpl@1@PAU?$is_rvalue_reference@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@1@PAU?$and_@U?$not_@U?$is_noncopyable@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@boost@@@mpl@boost@@U?$is_lightweight_proxy@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach@3@U?$bool_@$00@23@U623@U623@@31@@Z ; boost::foreach_detail_::or_<boost::is_rvalue_reference<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > const &>,boost::mpl::and_<boost::mpl::not_<boost::foreach::is_noncopyable<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > > >,boost::foreach::is_lightweight_proxy<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >,boost::mpl::bool_<1>,boost::mpl::bool_<1>,boost::mpl::bool_<1> > >
	add	esp, 8
	mov	DWORD PTR tv336[ebp], eax
$LN38@register_:
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN39@register_
	mov	DWORD PTR tv347[ebp], 0
	jmp	SHORT $LN40@register_
$LN39@register_:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv347[ebp], eax
$LN40@register_:
	mov	edx, DWORD PTR tv336[ebp]
	push	edx
	mov	eax, DWORD PTR tv347[ebp]
	push	eax
	mov	ecx, DWORD PTR __foreach_col$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _$S3$11[ebp]
	push	edx
	call	??$end@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA?AU?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@01@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@PAU?$bool_@$0A@@mpl@1@@Z ; boost::foreach_detail_::end<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	eax, DWORD PTR _$S3$11[ebp]
	mov	DWORD PTR __foreach_end$12[ebp], eax
	mov	ecx, DWORD PTR __foreach_end$12[ebp]
	call	??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ ; boost::foreach_detail_::auto_any_base::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN21@register_
	jmp	$LN22@register_
$LN21@register_:
	mov	BYTE PTR __foreach_continue$10[ebp], 1
	jmp	SHORT $LN4@register_
$LN2@register_:
	movzx	edx, BYTE PTR __foreach_continue$10[ebp]
	test	edx, edx
	je	SHORT $LN4@register_
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN41@register_
	mov	DWORD PTR tv365[ebp], 0
	jmp	SHORT $LN42@register_
$LN41@register_:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv365[ebp], eax
$LN42@register_:
	mov	eax, DWORD PTR tv365[ebp]
	push	eax
	mov	ecx, DWORD PTR __foreach_cur$14[ebp]
	push	ecx
	call	??$next@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAXABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ; boost::foreach_detail_::next<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
	add	esp, 8
$LN4@register_:
	movzx	edx, BYTE PTR __foreach_continue$10[ebp]
	test	edx, edx
	je	$LN22@register_
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN45@register_
	mov	DWORD PTR tv381[ebp], 0
	jmp	SHORT $LN46@register_
$LN45@register_:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv381[ebp], eax
$LN46@register_:
	mov	eax, DWORD PTR tv381[ebp]
	push	eax
	mov	ecx, DWORD PTR __foreach_end$12[ebp]
	push	ecx
	mov	edx, DWORD PTR __foreach_cur$14[ebp]
	push	edx
	call	??$done@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YA_NABUauto_any_base@01@0PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ; boost::foreach_detail_::done<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	jne	$LN22@register_
	lea	ecx, DWORD PTR __foreach_continue$10[ebp]
	push	ecx
	call	?set_false@foreach_detail_@boost@@YA_NAA_N@Z ; boost::foreach_detail_::set_false
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN23@register_
	jmp	$LN24@register_
$LN23@register_:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN47@register_
	mov	DWORD PTR tv400[ebp], 0
	jmp	SHORT $LN48@register_
$LN47@register_:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	??$is_const_@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$bool_@$00@mpl@1@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@Z ; boost::foreach_detail_::is_const_<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	??$encode_type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@foreach_detail_@boost@@YAPAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@ABV?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@PAU?$bool_@$00@mpl@1@@Z ; boost::foreach_detail_::encode_type<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> > >
	add	esp, 8
	mov	DWORD PTR tv400[ebp], eax
$LN48@register_:
	mov	eax, DWORD PTR tv400[ebp]
	push	eax
	mov	ecx, DWORD PTR __foreach_cur$14[ebp]
	push	ecx
	call	??$deref@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@foreach_detail_@boost@@YAABUcast_entry@?A0x440dba7a@detail@luabind@@ABUauto_any_base@01@PAU?$type2type@V?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@U?$bool_@$00@mpl@boost@@@01@@Z ; boost::foreach_detail_::deref<std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >,boost::mpl::bool_<1> >
	add	esp, 8
	mov	DWORD PTR _e$9[ebp], eax
	jmp	SHORT $LN7@register_
$LN5@register_:
	mov	BYTE PTR __foreach_continue$10[ebp], 1
$LN7@register_:
	movzx	edx, BYTE PTR __foreach_continue$10[ebp]
	test	edx, edx
	jne	SHORT $LN24@register_

; 164  :         {
; 165  :             casts->insert(e.src, e.target, e.cast);

	mov	eax, DWORD PTR _e$9[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _e$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _e$9[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _casts$[ebp]
	call	?insert@cast_graph@detail@luabind@@QAEXIIP6APAXPAX@Z@Z ; luabind::detail::cast_graph::insert

; 166  :         }

	jmp	SHORT $LN5@register_
$LN24@register_:
	jmp	$LN2@register_
$LN22@register_:
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _$S3$11[ebp]
	call	??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ
$LN20@register_:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _$S2$13[ebp]
	call	??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ
$LN18@register_:

; 167  : 
; 168  :         for (std::vector<base_desc>::iterator i = m_bases.begin();

	lea	eax, DWORD PTR _i$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?begin@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	jmp	SHORT $LN10@register_
$LN8@register_:

; 169  :             i != m_bases.end(); ++i)

	lea	ecx, DWORD PTR _i$8[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator++
$LN10@register_:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?end@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::end
	mov	DWORD PTR tv514[ebp], eax
	mov	edx, DWORD PTR tv514[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$8[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	$LN9@register_

; 170  :         {
; 171  :             LUABIND_CHECK_STACK(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stack_checker_object$7[ebp]
	call	??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::stack_checker_type::stack_checker_type
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 172  : 
; 173  :             // the baseclass' class_rep structure
; 174  :             detail::class_rep* bcrep = registry->find_class(i->first);

	lea	ecx, DWORD PTR _i$8[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > > >::operator->
	push	eax
	mov	ecx, DWORD PTR _registry$[ebp]
	call	?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z ; luabind::detail::class_registry::find_class
	mov	DWORD PTR _bcrep$6[ebp], eax

; 175  : 
; 176  :             detail::class_rep::base_info base;
; 177  :             base.pointer_offset = 0;

	mov	DWORD PTR _base$5[ebp], 0

; 178  :             base.base = bcrep;

	mov	edx, DWORD PTR _bcrep$6[ebp]
	mov	DWORD PTR _base$5[ebp+4], edx

; 179  : 
; 180  :             crep->add_base_class(base);

	lea	eax, DWORD PTR _base$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z ; luabind::detail::class_rep::add_base_class

; 181  : 
; 182  :             // copy base class table
; 183  : 			crep->get_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 184  : 			bcrep->get_table(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	mov	ecx, DWORD PTR _bcrep$6[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 185  :             lua_pushnil(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushnil
	add	esp, 4
$LN11@register_:

; 186  : 
; 187  :             while (lua_next(L, -2))

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_next
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@register_

; 188  :             {
; 189  :                 lua_pushvalue(L, -2); // copy key

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 190  :                 lua_gettable(L, -5);

	push	-5					; fffffffbH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 191  : 
; 192  :                 if (!lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@register_

; 193  :                 {
; 194  :                     lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 195  :                     continue;

	jmp	SHORT $LN11@register_
$LN25@register_:

; 196  :                 }
; 197  : 
; 198  :                 lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 199  :                 lua_pushvalue(L, -2); // copy key

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 200  :                 lua_insert(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_insert
	add	esp, 8

; 201  : 
; 202  :                 lua_settable(L, -5);

	push	-5					; fffffffbH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8

; 203  :             }

	jmp	$LN11@register_
$LN12@register_:

; 204  :             lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 205  : 
; 206  :             // copy base class detaults table
; 207  : 			crep->get_default_table(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table

; 208  : 			bcrep->get_default_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bcrep$6[ebp]
	call	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table

; 209  :             lua_pushnil(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushnil
	add	esp, 4
$LN13@register_:

; 210  : 
; 211  :             while (lua_next(L, -2))

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_next
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@register_

; 212  :             {
; 213  :                 lua_pushvalue(L, -2); // copy key

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 214  :                 lua_gettable(L, -5);

	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 215  : 
; 216  :                 if (!lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@register_

; 217  :                 {
; 218  :                     lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 219  :                     continue;

	jmp	SHORT $LN13@register_
$LN26@register_:

; 220  :                 }
; 221  : 
; 222  :                 lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 223  :                 lua_pushvalue(L, -2); // copy key

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 224  :                 lua_insert(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_insert
	add	esp, 8

; 225  : 
; 226  :                 lua_settable(L, -5);

	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settable
	add	esp, 8

; 227  :             }

	jmp	$LN13@register_
$LN14@register_:

; 228  :             lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 229  : 
; 230  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _stack_checker_object$7[ebp]
	call	??1stack_checker_type@detail@luabind@@QAE@XZ ; luabind::detail::stack_checker_type::~stack_checker_type
	jmp	$LN8@register_
$LN9@register_:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _i$8[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ

; 231  : 
; 232  :         lua_settable(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8

; 233  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stack_checker_object$[ebp]
	call	??1stack_checker_type@detail@luabind@@QAE@XZ ; luabind::detail::stack_checker_type::~stack_checker_type
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@register_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN67@register_:
	DD	8
	DD	$LN66@register_
$LN66@register_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN57@register_
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN58@register_
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN59@register_
	DD	-120					; ffffff88H
	DD	12					; 0000000cH
	DD	$LN60@register_
	DD	-129					; ffffff7fH
	DD	1
	DD	$LN61@register_
	DD	-156					; ffffff64H
	DD	12					; 0000000cH
	DD	$LN62@register_
	DD	-172					; ffffff54H
	DD	8
	DD	$LN63@register_
	DD	-192					; ffffff40H
	DD	8
	DD	$LN64@register_
$LN64@register_:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN63@register_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN62@register_:
	DB	105					; 00000069H
	DB	0
$LN61@register_:
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN60@register_:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	51					; 00000033H
	DB	0
$LN59@register_:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	50					; 00000032H
	DB	0
$LN58@register_:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
$LN57@register_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _stack_checker_object$[ebp]
	jmp	??1stack_checker_type@detail@luabind@@QAE@XZ ; luabind::detail::stack_checker_type::~stack_checker_type
__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR _$S2$13[ebp]
	jmp	??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ
__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$2:
	lea	ecx, DWORD PTR _$S3$11[ebp]
	jmp	??1?$auto_any@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@@std@@@foreach_detail_@boost@@QAE@XZ
__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$3:
	lea	ecx, DWORD PTR _i$8[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z$5:
	lea	ecx, DWORD PTR _stack_checker_object$7[ebp]
	jmp	??1stack_checker_type@detail@luabind@@QAE@XZ ; luabind::detail::stack_checker_type::~stack_checker_type
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_@class_registration@detail@luabind@@UBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_registration::register_
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0class_registration@detail@luabind@@QAE@PBD@Z PROC	; luabind::detail::class_registration::class_registration
; _this$ = ecx

; 86   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_registration@detail@luabind@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0registration@detail@luabind@@QAE@XZ	; luabind::detail::registration::registration
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7class_registration@detail@luabind@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0type_id@luabind@@QAE@XZ		; luabind::type_id::type_id
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0type_id@luabind@@QAE@XZ		; luabind::type_id::type_id
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0scope@luabind@@QAE@XZ		; luabind::scope::scope
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0scope@luabind@@QAE@XZ		; luabind::scope::scope
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0scope@luabind@@QAE@XZ		; luabind::scope::scope

; 87   :         m_name = name;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 88   :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::~vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::~vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
__unwindfunclet$??0class_registration@detail@luabind@@QAE@PBD@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_registration@detail@luabind@@QAE@PBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_registration@detail@luabind@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_registration@detail@luabind@@QAE@PBD@Z ENDP	; luabind::detail::class_registration::class_registration
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
_target$ = 12						; size = 4
_cast$ = 16						; size = 4
??0cast_entry@?A0x440dba7a@detail@luabind@@QAE@IIP6APAXPAX@Z@Z PROC ; luabind::detail::`anonymous namespace'::cast_entry::cast_entry
; _this$ = ecx

; 52   :           {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   :             : src(src)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], ecx

; 50   :             , target(target)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR [edx+4], eax

; 51   :             , cast(cast)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cast$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 52   :           {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0cast_entry@?A0x440dba7a@detail@luabind@@QAE@IIP6APAXPAX@Z@Z ENDP ; luabind::detail::`anonymous namespace'::cast_entry::cast_entry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 12
_this$ = -4						; size = 4
_src$ = 8						; size = 4
_target$ = 12						; size = 4
_cast$ = 16						; size = 4
?add_cast@class_base@detail@luabind@@QAEXIIP6APAXPAX@Z@Z PROC ; luabind::detail::class_base::add_cast
; _this$ = ecx

; 288  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 289  :         m_registration->m_casts.push_back(cast_entry(src, target, cast));

	mov	eax, DWORD PTR _cast$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0cast_entry@?A0x440dba7a@detail@luabind@@QAE@IIP6APAXPAX@Z@Z ; luabind::detail::`anonymous namespace'::cast_entry::cast_entry
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 56					; 00000038H
	call	?push_back@?$vector@Ucast_entry@?A0x440dba7a@detail@luabind@@V?$allocator@Ucast_entry@?A0x440dba7a@detail@luabind@@@std@@@std@@QAEX$$QAUcast_entry@?A0x440dba7a@detail@luabind@@@Z ; std::vector<luabind::detail::`anonymous namespace'::cast_entry,std::allocator<luabind::detail::`anonymous namespace'::cast_entry> >::push_back

; 290  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?add_cast@class_base@detail@luabind@@QAEXIIP6APAXPAX@Z@Z ENDP ; luabind::detail::class_base::add_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?add_inner_scope@class_base@detail@luabind@@QAEXAAUscope@3@@Z PROC ; luabind::detail::class_base::add_inner_scope
; _this$ = ecx

; 282  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 283  :         m_registration->m_scope.operator,(s);

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T1[ebp], esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	??0scope@luabind@@QAE@ABU01@@Z		; luabind::scope::scope
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 72					; 00000048H
	call	??Qscope@luabind@@QAEAAU01@U01@@Z	; luabind::scope::operator,

; 284  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?add_inner_scope@class_base@detail@luabind@@QAEXAAUscope@3@@Z ENDP ; luabind::detail::class_base::add_inner_scope
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_val$ = 12						; size = 4
?add_static_constant@class_base@detail@luabind@@QAEXPBDH@Z PROC ; luabind::detail::class_base::add_static_constant
; _this$ = ecx

; 277  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 278  :         m_registration->m_static_constants[name] = val;

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 12					; 0000000cH
	call	??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax], edx

; 279  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?add_static_constant@class_base@detail@luabind@@QAEXPBDH@Z ENDP ; luabind::detail::class_base::add_static_constant
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@class_base@detail@luabind@@QBEPBDXZ PROC		; luabind::detail::class_base::name
; _this$ = ecx

; 272  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  :         return m_registration->m_name; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+8]

; 274  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?name@class_base@detail@luabind@@QBEPBDXZ ENDP		; luabind::detail::class_base::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
tv79 = -44						; size = 4
tv131 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_ptr$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_member$ = 8						; size = 4
?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z PROC ; luabind::detail::class_base::add_default_member
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 		std::auto_ptr<registration> ptr(member);

	mov	eax, DWORD PTR _member$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 268  : 		m_registration->m_default_members.operator,(scope(ptr));

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	mov	DWORD PTR tv131[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR _ptr$[ebp]
	push	edx
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	ecx, DWORD PTR tv131[ebp]
	call	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z ; luabind::scope::scope
	mov	DWORD PTR tv79[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 80					; 00000050H
	call	??Qscope@luabind@@QAEAAU01@U01@@Z	; luabind::scope::operator,

; 269  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@add_defaul
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@add_defaul:
	DD	1
	DD	$LN8@add_defaul
$LN8@add_defaul:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@add_defaul
$LN6@add_defaul:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0:
	lea	ecx, DWORD PTR _ptr$[ebp]
	jmp	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?add_default_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ENDP ; luabind::detail::class_base::add_default_member
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
tv79 = -44						; size = 4
tv131 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_ptr$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_member$ = 8						; size = 4
?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z PROC ; luabind::detail::class_base::add_member
; _this$ = ecx

; 260  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 		std::auto_ptr<registration> ptr(member);

	mov	eax, DWORD PTR _member$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 262  : 		m_registration->m_members.operator,(scope(ptr));

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	mov	DWORD PTR tv131[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR _ptr$[ebp]
	push	edx
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	ecx, DWORD PTR tv131[ebp]
	call	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z ; luabind::scope::scope
	mov	DWORD PTR tv79[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 76					; 0000004cH
	call	??Qscope@luabind@@QAEAAU01@U01@@Z	; luabind::scope::operator,

; 263  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@add_member
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@add_member:
	DD	1
	DD	$LN8@add_member
$LN8@add_member:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@add_member
$LN6@add_member:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z$0:
	lea	ecx, DWORD PTR _ptr$[ebp]
	jmp	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ENDP ; luabind::detail::class_base::add_member
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_cast$ = 12						; size = 4
?add_base@class_base@detail@luabind@@QAEXABVtype_id@3@P6APAXPAX@Z@Z PROC ; luabind::detail::class_base::add_base
; _this$ = ecx

; 255  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 256  :         m_registration->m_bases.push_back(std::make_pair(base, cast));

	lea	eax, DWORD PTR _cast$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$make_pair@ABVtype_id@luabind@@AAP6APAXPAX@Z@std@@YA?AU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@0@ABVtype_id@luabind@@AAP6APAXPAX@Z@Z ; std::make_pair<luabind::type_id const &,void * (__cdecl*&)(void *)>
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 24					; 00000018H
	call	?push_back@?$vector@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@V?$allocator@U?$pair@Vtype_id@luabind@@P6APAXPAX@Z@std@@@2@@std@@QAEX$$QAU?$pair@Vtype_id@luabind@@P6APAXPAX@Z@2@@Z ; std::vector<std::pair<luabind::type_id,void * (__cdecl*)(void *)>,std::allocator<std::pair<luabind::type_id,void * (__cdecl*)(void *)> > >::push_back

; 257  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?add_base@class_base@detail@luabind@@QAEXABVtype_id@3@P6APAXPAX@Z@Z ENDP ; luabind::detail::class_base::add_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type_id_$ = 8						; size = 4
_id$ = 12						; size = 4
_wrapper_type$ = 16					; size = 4
_wrapper_id$ = 20					; size = 4
?init@class_base@detail@luabind@@QAEXABVtype_id@3@I0I@Z PROC ; luabind::detail::class_base::init
; _this$ = ecx

; 247  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 248  :         m_registration->m_type = type_id_;

	mov	eax, DWORD PTR _type_id_$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+40], ecx

; 249  :         m_registration->m_id = id;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR [edx+44], eax

; 250  :         m_registration->m_wrapper_type = wrapper_type;

	mov	ecx, DWORD PTR _wrapper_type$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], edx

; 251  :         m_registration->m_wrapper_id = wrapper_id;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _wrapper_id$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 252  :     }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?init@class_base@detail@luabind@@QAEXABVtype_id@3@I0I@Z ENDP ; luabind::detail::class_base::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
tv152 = -52						; size = 4
tv149 = -48						; size = 4
tv154 = -44						; size = 4
tv128 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0class_base@detail@luabind@@QAE@PBD@Z PROC		; luabind::detail::class_base::class_base
; _this$ = ecx

; 241  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_base@detail@luabind@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 238  :         : scope(std::auto_ptr<registration>(

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@class_base
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0class_registration@detail@luabind@@QAE@PBD@Z ; luabind::detail::class_registration::class_registration
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN4@class_base
$LN3@class_base:
	mov	DWORD PTR tv128[ebp], 0
$LN4@class_base:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+4], eax
	push	ecx
	mov	esi, esp
	mov	DWORD PTR $T6[ebp], esp
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv149[ebp]
	call	??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, esi
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z ; luabind::scope::scope
	mov	DWORD PTR tv152[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>

; 242  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0class_base@detail@luabind@@QAE@PBD@Z$0:
	push	84					; 00000054H
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0class_base@detail@luabind@@QAE@PBD@Z$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_base@detail@luabind@@QAE@PBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_base@detail@luabind@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_base@detail@luabind@@QAE@PBD@Z ENDP		; luabind::detail::class_base::class_base
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 4
_crep$ = -60						; size = 4
_r$ = -56						; size = 4
_ret$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_i$ = 16						; size = 4
?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z PROC ; luabind::detail::get_class_name

; 300  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 301  :         std::string ret;

	lea	ecx, DWORD PTR _ret$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 302  : 
; 303  : 		assert(L);

	cmp	DWORD PTR _L$[ebp], 0
	jne	SHORT $LN5@get_class_
	push	303					; 0000012fH
	push	OFFSET $SG112379
	push	OFFSET $SG112380
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@get_class_:

; 304  : 
; 305  : 		class_registry* r = class_registry::get_registry(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax

; 306  :         class_rep* crep = r->find_class(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _r$[ebp]
	call	?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z ; luabind::detail::class_registry::find_class
	mov	DWORD PTR _crep$[ebp], eax

; 307  : 
; 308  :         if (crep == 0)

	cmp	DWORD PTR _crep$[ebp], 0
	jne	SHORT $LN2@get_class_

; 309  :         {
; 310  :             ret = "custom";

	push	OFFSET $SG112383
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 311  : 			add_custom_name(i, ret);

	lea	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	?add_custom_name@detail@luabind@@YAXABVtype_id@2@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::detail::add_custom_name
	add	esp, 8

; 312  :         }

	jmp	SHORT $LN3@get_class_
$LN2@get_class_:

; 313  :         else
; 314  :         {
; 315  :             /* TODO reimplement this?
; 316  :             if (i == crep->holder_type())
; 317  :             {
; 318  :                 ret += "smart_ptr<";
; 319  :                 ret += crep->name();
; 320  :                 ret += ">";
; 321  :             }
; 322  :             else if (i == crep->const_holder_type())
; 323  :             {
; 324  :                 ret += "smart_ptr<const ";
; 325  :                 ret += crep->name();
; 326  :                 ret += ">";
; 327  :             }
; 328  :             else*/
; 329  :             {
; 330  :                 ret += crep->name();

	mov	ecx, DWORD PTR _crep$[ebp]
	call	?name@class_rep@detail@luabind@@QBEPBDXZ ; luabind::detail::class_rep::name
	push	eax
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN3@get_class_:

; 331  :             }
; 332  :         }
; 333  :         return ret;

	lea	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 334  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@get_class_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@get_class_:
	DD	1
	DD	$LN11@get_class_
$LN11@get_class_:
	DD	-48					; ffffffd0H
	DD	28					; 0000001cH
	DD	$LN9@get_class_
$LN9@get_class_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z$0:
	lea	ecx, DWORD PTR _ret$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z ENDP ; luabind::detail::get_class_name
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init_if@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init_if@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init_if'', COMDAT

; 106  : const in_place_init_if_t in_place_init_if ((in_place_init_if_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B
	call	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init_if@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init_if''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t, COMDAT
; _this$ = ecx

; 104  :   explicit in_place_init_if_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init'', COMDAT

; 98   : const in_place_init_t in_place_init ((in_place_init_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B
	call	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_t::in_place_init_t, COMDAT
; _this$ = ecx

; 96   :   explicit in_place_init_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_t::in_place_init_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\debug.hpp
;	COMDAT ??1stack_checker_type@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stack_checker_type@detail@luabind@@QAE@XZ PROC	; luabind::detail::stack_checker_type::~stack_checker_type, COMDAT
; _this$ = ecx

; 41   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 			assert(m_stack == lua_gettop(m_L));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], eax
	je	SHORT $LN2@stack_chec
	push	42					; 0000002aH
	push	OFFSET ??_C@_1KA@FDCAJHLM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
	push	OFFSET ??_C@_1DG@CAPFJFIB@?$AAm?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAu?$AAa?$AA_@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN2@stack_chec:

; 43   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1stack_checker_type@detail@luabind@@QAE@XZ ENDP	; luabind::detail::stack_checker_type::~stack_checker_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\debug.hpp
;	COMDAT ??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z PROC ; luabind::detail::stack_checker_type::stack_checker_type, COMDAT
; _this$ = ecx

; 38   : 		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			: m_L(L)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR [eax], ecx

; 37   : 			, m_stack(lua_gettop(m_L))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 38   : 		{}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0stack_checker_type@detail@luabind@@QAE@PAUlua_State@@@Z ENDP ; luabind::detail::stack_checker_type::stack_checker_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[], COMDAT
; _this$ = ecx

; 344  :     mapped_type& operator[](const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
	mov	eax, DWORD PTR [eax]
	add	eax, 20					; 00000014H

; 346  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ?swap@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?swap@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::swap, COMDAT
; _this$ = ecx

; 177  :     void swap(map& _Right) noexcept(noexcept(_Mybase::swap(_Right))) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 178  :         _Mybase::swap(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::swap

; 179  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 105  :     map() : _Mybase(key_compare()) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ PROC ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ENDP ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAEAAUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAEAAUltstr@detail@luabind@@XZ PROC ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAEAAUltstr@detail@luabind@@XZ ENDP ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
__Pnode$3 = -12						; size = 4
__Head$ = -8						; size = 4
_this$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 647  :         ++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 648  :         const auto _Head  = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 649  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR __Head$[ebp]
	jne	SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax

; 652  :             _Head->_Parent   = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 653  :             _Head->_Right    = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 654  :             _Newnode->_Color = _Black; // the root is black

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 655  :             return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	jmp	$LN18@Insert_nod
$LN5@Insert_nod:

; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[ebp+4], 0
	jne	SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN8@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN8@Insert_nod:

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN7@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_nod

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Parent_sibling$2[ebp], eax

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	ecx, DWORD PTR __Parent_sibling$2[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN12@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 678  :                     _Parent_sibling->_Color          = _Black;

	mov	edx, DWORD PTR __Parent_sibling$2[ebp]
	mov	BYTE PTR [edx+12], 1

; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 681  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@Insert_nod

; 683  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 684  :                         _Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
$LN14@Insert_nod:

; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
$LN13@Insert_nod:

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

	jmp	$LN11@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Parent_sibling$1[ebp], edx

; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@Insert_nod

; 694  :                     _Pnode->_Parent->_Color          = _Black;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 695  :                     _Parent_sibling->_Color          = _Black;

	mov	ecx, DWORD PTR __Parent_sibling$1[ebp]
	mov	BYTE PTR [ecx+12], 1

; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 698  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN17@Insert_nod

; 700  :                         _Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$3[ebp], eax

; 701  :                         _Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
$LN17@Insert_nod:

; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
$LN11@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }

	jmp	$LN4@Insert_nod
$LN3@Insert_nod:

; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 1

; 712  :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 713  :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 496  :         } else {

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 502  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 474  :         } else {

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 479  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 480  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1970 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1971 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
	add	esp, 4

; 1972 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1966 :     _Scary_val* _Get_scary() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1967 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
	add	esp, 4

; 1968 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1962 :     const _Alnode& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1963 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 1964 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1958 :     _Alnode& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1959 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 1960 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1954 :     const key_compare& _Getcomp() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1955 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first

; 1956 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1950 :     key_compare& _Getcomp() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1951 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAEAAUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first

; 1952 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Proxy$ = -48						; size = 8
_$S13$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
__Scary$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1937 :     void _Alloc_sentinel_and_proxy() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1938 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1939 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S13$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
	lea	eax, DWORD PTR _$S13$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1940 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	ecx, DWORD PTR __Scary$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	call	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 4
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1942 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 1943 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Alloc_sent:
	DD	2
	DD	$LN7@Alloc_sent
$LN7@Alloc_sent:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Alloc_sent
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@Alloc_sent
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	51					; 00000033H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1628 :     void _Check_grow_by_1() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN3@Check_grow

; 1630 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1631 :         }
; 1632 :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::swap, COMDAT
; _this$ = ecx

; 1484 :     void swap(_Tree& _Right) noexcept(_Is_nothrow_swappable<key_compare>::value) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1485 :         if (this != _STD addressof(_Right)) {

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@V?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@@std@@YAPAV?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> > >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN3@swap

; 1486 :             _Pocs(_Getal(), _Right._Getal());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	call	??$_Pocs@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@YAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@0@0@Z ; std::_Pocs<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 1487 :             _Swap_val_excluding_comp(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_val_excluding_comp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@AAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Swap_val_excluding_comp

; 1488 :             _Swap_adl(_Getcomp(), _Right._Getcomp());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	call	??$_Swap_adl@Ultstr@detail@luabind@@@std@@YAXAAUltstr@detail@luabind@@0@Z ; std::_Swap_adl<luabind::detail::ltstr>
	add	esp, 8
$LN3@swap:

; 1489 :         }
; 1490 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::swap
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1196 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1198 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1199 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S7$ = -17						; size = 1
__Alproxy$ = -12					; size = 4
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1080 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1081 :         _Scary->_Erase_head(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 1082 : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 1083 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S7$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
	lea	eax, DWORD PTR _$S7$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1084 :         _Delete_plain_internal(_Alproxy, _Scary->_Myproxy);

	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1085 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1086 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Tree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Tree:
	DD	1
	DD	$LN4@Tree
$LN4@Tree:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Tree
$LN3@Tree:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	55					; 00000037H
	DB	0
??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Swap_val_excluding_comp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
__Right_scary$ = -12					; size = 4
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_val_excluding_comp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@AAEXAAV12@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Swap_val_excluding_comp, COMDAT
; _this$ = ecx

; 984  :     void _Swap_val_excluding_comp(_Tree& _Right) { // swap contents (except comparator) with _Right, equal allocators

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 985  :         const auto _Scary       = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 986  :         const auto _Right_scary = _Right._Get_scary();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Right_scary$[ebp], eax

; 987  :         _Scary->_Swap_proxy_and_iterators(*_Right_scary);

	mov	eax, DWORD PTR __Right_scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 988  :         _Swap_adl(_Scary->_Myhead, _Right_scary->_Myhead);

	mov	ecx, DWORD PTR __Right_scary$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR __Scary$[ebp]
	add	edx, 4
	push	edx
	call	??$_Swap_adl@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Swap_adl<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 8

; 989  :         _STD swap(_Scary->_Mysize, _Right_scary->_Mysize);

	mov	eax, DWORD PTR __Right_scary$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	add	ecx, 8
	push	ecx
	call	??$swap@I$0A@@std@@YAXAAI0@Z		; std::swap<unsigned int,0>
	add	esp, 8

; 990  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_val_excluding_comp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@AAEXAAV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Swap_val_excluding_comp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx

; 882  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>

; 883  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy

; 884  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 178956970				; 0aaaaaaaH

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 669  :         }
; 670  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BI@@std@@YAII@Z	; std::_Get_size_of_n<24>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_default_table, COMDAT
; _this$ = ecx

; 126  : 		void get_default_table(lua_State* L) const { m_default_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_default_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_table, COMDAT
; _this$ = ecx

; 125  : 		void get_table(lua_State* L) const { m_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?name@class_rep@detail@luabind@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@class_rep@detail@luabind@@QBEPBDXZ PROC		; luabind::detail::class_rep::name, COMDAT
; _this$ = ecx

; 120  : 		const char* name() const throw() { return m_name; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?name@class_rep@detail@luabind@@QBEPBDXZ ENDP		; luabind::detail::class_rep::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?push@handle@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@handle@luabind@@QBEXPAUlua_State@@@Z PROC		; luabind::handle::push, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     lua_rawgeti(interpreter, LUA_REGISTRYINDEX, m_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 107  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@handle@luabind@@QBEXPAUlua_State@@@Z ENDP		; luabind::handle::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal, COMDAT
; _this$ = ecx

; 2247 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2248 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first

; 2249 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal, COMDAT
; _this$ = ecx

; 2243 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2244 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVclass_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@PAVclass_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep *>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep *> >,1>::_Get_first

; 2245 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2228 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2229 :         // orphan iterators within specified (inclusive) range
; 2230 : #if _HAS_CXX20
; 2231 :         if (_STD is_constant_evaluated()) {
; 2232 :             _Orphan_range_unlocked(_First, _Last);
; 2233 :         } else
; 2234 : #endif // _HAS_CXX20
; 2235 :         {
; 2236 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_locked

; 2237 :         }
; 2238 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 2223 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2224 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2225 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_unlocked

; 2226 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
__Temp$1 = -16						; size = 4
__Pnextptr$2 = -12					; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 2209 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2210 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2211 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Orphan_ran

; 2212 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$2[ebp], edx

; 2213 :             const auto _Temp     = *_Pnext;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 2214 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	edx, DWORD PTR __Pnextptr$2[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$2[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2215 :                 _Pnext = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 2216 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2217 :                 _Temp->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [edx], 0

; 2218 :                 *_Pnext         = _Temp->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@Orphan_ran:

; 2219 :             }
; 2220 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN1@Orphan_ran:

; 2221 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEXPAPAVclass_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@CAXXZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Xlength, COMDAT

; 2200 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp

; 2201 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2202 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@CAXXZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXQAPAVclass_rep@detail@luabind@@II@Z
_TEXT	SEGMENT
__Myend$ = -24						; size = 4
__Mylast$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXQAPAVclass_rep@detail@luabind@@II@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2079 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2080 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 2081 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 2082 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2083 : 
; 2084 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@YAXPAPAVclass_rep@detail@luabind@@QAPAV123@AAV?$allocator@PAVclass_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep *> >
	add	esp, 12					; 0000000cH

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep *>::deallocate
$LN2@Change_arr:

; 2090 :         }
; 2091 : 
; 2092 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 2093 :         _Mylast  = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 2095 :         _ASAN_VECTOR_CREATE;
; 2096 :     }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXQAPAVclass_rep@detail@luabind@@II@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -16					; size = 4
__Max$ = -12						; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEII@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 2024 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 2027 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 2030 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 2036 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 2040 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEII@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEAAPAVclass_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEAAPAVclass_rep@detail@luabind@@I@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[], COMDAT
; _this$ = ecx

; 1945 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1946 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1947 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1948 :         _STL_VERIFY(

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1949					; 0000079dH
	push	OFFSET ??_C@_0GB@OIADIBJN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1949					; 0000079dH
	push	OFFSET ??_C@_1MC@JGAHOMKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1949 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1950 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1951 : 
; 1952 :         return _My_data._Myfirst[_Pos];

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]

; 1953 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEAAPAVclass_rep@detail@luabind@@I@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?capacity@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::capacity, COMDAT
; _this$ = ecx

; 1940 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1941 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 1943 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::max_size, COMDAT
; _this$ = ecx

; 1935 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1936 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@PAVclass_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@PAVclass_rep@detail@luabind@@@2@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1937 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1938 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size, COMDAT
; _this$ = ecx

; 1930 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1931 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 1933 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?resize@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXI@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::resize, COMDAT
; _this$ = ecx

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::_Resize<std::_Value_init_tag>

; 1656 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXI@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@PAVclass_rep@detail@luabind@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@PAVclass_rep@detail@luabind@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 1073741823				; 3fffffffH

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@PAVclass_rep@detail@luabind@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEPAPAVclass_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEPAPAVclass_rep@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::class_rep *>::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$03@std@@YAII@Z	; std::_Get_size_of_n<4>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEPAPAVclass_rep@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::class_rep *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::class_rep *>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVclass_rep@detail@luabind@@@std@@QAEXQAPAVclass_rep@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::class_rep *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
_cls$ = 12						; size = 4
?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z PROC ; luabind::detail::class_map::put, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 126  :     if (id >= m_classes.size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
	cmp	DWORD PTR _id$[ebp], eax
	jb	SHORT $LN2@put

; 127  :         m_classes.resize(id + 1);

	mov	eax, DWORD PTR _id$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEXI@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::resize
$LN2@put:

; 128  :     m_classes[id] = cls;

	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QAEAAPAVclass_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
	mov	edx, DWORD PTR _cls$[ebp]
	mov	DWORD PTR [eax], edx

; 129  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?put@class_map@detail@luabind@@QAEXIPAVclass_rep@23@@Z ENDP ; luabind::detail::class_map::put
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$insert@U?$pair@Vtype_id@luabind@@H@std@@$0A@@?$map@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@Vtype_id@luabind@@H@std@@$0A@@?$map@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::map<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> > >::insert<std::pair<luabind::type_id,int>,0>, COMDAT
; _this$ = ecx

; 184  :     pair<iterator, bool> insert(_Valty&& _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 185  :         return this->emplace(_STD forward<_Valty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@U?$pair@Vtype_id@luabind@@H@std@@@std@@YA$$QAU?$pair@Vtype_id@luabind@@H@0@AAU10@@Z ; std::forward<std::pair<luabind::type_id,int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace@U?$pair@Vtype_id@luabind@@H@std@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::emplace<std::pair<luabind::type_id,int> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 186  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$insert@U?$pair@Vtype_id@luabind@@H@std@@$0A@@?$map@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::map<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> > >::insert<std::pair<luabind::type_id,int>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0Vtype_id@luabind@@H$0A@@?$pair@$$CBVtype_id@luabind@@I@std@@QAE@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$?0Vtype_id@luabind@@H$0A@@?$pair@$$CBVtype_id@luabind@@I@std@@QAE@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z PROC ; std::pair<luabind::type_id const ,unsigned int>::pair<luabind::type_id const ,unsigned int><luabind::type_id,int,0>, COMDAT
; _this$ = ecx

; 200  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@Vtype_id@luabind@@@std@@YA$$QAVtype_id@luabind@@AAV12@@Z ; std::forward<luabind::type_id>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0Vtype_id@luabind@@H$0A@@?$pair@$$CBVtype_id@luabind@@I@std@@QAE@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ENDP ; std::pair<luabind::type_id const ,unsigned int>::pair<luabind::type_id const ,unsigned int><luabind::type_id,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$make_pair@ABVtype_id@luabind@@H@std@@YA?AU?$pair@Vtype_id@luabind@@H@0@ABVtype_id@luabind@@$$QAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@ABVtype_id@luabind@@H@std@@YA?AU?$pair@Vtype_id@luabind@@H@0@ABVtype_id@luabind@@$$QAH@Z PROC ; std::make_pair<luabind::type_id const &,int>, COMDAT

; 443  :         is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 444  :     // return pair composed from arguments
; 445  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 446  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABVtype_id@luabind@@H$0A@@?$pair@Vtype_id@luabind@@H@std@@QAE@ABVtype_id@luabind@@$$QAH@Z ; std::pair<luabind::type_id,int>::pair<luabind::type_id,int><luabind::type_id const &,int,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 447  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$make_pair@ABVtype_id@luabind@@H@std@@YA?AU?$pair@Vtype_id@luabind@@H@0@ABVtype_id@luabind@@$$QAH@Z ENDP ; std::make_pair<luabind::type_id const &,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->, COMDAT
; _this$ = ecx

; 278  :     _NODISCARD pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 279  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PAU?$pair@$$CBVtype_id@luabind@@I@std@@@std@@SAPAU?$pair@$$CBVtype_id@luabind@@I@2@AAU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,unsigned int> *>::pointer_to
	add	esp, 4

; 280  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVtype_id@luabind@@I@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVtype_id@luabind@@I@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*, COMDAT
; _this$ = ecx

; 274  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 275  :         return const_cast<reference>(_Mybase::operator*());

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*

; 276  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@I@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@I@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*, COMDAT
; _this$ = ecx

; 179  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_0GA@GNHKHACC@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_1MA@LENEFKFL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_0GA@GNHKHACC@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_1MA@LENEFKFL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 187  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@I@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 39   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 40   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
__Pnode$3 = -12						; size = 4
__Head$ = -8						; size = 4
_this$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 647  :         ++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 648  :         const auto _Head  = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 649  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR __Head$[ebp]
	jne	SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax

; 652  :             _Head->_Parent   = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 653  :             _Head->_Right    = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 654  :             _Newnode->_Color = _Black; // the root is black

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 655  :             return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	jmp	$LN18@Insert_nod
$LN5@Insert_nod:

; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[ebp+4], 0
	jne	SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN8@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN8@Insert_nod:

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN7@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_nod

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Parent_sibling$2[ebp], eax

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	ecx, DWORD PTR __Parent_sibling$2[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN12@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 678  :                     _Parent_sibling->_Color          = _Black;

	mov	edx, DWORD PTR __Parent_sibling$2[ebp]
	mov	BYTE PTR [edx+12], 1

; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 681  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@Insert_nod

; 683  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 684  :                         _Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Lrotate
$LN14@Insert_nod:

; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Rrotate
$LN13@Insert_nod:

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

	jmp	$LN11@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Parent_sibling$1[ebp], edx

; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@Insert_nod

; 694  :                     _Pnode->_Parent->_Color          = _Black;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 695  :                     _Parent_sibling->_Color          = _Black;

	mov	ecx, DWORD PTR __Parent_sibling$1[ebp]
	mov	BYTE PTR [ecx+12], 1

; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 698  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN17@Insert_nod

; 700  :                         _Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$3[ebp], eax

; 701  :                         _Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Rrotate
$LN17@Insert_nod:

; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Lrotate
$LN11@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }

	jmp	$LN4@Insert_nod
$LN3@Insert_nod:

; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 1

; 712  :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 713  :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 496  :         } else {

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 502  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 474  :         } else {

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 479  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 480  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1970 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1971 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > const >
	add	esp, 4

; 1972 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1966 :     _Scary_val* _Get_scary() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1967 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >
	add	esp, 4

; 1968 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1962 :     const _Alnode& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1963 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first

; 1964 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1958 :     _Alnode& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1959 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>::_Get_first

; 1960 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1954 :     const key_compare& _Getcomp() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1955 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > >,1>,1>::_Get_first

; 1956 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1628 :     void _Check_grow_by_1() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Get_scary
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN3@Check_grow

; 1630 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1631 :         }
; 1632 :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1196 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1198 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1199 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 178956970				; 0aaaaaaaH

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BI@@std@@YAII@Z	; std::_Get_size_of_n<24>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@I@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,unsigned int>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 8
$T2 = -32						; size = 4
_result$ = -24						; size = 16
_this$ = -4						; size = 4
_id$ = 8						; size = 4
_type$ = 12						; size = 4
?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z PROC ; luabind::detail::class_id_map::put, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   :     assert(id < local_id_base);

	mov	eax, DWORD PTR _id$[ebp]
	cmp	eax, DWORD PTR ?local_id_base@class_id_map@detail@luabind@@0IB ; luabind::detail::class_id_map::local_id_base
	jb	SHORT $LN3@put
	push	93					; 0000005dH
	push	OFFSET ??_C@_1KM@EAPOGOKM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
	push	OFFSET ??_C@_1CG@PBEMIDNO@?$AAi?$AAd?$AA?5?$AA?$DM?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA_?$AAi?$AAd?$AA_?$AAb@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@put:

; 94   : 
; 95   :     std::pair<map_type::iterator, bool> result = m_classes.insert(

	mov	DWORD PTR $T2[ebp], 0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$make_pair@ABVtype_id@luabind@@H@std@@YA?AU?$pair@Vtype_id@luabind@@H@0@ABVtype_id@luabind@@$$QAH@Z ; std::make_pair<luabind::type_id const &,int>
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _result$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@U?$pair@Vtype_id@luabind@@H@std@@$0A@@?$map@Vtype_id@luabind@@IU?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@I@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vtype_id@luabind@@H@1@@Z ; std::map<luabind::type_id,unsigned int,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,unsigned int> > >::insert<std::pair<luabind::type_id,int>,0>

; 96   :         std::make_pair(type, 0));
; 97   : 
; 98   :     assert(

	movzx	eax, BYTE PTR _result$[ebp+12]
	test	eax, eax
	jne	SHORT $LN4@put
	lea	ecx, DWORD PTR _result$[ebp]
	call	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _id$[ebp]
	je	SHORT $LN4@put
	lea	ecx, DWORD PTR _result$[ebp]
	call	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR ?local_id_base@class_id_map@detail@luabind@@0IB ; luabind::detail::class_id_map::local_id_base
	jae	SHORT $LN4@put
	push	102					; 00000066H
	push	OFFSET ??_C@_1KM@EAPOGOKM@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
	push	OFFSET ??_C@_1KK@BKHOEKNE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?4?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?5?$AA?$HM@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@put:

; 99   :         result.second
; 100  :         || result.first->second == id
; 101  :         || result.first->second >= local_id_base
; 102  :     );
; 103  : 
; 104  :     result.first->second = id;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVtype_id@luabind@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,unsigned int> > > >::operator->
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 105  : }

	lea	ecx, DWORD PTR _result$[ebp]
	call	??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@put
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@put:
	DD	1
	DD	$LN7@put
$LN7@put:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@put
$LN6@put:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?put@class_id_map@detail@luabind@@QAEXIABVtype_id@3@@Z ENDP ; luabind::detail::class_id_map::put
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z PROC ; std::less<luabind::type_id>::operator(), COMDAT
; _this$ = ecx

; 142  :         noexcept(noexcept(_Fake_copy_init<bool>(_Left < _Right))) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 143  :         return _Left < _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	??Mtype_id@luabind@@QBE_NABV01@@Z	; luabind::type_id::operator<

; 144  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ENDP ; std::less<luabind::type_id>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ?name@type_id@luabind@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@type_id@luabind@@QBEPBDXZ PROC			; luabind::type_id::name, COMDAT
; _this$ = ecx

; 50   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :         return id->name();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?name@type_info@@QBEPBDXZ		; type_info::name

; 52   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?name@type_id@luabind@@QBEPBDXZ ENDP			; luabind::type_id::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??Mtype_id@luabind@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??Mtype_id@luabind@@QBE_NABV01@@Z PROC			; luabind::type_id::operator<, COMDAT
; _this$ = ecx

; 45   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :         return id->before(*other.id);

	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?before@type_info@@QBE_NABV1@@Z		; type_info::before

; 47   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Mtype_id@luabind@@QBE_NABV01@@Z ENDP			; luabind::type_id::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??0type_id@luabind@@QAE@ABVtype_info@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
??0type_id@luabind@@QAE@ABVtype_info@@@Z PROC		; luabind::type_id::type_id, COMDAT
; _this$ = ecx

; 32   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   :       : id(&id)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0type_id@luabind@@QAE@ABVtype_info@@@Z ENDP		; luabind::type_id::type_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??0type_id@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0type_id@luabind@@QAE@XZ PROC				; luabind::type_id::type_id, COMDAT
; _this$ = ecx

; 28   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   :       : id(&typeid(detail::null_type))

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_R0?AUnull_type@detail@luabind@@@8

; 28   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0type_id@luabind@@QAE@XZ ENDP				; luabind::type_id::type_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\primitives.hpp
;	COMDAT ??Rltstr@detail@luabind@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??Rltstr@detail@luabind@@QBE_NPBD0@Z PROC		; luabind::detail::ltstr::operator(), COMDAT
; _this$ = ecx

; 62   : 		bool operator()(const char* s1, const char* s2) const { return std::strcmp(s1, s2) < 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??Rltstr@detail@luabind@@QBE_NPBD0@Z ENDP		; luabind::detail::ltstr::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_typeinfo.h
;	COMDAT ?name@type_info@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@type_info@@QBEPBDXZ PROC				; type_info::name, COMDAT
; _this$ = ecx

; 114  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 115  :         #ifdef _M_CEE_PURE
; 116  :         return __std_type_info_name(&_Data, static_cast<__type_info_node*>(__type_info_root_node.ToPointer()));
; 117  :         #else
; 118  :         return __std_type_info_name(&_Data, &__type_info_root_node);

	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	___std_type_info_name
	add	esp, 8

; 119  :         #endif
; 120  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?name@type_info@@QBEPBDXZ ENDP				; type_info::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_typeinfo.h
;	COMDAT ?before@type_info@@QBE_NABV1@@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?before@type_info@@QBE_NABV1@@Z PROC			; type_info::before, COMDAT
; _this$ = ecx

; 109  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 110  :         return __std_type_info_compare(&_Data, &_Other._Data) < 0;

	mov	eax, DWORD PTR __Other$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_type_info_compare
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@before
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@before
$LN3@before:
	mov	DWORD PTR tv70[ebp], 0
$LN4@before:
	mov	al, BYTE PTR tv70[ebp]

; 111  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?before@type_info@@QBE_NABV1@@Z ENDP			; type_info::before
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  : [[noreturn]] inline void _Throw_tree_length_error() {

	push	ebp
	mov	ebp, esp

; 418  :     _Xlength_error("map/set too long");

	push	OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Throw_tree:

; 419  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 190  :     constexpr tuple(const tuple&) noexcept /* strengthened */ {} // TRANSITION, ABI: should be defaulted

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1388 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1389 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1384 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1385 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5036 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5037 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5038 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5032 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5033 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5034 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 5028 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(basic_string& _Right) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5029 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 5030 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -29						; size = 1
__Al$3 = -28						; size = 4
__Ptr$4 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 5004 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5005 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 5006 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 5007 :         _ASAN_STRING_REMOVE(*this);
; 5008 :         if (_My_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Tidy_deall

; 5009 :             const pointer _Ptr = _My_data._Bx._Ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$4[ebp], eax

; 5010 :             auto& _Al          = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$3[ebp], eax

; 5011 :             _Destroy_in_place(_My_data._Bx._Ptr);

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
	add	esp, 4

; 5012 :             _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Ptr$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$3[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 5014 :         }
; 5015 : 
; 5016 :         _My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], 0

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR __My_data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 5020 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -9						; size = 1
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4993 :     _CONSTEXPR20 void _Tidy_init() noexcept { // initialize basic_string data members

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4994 :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4995 :         _My_data._Mysize = 0;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+24], 15			; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __My_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 5001 :         _ASAN_STRING_CREATE(*this);
; 5002 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4892 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4893 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Requested$[ebp]
	push	edx
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH

; 4894 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4879 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 4880 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 4881 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	ecx, DWORD PTR __Masked$[ebp]
	cmp	ecx, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 4882 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4883 :         }
; 4884 : 
; 4885 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	mov	edx, DWORD PTR __Old$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR __Max$[ebp]
	sub	eax, edx
	cmp	DWORD PTR __Old$[ebp], eax
	jbe	SHORT $LN3@Calculate_

; 4886 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4887 :         }
; 4888 : 
; 4889 :         return (_STD max)(_Masked, _Old + _Old / 2);

	mov	ecx, DWORD PTR __Old$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	eax, DWORD PTR __Masked$[ebp]
	push	eax
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4890 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Calculate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Calculate_:
	DD	1
	DD	$LN6@Calculate_
$LN6@Calculate_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Calculate_
$LN5@Calculate_:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 4277 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4278 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 4279 :         const size_type _Storage_max = // can always store small string

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 4280 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4281 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 4282 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4283 :         );
; 4284 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@max_size
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@max_size:
	DD	1
	DD	$LN4@max_size
$LN4@max_size:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@max_size
$LN3@max_size:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3545 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3547 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3525 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3526 :         // assign [_Ptr, _Ptr + _Count)
; 3527 :         if (_Count <= _Mypair._Myval2._Myres) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 3528 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3529 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3530 :             _Mypair._Myval2._Mysize = _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 3531 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$3[ebp]
	push	eax
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3532 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3533 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 3534 :         }
; 3535 : 
; 3536 :         return _Reallocate_for(

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3537 :             _Count,
; 3538 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3539 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3540 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3541 :             },
; 3542 :             _Ptr);
; 3543 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3442 :     _CONSTEXPR20 basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3443 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3444 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -14						; size = 1
$T2 = -13						; size = 1
__Old_ptr$3 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3419 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3420 :         // append [_Ptr, _Ptr + _Count)
; 3421 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3422 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], eax
	ja	SHORT $LN2@append

; 3423 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3424 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3425 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3426 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3427 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Old_ptr$3[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3428 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@append
$LN2@append:

; 3429 :         }
; 3430 : 
; 3431 :         return _Reallocate_grow_by(

	xor	edx, edx
	mov	BYTE PTR $T1[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 3432 :             _Count,
; 3433 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 3434 :                 const size_type _Count) {
; 3435 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3436 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 3437 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3438 :             },
; 3439 :             _Ptr, _Count);
; 3440 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 3382 :     _CONSTEXPR20 basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3383 :         return append(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3384 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3354 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3355 :         return assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3356 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -24					; size = 4
_$S12$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3267 :     _CONSTEXPR20 ~basic_string() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3268 :         _Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3269 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3270 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S12$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	eax, DWORD PTR _$S12$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 3271 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __To_delete$[ebp], edx

; 3272 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3273 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	ecx, DWORD PTR __To_delete$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 3274 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3275 :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@basic_stri:
	DD	1
	DD	$LN4@basic_stri
$LN4@basic_stri:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@basic_stri
$LN3@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
__Right_data$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 3140 :     _CONSTEXPR20 void _Take_contents(basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3141 :         // assign by stealing _Right's buffer
; 3142 :         // pre: this != &_Right
; 3143 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 3144 :         // pre: *this owns no memory, iterators orphaned
; 3145 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 3146 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 3147 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], ecx

; 3148 : 
; 3149 :         if constexpr (_Can_memcpy_val) {
; 3150 : #if _HAS_CXX20
; 3151 :             if (!_STD is_constant_evaluated())
; 3152 : #endif // _HAS_CXX20
; 3153 :             {
; 3154 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3155 :                 if (_Right_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Take_conte

; 3156 :                     // take ownership of _Right's iterators along with its buffer
; 3157 :                     _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 3158 :                 } else {

	jmp	SHORT $LN3@Take_conte
$LN2@Take_conte:

; 3159 :                     _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 3160 :                 }
; 3161 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3162 : 
; 3163 : #ifdef _INSERT_STRING_ANNOTATION
; 3164 :                 if (!_Right_data._Large_string_engaged()) {
; 3165 :                     _ASAN_STRING_REMOVE(_Right);
; 3166 :                 }
; 3167 : #endif // _INSERT_STRING_ANNOTATION
; 3168 : 
; 3169 :                 _Memcpy_val_from(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 3170 : 
; 3171 : #ifdef _INSERT_STRING_ANNOTATION
; 3172 :                 if (!_Right_data._Large_string_engaged()) {
; 3173 :                     _ASAN_STRING_REMOVE(_Right);
; 3174 :                     _ASAN_STRING_CREATE(*this);
; 3175 :                 }
; 3176 : #endif // _INSERT_STRING_ANNOTATION
; 3177 : 
; 3178 :                 _Right._Tidy_init();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 3179 :                 return;

	jmp	$LN6@Take_conte

; 3180 :             }
; 3181 :         }
; 3182 : 
; 3183 :         if (_Right_data._Large_string_engaged()) { // steal buffer

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Take_conte

; 3184 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

	mov	eax, DWORD PTR __Right_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
	add	esp, 8

; 3185 :             _Right_data._Bx._Ptr = nullptr;

	mov	edx, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [edx+4], 0

; 3186 :             _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 3187 :         } else { // copy small string buffer

	jmp	SHORT $LN5@Take_conte
$LN4@Take_conte:

; 3188 :             _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 3189 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Right_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3190 :             _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN5@Take_conte:

; 3191 :         }
; 3192 : 
; 3193 :         _My_data._Mysize = _Right_data._Mysize;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx

; 3194 :         _My_data._Myres  = _Right_data._Myres;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 3195 :         _Right._Tidy_init();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
$LN6@Take_conte:

; 3196 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -12					; size = 4
__My_data_mem$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 3131 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3132 :         _STL_INTERNAL_CHECK(_Can_memcpy_val);
; 3133 :         const auto _My_data_mem =

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __My_data_mem$[ebp], eax

; 3134 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 3135 :         const auto _Right_data_mem =

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __Right_data_mem$[ebp], eax

; 3136 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 3137 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	push	24					; 00000018H
	mov	edx, DWORD PTR __Right_data_mem$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data_mem$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 3138 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2888 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
	add	esp, 4
	push	eax
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2889 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2890 :         _Take_contents(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2891 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2614 :         : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2615 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2616 :         _Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2617 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT
; _this$ = ecx

; 2304 :     constexpr void _Activate_SSO_buffer() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2305 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2306 : #if _HAS_CXX20
; 2307 :         if (_STD is_constant_evaluated()) {
; 2308 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2309 :                 _Bx._Buf[_Idx] = value_type();
; 2310 :             }
; 2311 :         }
; 2312 : #endif // _HAS_CXX20
; 2313 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2300 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2301 :         return _BUF_SIZE <= _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
	mov	al, BYTE PTR tv66[ebp]

; 2302 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2282 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2283 :         value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2284 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2286 :         }
; 2287 : 
; 2288 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2289 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2271 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2272 : 
; 2273 :     // length of internal buffer, [1, 16]:
; 2274 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2275 :     // roundup mask for allocated buffers, [0, 15]:
; 2276 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2277 :                                            : sizeof(value_type) <= 2 ? 7
; 2278 :                                            : sizeof(value_type) <= 4 ? 3
; 2279 :                                            : sizeof(value_type) <= 8 ? 1
; 2280 :                                                                      : 0;
; 2281 : 
; 2282 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2283 :         value_type* _Result = _Bx._Buf;
; 2284 :         if (_Large_string_engaged()) {
; 2285 :             _Result = _Unfancy(_Bx._Ptr);
; 2286 :         }
; 2287 : 
; 2288 :         return _Result;
; 2289 :     }
; 2290 : 
; 2291 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2292 :         const value_type* _Result = _Bx._Buf;
; 2293 :         if (_Large_string_engaged()) {
; 2294 :             _Result = _Unfancy(_Bx._Ptr);
; 2295 :         }
; 2296 : 
; 2297 :         return _Result;
; 2298 :     }
; 2299 : 
; 2300 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2301 :         return _BUF_SIZE <= _Myres;
; 2302 :     }
; 2303 : 
; 2304 :     constexpr void _Activate_SSO_buffer() noexcept {
; 2305 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2306 : #if _HAS_CXX20
; 2307 :         if (_STD is_constant_evaluated()) {
; 2308 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2309 :                 _Bx._Buf[_Idx] = value_type();
; 2310 :             }
; 2311 :         }
; 2312 : #endif // _HAS_CXX20
; 2313 :     }
; 2314 : 
; 2315 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2316 :         // checks whether _Off is in the bounds of [0, size()]
; 2317 :         if (_Mysize < _Off) {
; 2318 :             _Xran();
; 2319 :         }
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2323 :         // checks whether _Off is in the bounds of [0, size())
; 2324 :         if (_Mysize <= _Off) {
; 2325 :             _Xran();
; 2326 :         }
; 2327 :     }
; 2328 : 
; 2329 :     [[noreturn]] static void _Xran() {
; 2330 :         _Xout_of_range("invalid string position");
; 2331 :     }
; 2332 : 
; 2333 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2334 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2335 :         return (_STD min)(_Size, _Mysize - _Off);
; 2336 :     }
; 2337 : 
; 2338 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2340 : 
; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2342 : 
; 2343 :         value_type _Buf[_BUF_SIZE];
; 2344 :         pointer _Ptr;
; 2345 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2346 :     } _Bx;
; 2347 : 
; 2348 :     size_type _Mysize = 0; // current length of string

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2349 :     size_type _Myres  = 0; // current storage reserved for string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 2271 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	or	eax, -1

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	828					; 0000033cH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 831  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2366 : [[noreturn]] inline void _Xlen_string() {

	push	ebp
	mov	ebp, esp

; 2367 :     _Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen_strin:

; 2368 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 455  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

	push	ebp
	mov	ebp, esp

; 456  : #if _HAS_CXX20
; 457  :         if (_STD is_constant_evaluated()) {
; 458  :             return _Primary_char_traits::assign(_Left, _Right);
; 459  :         }
; 460  : #endif // _HAS_CXX20
; 461  :         _Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 462  :     }

	pop	ebp
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 402  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 403  :         // find length of null-terminated string
; 404  : #if _HAS_CXX17
; 405  : #ifdef __cpp_char8_t
; 406  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 407  : #if _HAS_U8_INTRINSICS
; 408  :             return __builtin_u8strlen(_First);
; 409  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 410  :             return _Primary_char_traits::length(_First);
; 411  : #endif // _HAS_U8_INTRINSICS
; 412  :         } else
; 413  : #endif // __cpp_char8_t
; 414  :         {
; 415  :             return __builtin_strlen(_First);
; 416  :         }
; 417  : #else // _HAS_CXX17
; 418  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 419  : #endif // _HAS_CXX17
; 420  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 121  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 68   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1310 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1303 :     _Container_proxy* _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1310 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1305 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1306 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1307 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 655  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked_v3, COMDAT
; _this$ = ecx

; 1219 :     void _Orphan_me_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1220 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1221 :         _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1222 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_me_:
	DD	1
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_me_
$LN3@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ PROC ; std::_Iterator_base12::_Orphan_me_unlocked_v3, COMDAT
; _this$ = ecx

; 1203 :     _CONSTEXPR20 void _Orphan_me_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1204 :         if (!_Myproxy) { // already orphaned

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Orphan_me_

; 1205 :             return;

	jmp	$LN13@Orphan_me_
$LN10@Orphan_me_:

; 1206 :         }
; 1207 : 
; 1208 :         // adopted, remove self from list
; 1209 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$[ebp], edx
$LN2@Orphan_me_:

; 1210 :         while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me_
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me_

; 1211 :             _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1212 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN6@Orphan_me_:

; 1213 : 
; 1214 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me_
	jmp	SHORT $LN4@Orphan_me_
$LN9@Orphan_me_:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1214					; 000004beH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me_
	int	3
$LN14@Orphan_me_:
	push	0
	push	1214					; 000004beH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me_
$LN4@Orphan_me_:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me_

; 1215 :         *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1216 :         _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me_:

; 1217 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ENDP ; std::_Iterator_base12::_Orphan_me_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1198 :     void _Adopt_locked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1199 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1200 :         _Adopt_unlocked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1201 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Adopt_lock:
	DD	1
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Adopt_lock
$LN3@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1181 :     _CONSTEXPR20 void _Adopt_unlocked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1182 :         if (!_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt_unlo

; 1183 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1184 :             return;

	jmp	SHORT $LN5@Adopt_unlo
$LN2@Adopt_unlo:

; 1185 :         }
; 1186 : 
; 1187 :         _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$[ebp], ecx

; 1188 :         if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$[ebp]
	je	SHORT $LN5@Adopt_unlo

; 1189 :             if (_Myproxy) { // adopted, remove self from list

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Adopt_unlo

; 1190 :                 _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN4@Adopt_unlo:

; 1191 :             }
; 1192 :             _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1193 :             _Parent_proxy->_Myfirstiter = this;

	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1194 :             _Myproxy                    = _Parent_proxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@Adopt_unlo:

; 1195 :         }
; 1196 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z PROC	; std::_Iterator_base12::_Assign_locked, COMDAT
; _this$ = ecx

; 1176 :     void _Assign_locked(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1177 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1178 :         _Assign_unlocked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_unlocked

; 1179 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Assign_loc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Assign_loc:
	DD	1
	DD	$LN4@Assign_loc
$LN4@Assign_loc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Assign_loc
$LN3@Assign_loc:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ENDP	; std::_Iterator_base12::_Assign_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z PROC ; std::_Iterator_base12::_Assign_unlocked, COMDAT
; _this$ = ecx

; 1164 :     _CONSTEXPR20 void _Assign_unlocked(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1165 :         if (_Myproxy == _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@Assign_unl

; 1166 :             return;

	jmp	SHORT $LN5@Assign_unl
$LN2@Assign_unl:

; 1167 :         }
; 1168 : 
; 1169 :         if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Assign_unl

; 1170 :             _Adopt_unlocked(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1171 :         } else { // becoming invalid, disown current parent

	jmp	SHORT $LN5@Assign_unl
$LN3@Assign_unl:

; 1172 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN5@Assign_unl:

; 1173 :         }
; 1174 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ENDP ; std::_Iterator_base12::_Assign_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1153 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1154 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1155 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1133 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1134 : #if _HAS_CXX20
; 1135 :         if (_STD is_constant_evaluated()) {
; 1136 :             _Adopt_unlocked(_Parent);
; 1137 :         } else
; 1138 : #endif // _HAS_CXX20
; 1139 :         {
; 1140 :             _Adopt_locked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked

; 1141 :         }
; 1142 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1122 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1123 : #if _HAS_CXX20
; 1124 :         if (_STD is_constant_evaluated()) {
; 1125 :             _Orphan_me_unlocked_v3();
; 1126 :         } else
; 1127 : #endif // _HAS_CXX20
; 1128 :         {
; 1129 :             _Orphan_me_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3

; 1130 :         }
; 1131 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1105 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1106 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1107 : #if _HAS_CXX20
; 1108 :         if (_STD is_constant_evaluated()) {
; 1109 :             _Assign_unlocked(_Right);
; 1110 :         } else
; 1111 : #endif // _HAS_CXX20
; 1112 :         {
; 1113 :             _Assign_locked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_locked

; 1114 :         }
; 1115 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1116 :         _Myproxy = _Right._Myproxy;
; 1117 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1118 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1119 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1101 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1104 : 
; 1105 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1106 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1107 : #if _HAS_CXX20
; 1108 :         if (_STD is_constant_evaluated()) {
; 1109 :             _Assign_unlocked(_Right);
; 1110 :         } else
; 1111 : #endif // _HAS_CXX20
; 1112 :         {
; 1113 :             _Assign_locked(_Right);
; 1114 :         }
; 1115 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1116 :         _Myproxy = _Right._Myproxy;
; 1117 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1118 :         return *this;
; 1119 :     }
; 1120 : 
; 1121 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1123 : #if _HAS_CXX20
; 1124 :         if (_STD is_constant_evaluated()) {
; 1125 :             _Orphan_me_unlocked_v3();
; 1126 :         } else
; 1127 : #endif // _HAS_CXX20
; 1128 :         {
; 1129 :             _Orphan_me_locked_v3();
; 1130 :         }
; 1131 :     }
; 1132 : 
; 1133 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1134 : #if _HAS_CXX20
; 1135 :         if (_STD is_constant_evaluated()) {
; 1136 :             _Adopt_unlocked(_Parent);
; 1137 :         } else
; 1138 : #endif // _HAS_CXX20
; 1139 :         {
; 1140 :             _Adopt_locked(_Parent);
; 1141 :         }
; 1142 :     }
; 1143 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1144 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1145 :         if (_Parent) { // have a parent, do adoption
; 1146 :             _Myproxy = _Parent->_Myproxy;
; 1147 :         } else { // no future parent, just disown current parent
; 1148 :             _Myproxy = nullptr;
; 1149 :         }
; 1150 :     }
; 1151 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1152 : 
; 1153 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1154 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1155 :     }
; 1156 : 
; 1157 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1158 : 
; 1159 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1160 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1102 :         *this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1103 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1099 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1100 : 
; 1101 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1102 :         *this = _Right;
; 1103 :     }
; 1104 : 
; 1105 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1106 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1107 : #if _HAS_CXX20
; 1108 :         if (_STD is_constant_evaluated()) {
; 1109 :             _Assign_unlocked(_Right);
; 1110 :         } else
; 1111 : #endif // _HAS_CXX20
; 1112 :         {
; 1113 :             _Assign_locked(_Right);
; 1114 :         }
; 1115 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1116 :         _Myproxy = _Right._Myproxy;
; 1117 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1118 :         return *this;
; 1119 :     }
; 1120 : 
; 1121 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1123 : #if _HAS_CXX20
; 1124 :         if (_STD is_constant_evaluated()) {
; 1125 :             _Orphan_me_unlocked_v3();
; 1126 :         } else
; 1127 : #endif // _HAS_CXX20
; 1128 :         {
; 1129 :             _Orphan_me_locked_v3();
; 1130 :         }
; 1131 :     }
; 1132 : 
; 1133 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1134 : #if _HAS_CXX20
; 1135 :         if (_STD is_constant_evaluated()) {
; 1136 :             _Adopt_unlocked(_Parent);
; 1137 :         } else
; 1138 : #endif // _HAS_CXX20
; 1139 :         {
; 1140 :             _Adopt_locked(_Parent);
; 1141 :         }
; 1142 :     }
; 1143 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1144 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1145 :         if (_Parent) { // have a parent, do adoption
; 1146 :             _Myproxy = _Parent->_Myproxy;
; 1147 :         } else { // no future parent, just disown current parent
; 1148 :             _Myproxy = nullptr;
; 1149 :         }
; 1150 :     }
; 1151 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1152 : 
; 1153 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1154 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1155 :     }
; 1156 : 
; 1157 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1158 : 
; 1159 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1160 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1099 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_locked, COMDAT
; _this$ = ecx

; 1091 :     void _Swap_proxy_and_iterators_locked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1092 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1093 :         _Swap_proxy_and_iterators_unlocked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked

; 1094 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Swap_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Swap_proxy:
	DD	1
	DD	$LN4@Swap_proxy
$LN4@Swap_proxy:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Swap_proxy
$LN3@Swap_proxy:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1086 :     void _Orphan_all_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1087 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1088 :         _Orphan_all_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1089 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_all:
	DD	1
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_all
$LN3@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked, COMDAT
; _this$ = ecx

; 1250 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1251 :     _Container_proxy* _Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 1252 :     _Myproxy                = _Right._Myproxy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 1253 :     _Right._Myproxy         = _Temp;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [edx], eax

; 1254 : 
; 1255 :     if (_Myproxy) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Swap_proxy

; 1256 :         _Myproxy->_Mycont = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1257 :     }
; 1258 : 
; 1259 :     if (_Right._Myproxy) {

	mov	edx, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN4@Swap_proxy

; 1260 :         _Right._Myproxy->_Mycont = &_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN4@Swap_proxy:

; 1261 :     }
; 1262 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Pnext$2 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1226 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1227 :     if (!_Myproxy) { // no proxy, already done

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Orphan_all

; 1228 :         return;

	jmp	SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1229 :     }
; 1230 : 
; 1231 :     // proxy allocated, drain it
; 1232 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	push	eax
	call	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
	add	esp, 8
	mov	DWORD PTR __Pnext$2[ebp], eax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnext$2[ebp], edx
$LN4@Orphan_all:
	cmp	DWORD PTR __Pnext$2[ebp], 0
	je	SHORT $LN6@Orphan_all

; 1233 :         _Pnext->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	DWORD PTR [eax], 0

; 1234 :     }

	jmp	SHORT $LN2@Orphan_all
$LN6@Orphan_all:

; 1235 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1264 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1265 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : #if _HAS_CXX20
; 1267 :     if (_STD is_constant_evaluated()) {
; 1268 :         _Swap_proxy_and_iterators_unlocked(_Right);
; 1269 :     } else
; 1270 : #endif // _HAS_CXX20
; 1271 :     {
; 1272 :         _Swap_proxy_and_iterators_locked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked

; 1273 :     }
; 1274 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1275 :     _Swap_proxy_and_iterators_unlocked(_Right);
; 1276 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1277 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1237 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1238 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1239 : #if _HAS_CXX20
; 1240 :     if (_STD is_constant_evaluated()) {
; 1241 :         _Orphan_all_unlocked_v3();
; 1242 :     } else
; 1243 : #endif // _HAS_CXX20
; 1244 :     {
; 1245 :         _Orphan_all_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1246 :     }
; 1247 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1248 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1055 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1056 : 
; 1057 :     _Container_base12(const _Container_base12&)            = delete;
; 1058 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1059 : 
; 1060 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1061 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1065 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1066 :         _Construct_in_place(*_New_proxy, this);
; 1067 :         _Myproxy            = _New_proxy;
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :     }
; 1070 : 
; 1071 :     template <class _Alloc>
; 1072 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1073 :         // pre: no iterators refer to the existing proxy
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _New_proxy->_Mycont = this;
; 1077 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1078 :     }
; 1079 : 
; 1080 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1055 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1047 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1048 : 
; 1049 :     const _Container_base12* _Mycont       = nullptr;
; 1050 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1047 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 166  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 77   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 78   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ?set_false@foreach_detail_@boost@@YA_NAA_N@Z
_TEXT	SEGMENT
_b$ = 8							; size = 4
?set_false@foreach_detail_@boost@@YA_NAA_N@Z PROC	; boost::foreach_detail_::set_false, COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp

; 424  :     b = false;

	mov	eax, DWORD PTR _b$[ebp]
	mov	BYTE PTR [eax], 0

; 425  :     return false;

	xor	al, al

; 426  : }

	pop	ebp
	ret	0
?set_false@foreach_detail_@boost@@YA_NAA_N@Z ENDP	; boost::foreach_detail_::set_false
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\foreach.hpp
;	COMDAT ??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ PROC	; boost::foreach_detail_::auto_any_base::operator bool, COMDAT
; _this$ = ecx

; 254  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  :         return false;

	xor	al, al

; 256  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??Bauto_any_base@foreach_detail_@boost@@QBE_NXZ ENDP	; boost::foreach_detail_::auto_any_base::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
