; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32215.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\class_info.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG115382 DB	' ', 00H
?yield@luabind@@3U?$policy_cons@Uyield_policy@detail@luabind@@Unull_type@23@@detail@1@B	ORG $+1 ; luabind::yield
	ORG $+1
$SG115383 DB	'(', 00H
	ORG $+2
$SG115384 DB	')', 00H
	ORG $+2
$SG115890 DB	' ', 00H
	ORG $+2
$SG115891 DB	'(', 00H
	ORG $+2
$SG115892 DB	')', 00H
	ORG $+2
$SG116384 DB	' ', 00H
	ORG $+2
$SG116385 DB	'(', 00H
	ORG $+2
$SG116386 DB	')', 00H
	ORG $+2
$SG116878 DB	' ', 00H
	ORG $+2
$SG116879 DB	'(', 00H
	ORG $+2
$SG116880 DB	')', 00H
	ORG $+2
$SG117156 DB	',', 00H
	ORG $+2
$SG117431 DB	',', 00H
	ORG $+2
$SG117496 DB	',', 00H
	ORG $+2
$SG117547 DB	',', 00H
	ORG $+2
$SG119755 DB	'Trying to use unregistered class', 00H
	ORG $+3
$SG111702 DB	'invalid argument', 00H
	ORG $+3
$SG111703 DB	'%s', 00H
	ORG $+1
$SG111706 DB	00H, 00H
	ORG $+2
$SG111704 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.35.32215\include\xmemory', 00H
	ORG $+2
$SG119901 DB	'__luabind_class_map', 00H
$SG111705 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2'
	DB	00H, '2', 00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG111707 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG105666 DB	'class_info_data', 00H
$SG105667 DB	'name', 00H
	ORG $+3
$SG105668 DB	'methods', 00H
$SG105669 DB	'attributes', 00H
	ORG $+1
$SG105670 DB	'class_info', 00H
	ORG $+1
$SG105671 DB	'class_names', 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
PUBLIC	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
PUBLIC	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
PUBLIC	??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &
PUBLIC	??B?$bool_@$0A@@mpl@boost@@QBE_NXZ		; boost::mpl::bool_<0>::operator bool
PUBLIC	?module@luabind@@YA?AVmodule_@1@PAUlua_State@@PBD@Z ; luabind::module
PUBLIC	??$swap@H$0A@@std@@YAXAAH0@Z			; std::swap<int,0>
PUBLIC	??0type_id@luabind@@QAE@ABVtype_info@@@Z	; luabind::type_id::type_id
PUBLIC	?get_classes@class_registry@detail@luabind@@QBEABV?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@XZ ; luabind::detail::class_registry::get_classes
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Min
PUBLIC	?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z ; luabind::detail::class_map::get
PUBLIC	?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
PUBLIC	??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEABQAVclass_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
PUBLIC	??0handle@luabind@@QAE@XZ			; luabind::handle::handle
PUBLIC	??0handle@luabind@@QAE@PAUlua_State@@H@Z	; luabind::handle::handle
PUBLIC	??0handle@luabind@@QAE@ABV01@@Z			; luabind::handle::handle
PUBLIC	??1handle@luabind@@QAE@XZ			; luabind::handle::~handle
PUBLIC	??4handle@luabind@@QAEAAV01@ABV01@@Z		; luabind::handle::operator=
PUBLIC	?swap@handle@luabind@@QAEXAAV12@@Z		; luabind::handle::swap
PUBLIC	?push@handle@luabind@@QBEXPAUlua_State@@@Z	; luabind::handle::push
PUBLIC	?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ; luabind::handle::interpreter
PUBLIC	?replace@handle@luabind@@QAEXPAUlua_State@@H@Z	; luabind::handle::replace
PUBLIC	??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ; std::swap<lua_State *,0>
PUBLIC	?name@class_rep@detail@luabind@@QBEPBDXZ	; luabind::detail::class_rep::name
PUBLIC	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table
PUBLIC	?casts@class_rep@detail@luabind@@QBEABVcast_graph@23@XZ ; luabind::detail::class_rep::casts
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0instance_holder@detail@luabind@@QAE@PAVclass_rep@12@_N@Z ; luabind::detail::instance_holder::instance_holder
PUBLIC	??1instance_holder@detail@luabind@@UAE@XZ	; luabind::detail::instance_holder::~instance_holder
PUBLIC	?get_class@instance_holder@detail@luabind@@QBEPAVclass_rep@23@XZ ; luabind::detail::instance_holder::get_class
PUBLIC	?pointee_const@instance_holder@detail@luabind@@QBE_NXZ ; luabind::detail::instance_holder::pointee_const
PUBLIC	??_Ginstance_holder@detail@luabind@@UAEPAXI@Z	; luabind::detail::instance_holder::`scalar deleting destructor'
PUBLIC	?check_const_pointer@detail@luabind@@YA?AU?$bool_@$0A@@mpl@boost@@PAX@Z ; luabind::detail::check_const_pointer
PUBLIC	?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ ; luabind::detail::object_rep::crep
PUBLIC	?set_instance@object_rep@detail@luabind@@QAEXPAVinstance_holder@23@@Z ; luabind::detail::object_rep::set_instance
PUBLIC	?get_instance@object_rep@detail@luabind@@QBE?AU?$pair@PAXH@std@@I@Z ; luabind::detail::object_rep::get_instance
PUBLIC	?is_const@object_rep@detail@luabind@@QBE_NXZ	; luabind::detail::object_rep::is_const
PUBLIC	?allocate@object_rep@detail@luabind@@QAEPAXI@Z	; luabind::detail::object_rep::allocate
PUBLIC	?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ; luabind::detail::object_rep::deallocate
PUBLIC	??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z ; std::pair<void *,int>::pair<void *,int><void *,int,0>
PUBLIC	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z	; luabind::from_stack::from_stack
PUBLIC	??0index_map@luabind@@QAE@PBH@Z			; luabind::index_map::index_map
PUBLIC	??0value_converter@detail@luabind@@QAE@XZ	; luabind::detail::value_converter::value_converter
PUBLIC	?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ ; luabind::detail::const_ref_converter::consumed_args
PUBLIC	??0const_ref_converter@detail@luabind@@QAE@XZ	; luabind::detail::const_ref_converter::const_ref_converter
PUBLIC	?apply@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEXPAUlua_State@@ABI@Z ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::apply
PUBLIC	?derived@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEAAU?$default_converter@I@2@XZ ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::derived
PUBLIC	?to@?$default_converter@I@luabind@@QAEXPAUlua_State@@ABI@Z ; luabind::default_converter<unsigned int>::to
PUBLIC	??$as_lua_number@I@luabind@@YANI@Z		; luabind::as_lua_number<unsigned int>
PUBLIC	?apply@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::apply
PUBLIC	?derived@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEAAU?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::derived
PUBLIC	?to@?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::to
PUBLIC	?apply@?$default_converter@PBD@luabind@@QAEXPAUlua_State@@PBD@Z ; luabind::default_converter<char const *>::apply
PUBLIC	?consumed_args@?$default_converter@PAUlua_State@@@luabind@@QAA?BHZZ ; luabind::default_converter<lua_State *>::consumed_args
PUBLIC	?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
PUBLIC	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
PUBLIC	??1stack_pop@detail@luabind@@QAE@XZ		; luabind::detail::stack_pop::~stack_pop
PUBLIC	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
PUBLIC	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
PUBLIC	?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z ; luabind::detail::basic_access::get
PUBLIC	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
PUBLIC	??0object@adl@luabind@@QAE@XZ			; luabind::adl::object::object
PUBLIC	??0object@adl@luabind@@QAE@ABVhandle@2@@Z	; luabind::adl::object::object
PUBLIC	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z	; luabind::adl::object::object
PUBLIC	?push@object@adl@luabind@@QBEXPAUlua_State@@@Z	; luabind::adl::object::push
PUBLIC	?interpreter@object@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::object::interpreter
PUBLIC	??1object@adl@luabind@@QAE@XZ			; luabind::adl::object::~object
PUBLIC	??0object@adl@luabind@@QAE@ABV012@@Z		; luabind::adl::object::object
PUBLIC	??0object@adl@luabind@@QAE@$$QAV012@@Z		; luabind::adl::object::object
PUBLIC	??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z	; luabind::adl::object::operator=
PUBLIC	??1?$object_interface@Vargument@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::argument>::~object_interface<luabind::adl::argument>
PUBLIC	??0argument@adl@luabind@@QAE@ABUfrom_stack@2@@Z	; luabind::adl::argument::argument
PUBLIC	?push@argument@adl@luabind@@QBEXPAUlua_State@@@Z ; luabind::adl::argument::push
PUBLIC	?interpreter@argument@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::argument::interpreter
PUBLIC	??1argument@adl@luabind@@QAE@XZ			; luabind::adl::argument::~argument
PUBLIC	?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::interpreter
PUBLIC	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
PUBLIC	?check@?$value_wrapper_traits@Vargument@adl@luabind@@@luabind@@SA_NZZ ; luabind::value_wrapper_traits<luabind::adl::argument>::check
PUBLIC	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
PUBLIC	?ref@wrap_access@detail@luabind@@SAABUwrapped_self_t@3@ABUwrap_base@3@@Z ; luabind::detail::wrap_access::ref
PUBLIC	??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ; luabind::detail::function_object::function_object
PUBLIC	??1function_object@detail@luabind@@UAE@XZ	; luabind::detail::function_object::~function_object
PUBLIC	??_Gfunction_object@detail@luabind@@UAEPAXI@Z	; luabind::detail::function_object::`scalar deleting destructor'
PUBLIC	??0invoke_context@detail@luabind@@QAE@XZ	; luabind::detail::invoke_context::invoke_context
PUBLIC	??Binvoke_context@detail@luabind@@QBE_NXZ	; luabind::detail::invoke_context::operator bool
PUBLIC	?maybe_yield_aux@detail@luabind@@YAHPAUlua_State@@HU?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::maybe_yield_aux
PUBLIC	?sum_scores@detail@luabind@@YAHPBH0@Z		; luabind::detail::sum_scores
PUBLIC	?get@?$type_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::get
PUBLIC	?get@?$type_to_string@Ulua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<lua_State>::get
PUBLIC	?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::object>::get
PUBLIC	?get@?$type_to_string@Vargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument>::get
PUBLIC	?check_link_compatibility@detail@luabind@@YAXXZ	; luabind::detail::check_link_compatibility
PUBLIC	??1class_base@detail@luabind@@QAE@XZ		; luabind::detail::class_base::~class_base
PUBLIC	??0class_info@luabind@@QAE@XZ			; luabind::class_info::class_info
PUBLIC	??1class_info@luabind@@QAE@XZ			; luabind::class_info::~class_info
PUBLIC	??0class_info@luabind@@QAE@ABU01@@Z		; luabind::class_info::class_info
PUBLIC	??0class_info@luabind@@QAE@$$QAU01@@Z		; luabind::class_info::class_info
PUBLIC	??_Gclass_info@luabind@@QAEPAXI@Z		; luabind::class_info::`scalar deleting destructor'
PUBLIC	?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z ; luabind::get_class_info
PUBLIC	?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::get_class_names
PUBLIC	?bind_class_info@luabind@@YAXPAUlua_State@@@Z	; luabind::bind_class_info
PUBLIC	??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::~object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::iterator_proxy<luabind::detail::basic_access>
PUBLIC	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
PUBLIC	??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::operator luabind::adl::object
PUBLIC	?interpreter@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::interpreter
PUBLIC	?push@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAEXPAUlua_State@@@Z ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::push
PUBLIC	??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*
PUBLIC	??E?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@1luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator++
PUBLIC	?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
PUBLIC	?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IBEABV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
PUBLIC	??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access>
PUBLIC	?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::key
PUBLIC	?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::increment
PUBLIC	?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z ; luabind::detail::basic_iterator<luabind::detail::basic_access>::equal
PUBLIC	?dereference@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::dereference
PUBLIC	??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::~basic_iterator<luabind::detail::basic_access>
PUBLIC	??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access><luabind::adl::object>
PUBLIC	??$?9V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@Usingle_pass_traversal_tag@iterators@boost@@V342@HV012@V342@U567@V342@H@iterators@boost@@YA_NABV?$iterator_facade@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H@01@0@Z ; boost::iterators::operator!=<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int>
PUBLIC	??$type@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@YAHABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@0@@Z ; luabind::type<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z ; luabind::adl::object::operator[]<unsigned int>
PUBLIC	??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
PUBLIC	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
PUBLIC	??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>
PUBLIC	??$?AVobject@adl@luabind@@@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABV012@@Z ; luabind::adl::object::operator[]<luabind::adl::object>
PUBLIC	??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::operator++
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<char const *>
PUBLIC	?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info
PUBLIC	??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>
PUBLIC	??0?$static_scope@U?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@@detail@luabind@@QAE@AAU?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@2@@Z ; luabind::detail::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >
PUBLIC	?add_wrapper_cast@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXPAUnull_type@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::add_wrapper_cast
PUBLIC	?init@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXXZ ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::init
PUBLIC	??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::~class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>
PUBLIC	??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,luabind::adl::object>
PUBLIC	??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@Z@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@Z@Z ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &)>
PUBLIC	??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@Z@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@Z@Z ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *)>
PUBLIC	?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
PUBLIC	??$increment@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CAXAAV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@Z ; boost::iterators::iterator_core_access::increment<luabind::detail::basic_iterator<luabind::detail::basic_access> >
PUBLIC	??$dereference@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CA?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@5@@Z ; boost::iterators::iterator_core_access::dereference<luabind::detail::basic_iterator<luabind::detail::basic_access> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Convert_size@II@std@@YAII@Z			; std::_Convert_size<unsigned int,unsigned int>
PUBLIC	??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
PUBLIC	??$generate_baseclass_list@Unull_type@detail@luabind@@U123@U123@U123@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@U?$bases@Unull_type@detail@luabind@@U123@U123@U123@@luabind@@@detail@1@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::generate_baseclass_list<luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
PUBLIC	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
PUBLIC	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z		; std::forward<void *>
PUBLIC	??$equal@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V123@@iterator_core_access@iterators@boost@@CA_NABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@0U?$bool_@$00@mpl@2@@Z ; boost::iterators::iterator_core_access::equal<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::detail::basic_iterator<luabind::detail::basic_access> >
PUBLIC	??$interpreter@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::interpreter<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::unwrap<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><unsigned int>
PUBLIC	??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z ; luabind::detail::push<luabind::adl::object const >
PUBLIC	??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><luabind::adl::object>
PUBLIC	??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >
PUBLIC	??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z ; luabind::detail::push<char const * const>
PUBLIC	??0?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUnull_type@12@22@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
PUBLIC	?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_
PUBLIC	?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
PUBLIC	??1?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
PUBLIC	??_G?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??0?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@Vobject@adl@2@ABUnull_type@12@22@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
PUBLIC	?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_
PUBLIC	?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
PUBLIC	??1?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
PUBLIC	??_G?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
PUBLIC	??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$make_get@Uclass_info@luabind@@Vobject@adl@2@@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V342@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,luabind::adl::object>
PUBLIC	??$make_get@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z ; luabind::adl::object::operator[]<char const *>
PUBLIC	??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z ; luabind::property<luabind::adl::object>
PUBLIC	??$push@$$CBI@detail@luabind@@YAXPAUlua_State@@ABI@Z ; luabind::detail::push<unsigned int const >
PUBLIC	??$push@$$CBVobject@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@ABUnull_type@01@@Z ; luabind::detail::push<luabind::adl::object const ,luabind::detail::null_type>
PUBLIC	??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@ABUnull_type@01@@Z ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::null_type>
PUBLIC	??$push@QBDUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDABUnull_type@01@@Z ; luabind::detail::push<char const * const,luabind::detail::null_type>
PUBLIC	??0?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@QAE@PBDP6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
PUBLIC	?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::register_
PUBLIC	??1?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAE@XZ ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::~function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
PUBLIC	??_G?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
PUBLIC	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
PUBLIC	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
PUBLIC	??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>
PUBLIC	??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
PUBLIC	??0?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@QAE@PBDP6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
PUBLIC	?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::register_
PUBLIC	??1?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAE@XZ ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::~function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
PUBLIC	??_G?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??0?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QAE@PQclass_info@2@Vobject@adl@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>
PUBLIC	??R?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QBE?AVobject@adl@2@ABUclass_info@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::operator()
PUBLIC	??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??0?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QAE@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??R?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
PUBLIC	??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><char const *>
PUBLIC	??$deduce_signature@Vobject@adl@luabind@@PAUlua_State@@@detail@luabind@@YA?AU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@P6A?AVobject@adl@1@PAUlua_State@@@ZZZ ; luabind::detail::deduce_signature<luabind::adl::object,lua_State *>
PUBLIC	??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z ; luabind::make_function<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
PUBLIC	??$deduce_signature@Uclass_info@luabind@@ABVargument@adl@2@@detail@luabind@@YA?AU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@P6A?AUclass_info@1@ABVargument@adl@1@@ZZZ ; luabind::detail::deduce_signature<luabind::class_info,luabind::adl::argument const &>
PUBLIC	??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z ; luabind::make_function<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
PUBLIC	??$push@$$CBIUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIABUnull_type@01@@Z ; luabind::detail::push<unsigned int const ,luabind::detail::null_type>
PUBLIC	??$push_aux@$$CBVobject@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@PAUdefault_policy@01@@Z ; luabind::detail::push_aux<luabind::adl::object const ,luabind::detail::default_policy>
PUBLIC	??$push_aux@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@PAUdefault_policy@01@@Z ; luabind::detail::push_aux<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::default_policy>
PUBLIC	??$push_aux@QBDUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDPAUdefault_policy@01@@Z ; luabind::detail::push_aux<char const * const,luabind::detail::default_policy>
PUBLIC	??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@12@ABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::call
PUBLIC	?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::format_signature
PUBLIC	?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::entry_point
PUBLIC	??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@12@ABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::call
PUBLIC	?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::format_signature
PUBLIC	?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::entry_point
PUBLIC	??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??0?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@QAE@P6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
PUBLIC	?call@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::call
PUBLIC	?format_signature@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::format_signature
PUBLIC	?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::entry_point
PUBLIC	??1?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAE@XZ ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::~function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
PUBLIC	??_G?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??0?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@QAE@P6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
PUBLIC	?call@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::call
PUBLIC	?format_signature@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::format_signature
PUBLIC	?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::entry_point
PUBLIC	??1?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAE@XZ ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::~function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
PUBLIC	??_G?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`scalar deleting destructor'
PUBLIC	??$format_signature@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &> >
PUBLIC	??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
PUBLIC	??$format_signature@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,lua_State *> >
PUBLIC	??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
PUBLIC	??$format_signature@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &> >
PUBLIC	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??$format_signature@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &> >
PUBLIC	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??$push_aux@$$CBIUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIPAUdefault_policy@01@@Z ; luabind::detail::push_aux<unsigned int const ,luabind::detail::default_policy>
PUBLIC	??$implicit_cast@ABVobject@adl@luabind@@@boost@@YAABVobject@adl@luabind@@ABV123@@Z ; boost::implicit_cast<luabind::adl::object const &>
PUBLIC	??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@$$CBVobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::object const >::apply<luabind::adl::object>
PUBLIC	??$implicit_cast@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@boost@@YAABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV123@@Z ; boost::implicit_cast<luabind::adl::iterator_proxy<luabind::detail::basic_access> const &>
PUBLIC	??$apply@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_converter@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >::apply<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
PUBLIC	??$implicit_cast@ABQBD@boost@@YAABQBDABQBD@Z	; boost::implicit_cast<char const * const &>
PUBLIC	?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info>::get
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
PUBLIC	??B?$long_@$01@mpl@boost@@QBEJXZ		; boost::mpl::long_<2>::operator long
PUBLIC	??$invoke0@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@U?$is_void@Uclass_info@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$is_void@Uclass_info@luabind@@@boost@@U?$bool_@$0A@@9boost@@@Z ; luabind::detail::invoke0<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type,boost::is_void<luabind::class_info> >
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
PUBLIC	??$invoke0@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@U?$is_void@Vobject@adl@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@9@U?$bool_@$0A@@89@@Z ; luabind::detail::invoke0<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
PUBLIC	??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
PUBLIC	??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@U?$is_void@Vobject@adl@luabind@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@8@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
PUBLIC	??$implicit_cast@ABI@boost@@YAABIABI@Z		; boost::implicit_cast<unsigned int const &>
PUBLIC	?get@?$type_to_string@ABVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument const &>::get
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
PUBLIC	??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z ; luabind::detail::invoke_normal<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
PUBLIC	?get@?$type_to_string@PAUlua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<lua_State *>::get
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
PUBLIC	??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z ; luabind::detail::invoke_normal<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
PUBLIC	?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info const &>::get
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
PUBLIC	??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
PUBLIC	??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
PUBLIC	?get@?$type_to_string@$$CBUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info const >::get
PUBLIC	?get@?$type_to_string@$$CBVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument const >::get
PUBLIC	??0?$default_converter@Uclass_info@luabind@@@luabind@@QAE@XZ ; luabind::default_converter<luabind::class_info>::default_converter<luabind::class_info>
PUBLIC	?consumed_args@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAA?BHZZ ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::consumed_args
PUBLIC	?converter_postcall@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAAXZZ ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::converter_postcall
PUBLIC	?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::adl::argument const &>::get
PUBLIC	??$match@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@SAHPAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::match<luabind::adl::argument>
PUBLIC	??$apply@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAE?AVargument@adl@2@PAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::apply<luabind::adl::argument>
PUBLIC	??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z ; luabind::detail::value_converter::apply<luabind::class_info>
PUBLIC	??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ; luabind::detail::maybe_yield<luabind::detail::null_type>
PUBLIC	?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ ; luabind::detail::decorated_type<lua_State *>::get
PUBLIC	??$match@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@SAHPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::match<luabind::detail::by_pointer<lua_State> >
PUBLIC	??$apply@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEPAUlua_State@@PAU2@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::apply<luabind::detail::by_pointer<lua_State> >
PUBLIC	??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::object>::apply<luabind::adl::object>
PUBLIC	??$converter_postcall@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEXPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::converter_postcall<luabind::detail::by_pointer<lua_State> >
PUBLIC	??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ ; luabind::default_converter<luabind::class_info const &>::default_converter<luabind::class_info const &>
PUBLIC	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
PUBLIC	??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::match<luabind::class_info>
PUBLIC	??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::apply<luabind::class_info>
PUBLIC	??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::converter_postcall<luabind::class_info>
PUBLIC	??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>
PUBLIC	??$get_back_reference@Uclass_info@luabind@@@luabind@@YA_NPAUlua_State@@ABUclass_info@0@@Z ; luabind::get_back_reference<luabind::class_info>
PUBLIC	??$make_pointee_instance@Uclass_info@luabind@@U?$bool_@$00@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::make_pointee_instance<luabind::class_info,boost::mpl::bool_<1> >
PUBLIC	??$get_back_reference@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@@Z ; luabind::detail::get_back_reference<luabind::class_info>
PUBLIC	??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z ; luabind::detail::make_pointee_instance<luabind::class_info>
PUBLIC	??$get_back_reference_aux2@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_back_reference_aux2<luabind::class_info>
PUBLIC	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@PAUclass_info@luabind@@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
PUBLIC	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
PUBLIC	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ	; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
PUBLIC	?get@?$auto_ptr@Uclass_info@luabind@@@std@@QBEPAUclass_info@luabind@@XZ ; std::auto_ptr<luabind::class_info>::get
PUBLIC	?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ ; std::auto_ptr<luabind::class_info>::release
PUBLIC	??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; luabind::detail::make_instance<std::auto_ptr<luabind::class_info> >
PUBLIC	??$get_back_reference_aux1@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@@Z ; luabind::detail::get_back_reference_aux1<luabind::class_info>
PUBLIC	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
PUBLIC	??$get_dynamic_class@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PAUclass_info@1@@Z ; luabind::detail::get_dynamic_class<luabind::class_info>
PUBLIC	??$get_pointee_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAPAVclass_rep@01@PAUlua_State@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@I@Z ; luabind::detail::get_pointee_class<std::auto_ptr<luabind::class_info> >
PUBLIC	??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::pointer_holder<std::auto_ptr<luabind::class_info>,void const >
PUBLIC	?get@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UBE?AU?$pair@PAXH@std@@I@Z ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::get
PUBLIC	?release@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEXXZ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::release
PUBLIC	??1?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAE@XZ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::~pointer_holder<std::auto_ptr<luabind::class_info>,void const >
PUBLIC	??_G?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`scalar deleting destructor'
PUBLIC	??$release_ownership@Uclass_info@luabind@@@detail@luabind@@YAXAAV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; luabind::detail::release_ownership<luabind::class_info>
PUBLIC	??$?0PAV?$auto_ptr@Uclass_info@luabind@@@std@@H$0A@@?$pair@PAXH@std@@QAE@$$QAPAV?$auto_ptr@Uclass_info@luabind@@@1@$$QAH@Z ; std::pair<void *,int>::pair<void *,int><std::auto_ptr<luabind::class_info> *,int,0>
PUBLIC	??$static_class_id@Uclass_info@luabind@@@detail@luabind@@YAIPAUclass_info@1@@Z ; luabind::detail::static_class_id<luabind::class_info>
PUBLIC	??$get_back_reference_aux0@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_back_reference_aux0<luabind::class_info>
PUBLIC	??$get_dynamic_class_aux@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_dynamic_class_aux<luabind::class_info>
PUBLIC	??$get_pointee_class@Uclass_info@luabind@@@detail@luabind@@YAPAVclass_rep@01@ABVclass_map@01@PAUclass_info@1@@Z ; luabind::detail::get_pointee_class<luabind::class_info>
PUBLIC	??$forward@PAV?$auto_ptr@Uclass_info@luabind@@@std@@@std@@YA$$QAPAV?$auto_ptr@Uclass_info@luabind@@@0@AAPAV10@@Z ; std::forward<std::auto_ptr<luabind::class_info> *>
PUBLIC	??$make_pair@ABIPAX@std@@YA?AU?$pair@IPAX@0@ABI$$QAPAX@Z ; std::make_pair<unsigned int const &,void *>
PUBLIC	??$forward@ABI@std@@YAABIABI@Z			; std::forward<unsigned int const &>
PUBLIC	??$?0ABIPAX$0A@@?$pair@IPAX@std@@QAE@ABI$$QAPAX@Z ; std::pair<unsigned int,void *>::pair<unsigned int,void *><unsigned int const &,void *,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R0?AUnull_type@detail@luabind@@@8		; luabind::detail::null_type `RTTI Type Descriptor'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7instance_holder@detail@luabind@@6B@		; luabind::detail::instance_holder::`vftable'
PUBLIC	??_7function_object@detail@luabind@@6B@		; luabind::detail::function_object::`vftable'
PUBLIC	??_C@_0M@OOBHPBL@std?3?3string@			; `string'
PUBLIC	??_C@_09OKOGDPMI@lua_State@			; `string'
PUBLIC	??_C@_0BA@OBLMPGNH@luabind?3?3object@		; `string'
PUBLIC	??_C@_0BC@BCFALIOM@luabind?3?3argument@		; `string'
PUBLIC	??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ ; `string'
PUBLIC	??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@NEMOGBCE@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BDGGHEJF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_R0?AUclass_info@luabind@@@8			; luabind::class_info `RTTI Type Descriptor'
PUBLIC	?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id
PUBLIC	?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::detail::null_type>::id
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_7?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vftable'
PUBLIC	??_7?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vftable'
PUBLIC	?data@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4QBDB ;  ?? ::QBDB::mpl::XZ::`boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &'::`2'::data
PUBLIC	?pdata@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4PBXB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &'::`2'::pdata
PUBLIC	??_7?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`vftable'
PUBLIC	??_7?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`vftable'
PUBLIC	??_C@_1JE@NFMGCHJI@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ ; `string'
PUBLIC	??_C@_1DK@GHMJFKK@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`vftable'
PUBLIC	??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`vftable'
PUBLIC	??_7?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`vftable'
PUBLIC	??_7?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`vftable'
PUBLIC	?data@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4QBDB ;  ?? ::QBDB::mpl::XZ::`boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &'::`2'::data
PUBLIC	?pdata@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4PBXB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &'::`2'::pdata
PUBLIC	??_C@_01HNPIGOCE@?$CG@				; `string'
PUBLIC	??_C@_06PODBGOLO@?5const@			; `string'
PUBLIC	?t@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@2U?$by_const_reference@Vargument@adl@luabind@@@23@A ; luabind::detail::decorated_type<luabind::adl::argument const &>::t
PUBLIC	?t@?$decorated_type@PAUlua_State@@@detail@luabind@@2U?$by_pointer@Ulua_State@@@23@A ; luabind::detail::decorated_type<lua_State *>::t
PUBLIC	?t@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@2U?$by_const_reference@Uclass_info@luabind@@@23@A ; luabind::detail::decorated_type<luabind::class_info const &>::t
PUBLIC	??_7?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`vftable'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB ; luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id
PUBLIC	??_R0?AV?$auto_ptr@Uclass_info@luabind@@@std@@@8 ; std::auto_ptr<luabind::class_info> `RTTI Type Descriptor'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4instance_holder@detail@luabind@@6B@	; luabind::detail::instance_holder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVinstance_holder@detail@luabind@@@8	; luabind::detail::instance_holder `RTTI Type Descriptor'
PUBLIC	??_R3instance_holder@detail@luabind@@8		; luabind::detail::instance_holder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2instance_holder@detail@luabind@@8		; luabind::detail::instance_holder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@instance_holder@detail@luabind@@8	; luabind::detail::instance_holder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4function_object@detail@luabind@@6B@	; luabind::detail::function_object::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUfunction_object@detail@luabind@@@8	; luabind::detail::function_object `RTTI Type Descriptor'
PUBLIC	??_R3function_object@detail@luabind@@8		; luabind::detail::function_object::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2function_object@detail@luabind@@8		; luabind::detail::function_object::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@function_object@detail@luabind@@8	; luabind::detail::function_object::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@registration@detail@luabind@@8	; luabind::detail::registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUregistration@detail@luabind@@@8		; luabind::detail::registration `RTTI Type Descriptor'
PUBLIC	??_R3registration@detail@luabind@@8		; luabind::detail::registration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2registration@detail@luabind@@8		; luabind::detail::registration::`RTTI Base Class Array'
PUBLIC	??_R4?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type> `RTTI Type Descriptor'
PUBLIC	??_R3?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const > `RTTI Type Descriptor'
PUBLIC	??_R3?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_typename:PROC
EXTRN	_lua_equal:PROC
EXTRN	_lua_tocfunction:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_settable:PROC
EXTRN	_lua_rawseti:PROC
EXTRN	_lua_error:PROC
EXTRN	_lua_next:PROC
EXTRN	_lua_concat:PROC
EXTRN	_luaL_ref:PROC
EXTRN	_luaL_unref:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__wassert:PROC
EXTRN	??0registration@detail@luabind@@QAE@XZ:PROC	; luabind::detail::registration::registration
EXTRN	??1registration@detail@luabind@@UAE@XZ:PROC	; luabind::detail::registration::~registration
EXTRN	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z:PROC ; luabind::scope::scope
EXTRN	??0scope@luabind@@QAE@ABU01@@Z:PROC		; luabind::scope::scope
EXTRN	??1scope@luabind@@QAE@XZ:PROC			; luabind::scope::~scope
EXTRN	??Qscope@luabind@@QAEAAU01@U01@@Z:PROC		; luabind::scope::operator,
EXTRN	??0module_@luabind@@QAE@PAUlua_State@@PBD@Z:PROC ; luabind::module_::module_
EXTRN	??Amodule_@luabind@@QAEXUscope@1@@Z:PROC	; luabind::module_::operator[]
EXTRN	?get@weak_ref@luabind@@QBEXPAUlua_State@@@Z:PROC ; luabind::weak_ref::get
EXTRN	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z:PROC ; luabind::detail::class_registry::get_registry
EXTRN	?cast@cast_graph@detail@luabind@@QBE?AU?$pair@PAXH@std@@PAXIIIPBX@Z:PROC ; luabind::detail::cast_graph::cast
EXTRN	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z:PROC ; luabind::detail::allocate_class_id
EXTRN	?property_tag@detail@luabind@@YAHPAUlua_State@@@Z:PROC ; luabind::detail::property_tag
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Einstance_holder@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::instance_holder::`vector deleting destructor'
EXTRN	?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z:PROC ; luabind::detail::get_instance
EXTRN	?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z:PROC ; luabind::detail::push_new_instance
EXTRN	??_Efunction_object@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_object::`vector deleting destructor'
EXTRN	?format_error@invoke_context@detail@luabind@@QBEXPAUlua_State@@PBUfunction_object@23@@Z:PROC ; luabind::detail::invoke_context::format_error
EXTRN	?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z:PROC ; luabind::detail::get_class_name
EXTRN	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z:PROC ; luabind::detail::handle_exception_aux
EXTRN	?make_function_aux@detail@luabind@@YA?AVobject@adl@2@PAUlua_State@@PAUfunction_object@12@@Z:PROC ; luabind::detail::make_function_aux
EXTRN	?add_overload@detail@luabind@@YAXABVobject@adl@2@PBD0@Z:PROC ; luabind::detail::add_overload
EXTRN	?not_threadsafe_not_defined_conflict@detail@luabind@@YAXXZ:PROC ; luabind::detail::not_threadsafe_not_defined_conflict
EXTRN	?no_error_checking_not_defined_conflict@detail@luabind@@YAXXZ:PROC ; luabind::detail::no_error_checking_not_defined_conflict
EXTRN	??0class_base@detail@luabind@@QAE@PBD@Z:PROC	; luabind::detail::class_base::class_base
EXTRN	?init@class_base@detail@luabind@@QAEXABVtype_id@3@I0I@Z:PROC ; luabind::detail::class_base::init
EXTRN	?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z:PROC ; luabind::detail::class_base::add_member
EXTRN	??_E?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`vector deleting destructor'
EXTRN	??_E?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z:PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init
?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init_if
_BSS	ENDS
;	COMDAT ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB
_BSS	SEGMENT
?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB DD 01H DUP (?) ; luabind::detail::registered_class<luabind::class_info>::id
_BSS	ENDS
;	COMDAT ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB
_BSS	SEGMENT
?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB DD 01H DUP (?) ; luabind::detail::registered_class<luabind::detail::null_type>::id
_BSS	ENDS
;	COMDAT ?t@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@2U?$by_const_reference@Vargument@adl@luabind@@@23@A
_BSS	SEGMENT
?t@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@2U?$by_const_reference@Vargument@adl@luabind@@@23@A DB 01H DUP (?) ; luabind::detail::decorated_type<luabind::adl::argument const &>::t
_BSS	ENDS
;	COMDAT ?t@?$decorated_type@PAUlua_State@@@detail@luabind@@2U?$by_pointer@Ulua_State@@@23@A
_BSS	SEGMENT
?t@?$decorated_type@PAUlua_State@@@detail@luabind@@2U?$by_pointer@Ulua_State@@@23@A DB 01H DUP (?) ; luabind::detail::decorated_type<lua_State *>::t
_BSS	ENDS
;	COMDAT ?t@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@2U?$by_const_reference@Uclass_info@luabind@@@23@A
_BSS	SEGMENT
?t@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@2U?$by_const_reference@Uclass_info@luabind@@@23@A DB 01H DUP (?) ; luabind::detail::decorated_type<luabind::class_info const &>::t
_BSS	ENDS
;	COMDAT ?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB
_BSS	SEGMENT
?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB DD 01H DUP (?) ; luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id
_BSS	ENDS
CRT$XCU	SEGMENT
?in_place_init$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 DD FLAT:??_R0?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@instance_holder@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8 DD 00H ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@s'
	DB	'td@@$$CBX@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@ DD 00H ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@@8
	DD	FLAT:??_R3?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8 DD 00H ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABV'
	DB	'argument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@'
	DB	'adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8 DD 00H ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAU'
	DB	'lua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@m'
	DB	'pl@boost@@Unull_type@detail@3@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD 00H ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_object_impl@U?$access_member_ptr@Uclass_i'
	DB	'nfo@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$alloca'
	DB	'tor@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string'
	DB	'@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@'
	DB	'luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8 DD 00H ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_object_impl@U?$access_member_ptr@Uclass_i'
	DB	'nfo@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@V'
	DB	'object@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23'
	DB	'@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8 DD 00H ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_registration@P6A?AVobject@adl@luabind@@PA'
	DB	'Ulua_State@@@ZUnull_type@detail@3@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 DD FLAT:??_R0?AU?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8 DD 00H ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$function_registration@P6A?AUclass_info@luabind@@AB'
	DB	'Vargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@ DD 00H ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@@8
	DD	FLAT:??_R3?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD FLAT:??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD 00H ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$property_registration@Uclass_info@luabind@@PQ12@Vo'
	DB	'bject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ DD 00H ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@@8
	DD	FLAT:??_R3?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2registration@detail@luabind@@8
rdata$r	SEGMENT
??_R2registration@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8 ; luabind::detail::registration::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3registration@detail@luabind@@8
rdata$r	SEGMENT
??_R3registration@detail@luabind@@8 DD 00H		; luabind::detail::registration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUregistration@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AUregistration@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::registration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUregistration@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@registration@detail@luabind@@8 DD FLAT:??_R0?AUregistration@detail@luabind@@@8 ; luabind::detail::registration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD FLAT:??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R2?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@registration@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R3?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	SEGMENT
??_R3?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8 DD 00H ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$property_registration@Uclass_info@luabind@@PQ12@V?'
	DB	'$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U'
	DB	'null_type@detail@2@U562@U562@@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ DD 00H ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@@8
	DD	FLAT:??_R3?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@function_object@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@function_object@detail@luabind@@8 DD FLAT:??_R0?AUfunction_object@detail@luabind@@@8 ; luabind::detail::function_object::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2function_object@detail@luabind@@8
rdata$r	SEGMENT
??_R2function_object@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@function_object@detail@luabind@@8 ; luabind::detail::function_object::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3function_object@detail@luabind@@8
rdata$r	SEGMENT
??_R3function_object@detail@luabind@@8 DD 00H		; luabind::detail::function_object::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUfunction_object@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AUfunction_object@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::function_object `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUfunction_object@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4function_object@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4function_object@detail@luabind@@6B@ DD 00H		; luabind::detail::function_object::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUfunction_object@detail@luabind@@@8
	DD	FLAT:??_R3function_object@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@instance_holder@detail@luabind@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@instance_holder@detail@luabind@@8 DD FLAT:??_R0?AVinstance_holder@detail@luabind@@@8 ; luabind::detail::instance_holder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3instance_holder@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R2instance_holder@detail@luabind@@8
rdata$r	SEGMENT
??_R2instance_holder@detail@luabind@@8 DD FLAT:??_R1A@?0A@EA@instance_holder@detail@luabind@@8 ; luabind::detail::instance_holder::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3instance_holder@detail@luabind@@8
rdata$r	SEGMENT
??_R3instance_holder@detail@luabind@@8 DD 00H		; luabind::detail::instance_holder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2instance_holder@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVinstance_holder@detail@luabind@@@8
data$rs	SEGMENT
??_R0?AVinstance_holder@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::instance_holder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVinstance_holder@detail@luabind@@', 00H
data$rs	ENDS
;	COMDAT ??_R4instance_holder@detail@luabind@@6B@
rdata$r	SEGMENT
??_R4instance_holder@detail@luabind@@6B@ DD 00H		; luabind::detail::instance_holder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVinstance_holder@detail@luabind@@@8
	DD	FLAT:??_R3instance_holder@detail@luabind@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$auto_ptr@Uclass_info@luabind@@@std@@@8
data$r	SEGMENT
??_R0?AV?$auto_ptr@Uclass_info@luabind@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::auto_ptr<luabind::class_info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$auto_ptr@Uclass_info@luabind@@@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_7?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@
CONST	SEGMENT
??_7?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@ DD FLAT:??_R4?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@ ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`vftable'
	DD	FLAT:??_E?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?get@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UBE?AU?$pair@PAXH@std@@I@Z
	DD	FLAT:?release@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_06PODBGOLO@?5const@
CONST	SEGMENT
??_C@_06PODBGOLO@?5const@ DB ' const', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG@ DB '&', 00H			; `string'
CONST	ENDS
;	COMDAT ?pdata@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4PBXB
_DATA	SEGMENT
?pdata@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4PBXB DD FLAT:?data@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4QBDB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &'::`2'::pdata
_DATA	ENDS
;	COMDAT ?data@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4QBDB
CONST	SEGMENT
?data@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4QBDB	ORG $+4 ;  ?? ::QBDB::mpl::XZ::`boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &'::`2'::data
CONST	ENDS
;	COMDAT ??_7?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@ DD FLAT:??_R4?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?call@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
	DD	FLAT:?format_signature@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
CONST	ENDS
;	COMDAT ??_7?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@ DD FLAT:??_R4?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?call@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
	DD	FLAT:?format_signature@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
CONST	ENDS
;	COMDAT ??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ DD FLAT:??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
	DD	FLAT:?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
CONST	ENDS
;	COMDAT ??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ DD FLAT:??_R4?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@ ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
	DD	FLAT:?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
CONST	ENDS
;	COMDAT ??_C@_1DK@GHMJFKK@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1DK@GHMJFKK@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'i'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'm', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@NFMGCHJI@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
CONST	SEGMENT
??_C@_1JE@NFMGCHJI@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H, 'e', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	'\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n', 00H, '_'
	DB	00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9', 00H, '.'
	DB	00H, '1', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '\', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'h', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@ DD FLAT:??_R4?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z
CONST	ENDS
;	COMDAT ??_7?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@ DD FLAT:??_R4?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@ ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z
CONST	ENDS
;	COMDAT ?pdata@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4PBXB
_DATA	SEGMENT
?pdata@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4PBXB DD FLAT:?data@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4QBDB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &'::`2'::pdata
_DATA	ENDS
;	COMDAT ?data@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4QBDB
CONST	SEGMENT
?data@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4QBDB	ORG $+4 ;  ?? ::QBDB::mpl::XZ::`boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &'::`2'::data
CONST	ENDS
;	COMDAT ??_7?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ DD FLAT:??_R4?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
CONST	ENDS
;	COMDAT ??_7?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@
CONST	SEGMENT
??_7?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ DD FLAT:??_R4?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@ ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`vftable'
	DD	FLAT:??_E?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z
	DD	FLAT:?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0?AUclass_info@luabind@@@8
data$r	SEGMENT
??_R0?AUclass_info@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::class_info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUclass_info@luabind@@', 00H
data$r	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BDGGHEJF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BDGGHEJF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@NEMOGBCE@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@NEMOGBCE@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'35.32215\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
CONST	SEGMENT
??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ DB 'cannot incre'
	DB	'ment end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'35.32215\include\xtree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BCFALIOM@luabind?3?3argument@
CONST	SEGMENT
??_C@_0BC@BCFALIOM@luabind?3?3argument@ DB 'luabind::argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBLMPGNH@luabind?3?3object@
CONST	SEGMENT
??_C@_0BA@OBLMPGNH@luabind?3?3object@ DB 'luabind::object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKOGDPMI@lua_State@
CONST	SEGMENT
??_C@_09OKOGDPMI@lua_State@ DB 'lua_State', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOBHPBL@std?3?3string@
CONST	SEGMENT
??_C@_0M@OOBHPBL@std?3?3string@ DB 'std::string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7function_object@detail@luabind@@6B@
CONST	SEGMENT
??_7function_object@detail@luabind@@6B@ DD FLAT:??_R4function_object@detail@luabind@@6B@ ; luabind::detail::function_object::`vftable'
	DD	FLAT:??_Efunction_object@detail@luabind@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7instance_holder@detail@luabind@@6B@
CONST	SEGMENT
??_7instance_holder@detail@luabind@@6B@ DD FLAT:??_R4instance_holder@detail@luabind@@6B@ ; luabind::detail::instance_holder::`vftable'
	DD	FLAT:??_Einstance_holder@detail@luabind@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R0?AUnull_type@detail@luabind@@@8
data$r	SEGMENT
??_R0?AUnull_type@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::null_type `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUnull_type@detail@luabind@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'35.32215\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z$0
__ehfuncinfo$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$0
__tryblocktable$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$4
__unwindtable$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	025H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z$1
__ehfuncinfo$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0
__ehfuncinfo$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z$0
__ehfuncinfo$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z$0
__ehfuncinfo$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02fH
	DW	0241H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z$0
__ehfuncinfo$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z$0
__ehfuncinfo$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	02eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	032H
	DW	02a9H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z$1
__ehfuncinfo$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
	DB	062H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$0
__unwindtable$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$2
__ehfuncinfo$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$0
__unwindtable$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$2
__ehfuncinfo$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$0
__unwindtable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$2
__ehfuncinfo$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$0
__unwindtable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$2
__ehfuncinfo$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z$0
__ehfuncinfo$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z$0
__ehfuncinfo$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z$0
__ehfuncinfo$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z$0
__ehfuncinfo$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z$0
__ehfuncinfo$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z$1
__ehfuncinfo$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z$1
__ehfuncinfo$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z$0
__ehfuncinfo$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	025H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z$1
__ehfuncinfo$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	025H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z$1
__ehfuncinfo$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$1
__ehfuncinfo$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$1
__ehfuncinfo$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$1
__ehfuncinfo$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$1
__ehfuncinfo$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z$0
__ehfuncinfo$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z$0
__ehfuncinfo$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z$0
__ehfuncinfo$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z$0
__ehfuncinfo$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z$0
__ehfuncinfo$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z$0
__ehfuncinfo$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z$0
__ehfuncinfo$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	044H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$5
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z$0
__ehfuncinfo$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$2
__ehfuncinfo$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ$0
__ehfuncinfo$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ$0
__ehfuncinfo$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z$0
__ehfuncinfo$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$0
	DD	02eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$0
	DD	026H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$0
	DD	0ceH
	DD	0dbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z
	DD	031H
	DD	05dcH
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$3
__ehfuncinfo$?bind_class_info@luabind@@YAXPAUlua_State@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?bind_class_info@luabind@@YAXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?bind_class_info@luabind@@YAXPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$3
__unwindtable$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$10
	DD	08H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$11
	DD	0aH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$12
	DD	08H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$15
	DD	0dH
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$18
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0class_info@luabind@@QAE@$$QAU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@$$QAU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@$$QAU01@@Z$1
__ehfuncinfo$??0class_info@luabind@@QAE@$$QAU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0class_info@luabind@@QAE@$$QAU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0class_info@luabind@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@ABU01@@Z$1
__ehfuncinfo$??0class_info@luabind@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0class_info@luabind@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0class_info@luabind@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_info@luabind@@QAE@XZ$1
__ehfuncinfo$??0class_info@luabind@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0class_info@luabind@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z$0
__ehfuncinfo$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$0
__ehfuncinfo$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0object@adl@luabind@@QAE@$$QAV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0object@adl@luabind@@QAE@$$QAV012@@Z$0
__ehfuncinfo$??0object@adl@luabind@@QAE@$$QAV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0object@adl@luabind@@QAE@$$QAV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0object@adl@luabind@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0object@adl@luabind@@QAE@ABV012@@Z$0
__ehfuncinfo$??0object@adl@luabind@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0object@adl@luabind@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z$0
__ehfuncinfo$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0object@adl@luabind@@QAE@ABVhandle@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0object@adl@luabind@@QAE@ABVhandle@2@@Z$0
__ehfuncinfo$??0object@adl@luabind@@QAE@ABVhandle@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0object@adl@luabind@@QAE@ABVhandle@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0object@adl@luabind@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0object@adl@luabind@@QAE@XZ$0
__ehfuncinfo$??0object@adl@luabind@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0object@adl@luabind@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4handle@luabind@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4handle@luabind@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4handle@luabind@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4handle@luabind@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?in_place_init_if$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init_if@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init_if$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB@@YAXXZ ; ??id$initializer$@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ ; ??id$initializer$@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB@@YAXXZ ; ??id$initializer$@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0ABIPAX$0A@@?$pair@IPAX@std@@QAE@ABI$$QAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABIPAX$0A@@?$pair@IPAX@std@@QAE@ABI$$QAPAX@Z PROC	; std::pair<unsigned int,void *>::pair<unsigned int,void *><unsigned int const &,void *,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z	; std::forward<void *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABIPAX$0A@@?$pair@IPAX@std@@QAE@ABI$$QAPAX@Z ENDP	; std::pair<unsigned int,void *>::pair<unsigned int,void *><unsigned int const &,void *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABI@std@@YAABIABI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABI@std@@YAABIABI@Z PROC			; std::forward<unsigned int const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABI@std@@YAABIABI@Z ENDP			; std::forward<unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$make_pair@ABIPAX@std@@YA?AU?$pair@IPAX@0@ABI$$QAPAX@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@ABIPAX@std@@YA?AU?$pair@IPAX@0@ABI$$QAPAX@Z PROC ; std::make_pair<unsigned int const &,void *>, COMDAT

; 444  :         is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 445  :     // return pair composed from arguments
; 446  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 447  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z	; std::forward<void *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val1$[ebp]
	push	ecx
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABIPAX$0A@@?$pair@IPAX@std@@QAE@ABI$$QAPAX@Z ; std::pair<unsigned int,void *>::pair<unsigned int,void *><unsigned int const &,void *,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 448  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$make_pair@ABIPAX@std@@YA?AU?$pair@IPAX@0@ABI$$QAPAX@Z ENDP ; std::make_pair<unsigned int const &,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@PAV?$auto_ptr@Uclass_info@luabind@@@std@@@std@@YA$$QAPAV?$auto_ptr@Uclass_info@luabind@@@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAV?$auto_ptr@Uclass_info@luabind@@@std@@@std@@YA$$QAPAV?$auto_ptr@Uclass_info@luabind@@@0@AAPAV10@@Z PROC ; std::forward<std::auto_ptr<luabind::class_info> *>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@PAV?$auto_ptr@Uclass_info@luabind@@@std@@@std@@YA$$QAPAV?$auto_ptr@Uclass_info@luabind@@@0@AAPAV10@@Z ENDP ; std::forward<std::auto_ptr<luabind::class_info> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ??__E?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB@@YAXXZ
text$di	SEGMENT
$T1 = -4						; size = 4
??__E?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB@@YAXXZ PROC ; `dynamic initializer for 'luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id'', COMDAT

; 159  : class_id const registered_class<T>::id = allocate_class_id(typeid(T));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	push	OFFSET ??_R0?AV?$auto_ptr@Uclass_info@luabind@@@std@@@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z ; luabind::detail::allocate_class_id
	add	esp, 4
	mov	DWORD PTR ?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB, eax ; luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB@@YAXXZ ENDP ; `dynamic initializer for 'luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\make_instance.hpp
;	COMDAT ??$get_pointee_class@Uclass_info@luabind@@@detail@luabind@@YAPAVclass_rep@01@ABVclass_map@01@PAUclass_info@1@@Z
_TEXT	SEGMENT
_classes$ = 8						; size = 4
___formal$ = 12						; size = 4
??$get_pointee_class@Uclass_info@luabind@@@detail@luabind@@YAPAVclass_rep@01@ABVclass_map@01@PAUclass_info@1@@Z PROC ; luabind::detail::get_pointee_class<luabind::class_info>, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   :     return classes.get(registered_class<T>::id);

	mov	eax, DWORD PTR ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id
	push	eax
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z ; luabind::detail::class_map::get

; 49   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$get_pointee_class@Uclass_info@luabind@@@detail@luabind@@YAPAVclass_rep@01@ABVclass_map@01@PAUclass_info@1@@Z ENDP ; luabind::detail::get_pointee_class<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\make_instance.hpp
;	COMDAT ??$get_dynamic_class_aux@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
_p$ = 16						; size = 4
___formal$ = 20						; size = 1
??$get_dynamic_class_aux@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z PROC ; luabind::detail::get_dynamic_class_aux<luabind::class_info>, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 36   :     return std::make_pair(registered_class<T>::id, (void*)p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	OFFSET ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$make_pair@ABIPAX@std@@YA?AU?$pair@IPAX@0@ABI$$QAPAX@Z ; std::make_pair<unsigned int const &,void *>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 37   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_dynamic_class_aux@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ENDP ; luabind::detail::get_dynamic_class_aux<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\back_reference.hpp
;	COMDAT ??$get_back_reference_aux0@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
??$get_back_reference_aux0@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z PROC ; luabind::detail::get_back_reference_aux0<luabind::class_info>, COMDAT

; 48   :   {

	push	ebp
	mov	ebp, esp

; 49   :       return 0;

	xor	eax, eax

; 50   :   }

	pop	ebp
	ret	0
??$get_back_reference_aux0@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ENDP ; luabind::detail::get_back_reference_aux0<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ??$static_class_id@Uclass_info@luabind@@@detail@luabind@@YAIPAUclass_info@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$static_class_id@Uclass_info@luabind@@@detail@luabind@@YAIPAUclass_info@1@@Z PROC ; luabind::detail::static_class_id<luabind::class_info>, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp

; 75   :     return registered_class<T>::id;

	mov	eax, DWORD PTR ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id

; 76   : }

	pop	ebp
	ret	0
??$static_class_id@Uclass_info@luabind@@@detail@luabind@@YAIPAUclass_info@1@@Z ENDP ; luabind::detail::static_class_id<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0PAV?$auto_ptr@Uclass_info@luabind@@@std@@H$0A@@?$pair@PAXH@std@@QAE@$$QAPAV?$auto_ptr@Uclass_info@luabind@@@1@$$QAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAV?$auto_ptr@Uclass_info@luabind@@@std@@H$0A@@?$pair@PAXH@std@@QAE@$$QAPAV?$auto_ptr@Uclass_info@luabind@@@1@$$QAH@Z PROC ; std::pair<void *,int>::pair<void *,int><std::auto_ptr<luabind::class_info> *,int,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAV?$auto_ptr@Uclass_info@luabind@@@std@@@std@@YA$$QAPAV?$auto_ptr@Uclass_info@luabind@@@0@AAPAV10@@Z ; std::forward<std::auto_ptr<luabind::class_info> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAV?$auto_ptr@Uclass_info@luabind@@@std@@H$0A@@?$pair@PAXH@std@@QAE@$$QAPAV?$auto_ptr@Uclass_info@luabind@@@1@$$QAH@Z ENDP ; std::pair<void *,int>::pair<void *,int><std::auto_ptr<luabind::class_info> *,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ??$release_ownership@Uclass_info@luabind@@@detail@luabind@@YAXAAV?$auto_ptr@Uclass_info@luabind@@@std@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??$release_ownership@Uclass_info@luabind@@@detail@luabind@@YAXAAV?$auto_ptr@Uclass_info@luabind@@@std@@@Z PROC ; luabind::detail::release_ownership<luabind::class_info>, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp

; 62   :     p.release();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ ; std::auto_ptr<luabind::class_info>::release

; 63   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$release_ownership@Uclass_info@luabind@@@detail@luabind@@YAXAAV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ENDP ; luabind::detail::release_ownership<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAE@XZ PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::~pointer_holder<std::auto_ptr<luabind::class_info>,void const >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1instance_holder@detail@luabind@@UAE@XZ ; luabind::detail::instance_holder::~instance_holder
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAE@XZ ENDP ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::~pointer_holder<std::auto_ptr<luabind::class_info>,void const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ?release@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEXXZ PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::release, COMDAT
; _this$ = ecx

; 113  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 114  :         weak = const_cast<void*>(static_cast<void const*>(

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 115  :             get_pointer(p)));
; 116  :         release_ownership(p);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$release_ownership@Uclass_info@luabind@@@detail@luabind@@YAXAAV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; luabind::detail::release_ownership<luabind::class_info>
	add	esp, 4

; 117  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UAEXXZ ENDP ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ?get@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UBE?AU?$pair@PAXH@std@@I@Z
_TEXT	SEGMENT
tv132 = -32						; size = 4
tv75 = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
_naked_ptr$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_target$ = 12						; size = 4
?get@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UBE?AU?$pair@PAXH@std@@I@Z PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::get, COMDAT
; _this$ = ecx

; 93   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 94   :         if (target == registered_class<P>::id)

	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR ?id@?$registered_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@2IB ; luabind::detail::registered_class<std::auto_ptr<luabind::class_info> >::id
	jne	SHORT $LN2@get

; 95   :             return std::pair<void*, int>(&this->p, 0);

	mov	DWORD PTR $T4[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T3[ebp], ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAV?$auto_ptr@Uclass_info@luabind@@@std@@H$0A@@?$pair@PAXH@std@@QAE@$$QAPAV?$auto_ptr@Uclass_info@luabind@@@1@$$QAH@Z ; std::pair<void *,int>::pair<void *,int><std::auto_ptr<luabind::class_info> *,int,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@get
$LN2@get:

; 96   : 
; 97   :         void* naked_ptr = const_cast<void*>(static_cast<void const*>(

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@get
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@get
$LN5@get:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	mov	DWORD PTR tv75[ebp], eax
$LN6@get:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _naked_ptr$[ebp], edx

; 98   :             weak ? weak : get_pointer(p)));
; 99   : 
; 100  :         if (!naked_ptr)

	cmp	DWORD PTR _naked_ptr$[ebp], 0
	jne	SHORT $LN3@get

; 101  :             return std::pair<void*, int>((void*)0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z ; std::pair<void *,int>::pair<void *,int><void *,int,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@get
$LN3@get:

; 102  : 
; 103  :         return get_class()->casts().cast(

	xor	edx, edx
	je	SHORT $LN7@get
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN8@get
$LN7@get:
	mov	DWORD PTR tv132[ebp], 0
$LN8@get:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$static_class_id@Uclass_info@luabind@@@detail@luabind@@YAIPAUclass_info@1@@Z ; luabind::detail::static_class_id<luabind::class_info>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _naked_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_class@instance_holder@detail@luabind@@QBEPAVclass_rep@23@XZ ; luabind::detail::instance_holder::get_class
	mov	ecx, eax
	call	?casts@class_rep@detail@luabind@@QBEABVcast_graph@23@XZ ; luabind::detail::class_rep::casts
	mov	ecx, eax
	call	?cast@cast_graph@detail@luabind@@QBE?AU?$pair@PAXH@std@@PAXIIIPBX@Z ; luabind::detail::cast_graph::cast
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@get:

; 104  :             naked_ptr
; 105  :           , static_class_id(false ? get_pointer(p) : 0)
; 106  :           , target
; 107  :           , dynamic_id
; 108  :           , dynamic_ptr
; 109  :         );
; 110  :     }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?get@?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@UBE?AU?$pair@PAXH@std@@I@Z ENDP ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_dynamic_id$ = 12					; size = 4
_dynamic_ptr$ = 16					; size = 4
_cls$ = 20						; size = 4
??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z PROC ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::pointer_holder<std::auto_ptr<luabind::class_info>,void const >, COMDAT
; _this$ = ecx

; 90   :     {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 85   :       : instance_holder(cls, check_const_pointer(false ? get_pointer(p) : 0))

	xor	eax, eax
	je	SHORT $LN3@pointer_ho
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@pointer_ho
$LN3@pointer_ho:
	mov	DWORD PTR tv75[ebp], 0
$LN4@pointer_ho:
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	call	?check_const_pointer@detail@luabind@@YA?AU?$bool_@$0A@@mpl@boost@@PAX@Z ; luabind::detail::check_const_pointer
	add	esp, 4
	mov	BYTE PTR $T2[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??B?$bool_@$0A@@mpl@boost@@QBE_NXZ	; boost::mpl::bool_<0>::operator bool
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _cls$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0instance_holder@detail@luabind@@QAE@PAVclass_rep@12@_N@Z ; luabind::detail::instance_holder::instance_holder

; 90   :     {}

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@6B@

; 86   :       , p(p)

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>

; 87   :       , weak(0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 88   :       , dynamic_id(dynamic_id)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dynamic_id$[ebp]
	mov	DWORD PTR [edx+20], eax

; 89   :       , dynamic_ptr(dynamic_ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dynamic_ptr$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 90   :     {}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z$0:
	lea	ecx, DWORD PTR _p$[ebp]
	jmp	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z ENDP ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::pointer_holder<std::auto_ptr<luabind::class_info>,void const >
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\make_instance.hpp
;	COMDAT ??$get_pointee_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAPAVclass_rep@01@PAUlua_State@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@I@Z
_TEXT	SEGMENT
_cls$ = -8						; size = 4
_classes$ = -4						; size = 4
_L$ = 8							; size = 4
_p$ = 12						; size = 4
_dynamic_id$ = 16					; size = 4
??$get_pointee_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAPAVclass_rep@01@PAUlua_State@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@I@Z PROC ; luabind::detail::get_pointee_class<std::auto_ptr<luabind::class_info> >, COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 54   :     lua_pushliteral(L, "__luabind_class_map");

	push	19					; 00000013H
	push	OFFSET $SG119901
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 55   :     lua_rawget(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 56   : 
; 57   :     class_map const& classes = *static_cast<class_map*>(

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _classes$[ebp], eax

; 58   :         lua_touserdata(L, -1));
; 59   : 
; 60   :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 61   : 
; 62   :     class_rep* cls = classes.get(dynamic_id);

	mov	ecx, DWORD PTR _dynamic_id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z ; luabind::detail::class_map::get
	mov	DWORD PTR _cls$[ebp], eax

; 63   : 
; 64   :     if (!cls)

	cmp	DWORD PTR _cls$[ebp], 0
	jne	SHORT $LN2@get_pointe

; 65   :         cls = get_pointee_class(classes, get_pointer(p));

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _classes$[ebp]
	push	eax
	call	??$get_pointee_class@Uclass_info@luabind@@@detail@luabind@@YAPAVclass_rep@01@ABVclass_map@01@PAUclass_info@1@@Z ; luabind::detail::get_pointee_class<luabind::class_info>
	add	esp, 8
	mov	DWORD PTR _cls$[ebp], eax
$LN2@get_pointe:

; 66   : 
; 67   :     return cls;

	mov	eax, DWORD PTR _cls$[ebp]

; 68   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_pointee_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAPAVclass_rep@01@PAUlua_State@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@I@Z ENDP ; luabind::detail::get_pointee_class<std::auto_ptr<luabind::class_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\make_instance.hpp
;	COMDAT ??$get_dynamic_class@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PAUclass_info@1@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_p$ = 16						; size = 4
??$get_dynamic_class@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PAUclass_info@1@@Z PROC ; luabind::detail::get_dynamic_class<luabind::class_info>, COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 42   :     return get_dynamic_class_aux(L, p, boost::is_polymorphic<T>());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$get_dynamic_class_aux@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_dynamic_class_aux<luabind::class_info>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_dynamic_class@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PAUclass_info@1@@Z ENDP ; luabind::detail::get_dynamic_class<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\get_pointer.hpp
;	COMDAT ??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z PROC ; boost::get_pointer<luabind::class_info>, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   :     return p.get();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?get@?$auto_ptr@Uclass_info@luabind@@@std@@QBEPAUclass_info@luabind@@XZ ; std::auto_ptr<luabind::class_info>::get

; 51   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ENDP ; boost::get_pointer<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\back_reference.hpp
;	COMDAT ??$get_back_reference_aux1@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_p$ = 8							; size = 4
??$get_back_reference_aux1@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@@Z PROC ; luabind::detail::get_back_reference_aux1<luabind::class_info>, COMDAT

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 55   :       return get_back_reference_aux0(p, boost::is_polymorphic<T>());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	??$get_back_reference_aux0@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_back_reference_aux0<luabind::class_info>
	add	esp, 8

; 56   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_back_reference_aux1@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@@Z ENDP ; luabind::detail::get_back_reference_aux1<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\make_instance.hpp
;	COMDAT ??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z
_TEXT	SEGMENT
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 12
_storage$ = -44						; size = 4
_instance$ = -40					; size = 4
_cls$ = -36						; size = 4
_dynamic$ = -28						; size = 8
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
_p$ = 12						; size = 4
??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z PROC ; luabind::detail::make_instance<std::auto_ptr<luabind::class_info> >, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 74   :     std::pair<class_id, void*> dynamic = get_dynamic_class(L, get_pointer(p));

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	??$get_pointer@Uclass_info@luabind@@@boost@@YAPAUclass_info@luabind@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; boost::get_pointer<luabind::class_info>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dynamic$[ebp]
	push	edx
	call	??$get_dynamic_class@Uclass_info@luabind@@@detail@luabind@@YA?AU?$pair@IPAX@std@@PAUlua_State@@PAUclass_info@1@@Z ; luabind::detail::get_dynamic_class<luabind::class_info>
	add	esp, 12					; 0000000cH

; 75   : 
; 76   :     class_rep* cls = get_pointee_class(L, p, dynamic.first);

	mov	eax, DWORD PTR _dynamic$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$get_pointee_class@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAPAVclass_rep@01@PAUlua_State@@ABV?$auto_ptr@Uclass_info@luabind@@@std@@I@Z ; luabind::detail::get_pointee_class<std::auto_ptr<luabind::class_info> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cls$[ebp], eax

; 77   : 
; 78   :     if (!cls)

	cmp	DWORD PTR _cls$[ebp], 0
	jne	SHORT $LN2@make_insta

; 79   :     {
; 80   :         throw std::runtime_error("Trying to use unregistered class");

	push	OFFSET $SG119755
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@make_insta:

; 81   :     }
; 82   : 
; 83   :     object_rep* instance = push_new_instance(L, cls);

	mov	ecx, DWORD PTR _cls$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z ; luabind::detail::push_new_instance
	add	esp, 8
	mov	DWORD PTR _instance$[ebp], eax

; 84   : 
; 85   :     typedef pointer_holder<P> holder_type;
; 86   : 
; 87   :     void* storage = instance->allocate(sizeof(holder_type));

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _instance$[ebp]
	call	?allocate@object_rep@detail@luabind@@QAEPAXI@Z ; luabind::detail::object_rep::allocate
	mov	DWORD PTR _storage$[ebp], eax

; 88   : 
; 89   :     try

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 90   :     {
; 91   :         new (storage) holder_type(p, dynamic.first, dynamic.second, cls);

	mov	eax, DWORD PTR _storage$[ebp]
	push	eax
	push	28					; 0000001cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _cls$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dynamic$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _dynamic$[ebp]
	push	eax
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0?$pointer_holder@V?$auto_ptr@Uclass_info@luabind@@@std@@$$CBX@detail@luabind@@QAE@V?$auto_ptr@Uclass_info@luabind@@@std@@IPAXPAVclass_rep@12@@Z ; luabind::detail::pointer_holder<std::auto_ptr<luabind::class_info>,void const >::pointer_holder<std::auto_ptr<luabind::class_info>,void const >

; 92   :     }

	jmp	SHORT $LN5@make_insta
__catch$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$0:

; 93   :     catch (...)
; 94   :     {
; 95   :         instance->deallocate(storage);

	mov	eax, DWORD PTR _storage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _instance$[ebp]
	call	?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ; luabind::detail::object_rep::deallocate

; 96   :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 97   :         throw;

	push	0
	push	0
	call	__CxxThrowException@8

; 98   :     }

	mov	eax, $LN10@make_insta
	ret	0
$LN5@make_insta:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT __tryend$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$1
$LN10@make_insta:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$1:

; 99   : 
; 100  :     instance->set_instance(static_cast<holder_type*>(storage));

	mov	edx, DWORD PTR _storage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _instance$[ebp]
	call	?set_instance@object_rep@detail@luabind@@QAEXPAVinstance_holder@23@@Z ; luabind::detail::object_rep::set_instance

; 101  : }

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
$LN4@make_insta:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@make_insta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@make_insta:
	DD	1
	DD	$LN13@make_insta
$LN13@make_insta:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN11@make_insta
$LN11@make_insta:
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z$2:
	lea	ecx, DWORD PTR _p$[ebp]
	jmp	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z ENDP ; luabind::detail::make_instance<std::auto_ptr<luabind::class_info> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ PROC ; std::auto_ptr<luabind::class_info>::release, COMDAT
; _this$ = ecx

; 973  :     _Ty* release() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 974  :         _Ty* _Tmp = _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 975  :         _Myptr    = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 976  :         return _Tmp;

	mov	eax, DWORD PTR __Tmp$[ebp]

; 977  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ ENDP ; std::auto_ptr<luabind::class_info>::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ?get@?$auto_ptr@Uclass_info@luabind@@@std@@QBEPAUclass_info@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$auto_ptr@Uclass_info@luabind@@@std@@QBEPAUclass_info@luabind@@XZ PROC ; std::auto_ptr<luabind::class_info>::get, COMDAT
; _this$ = ecx

; 969  :     _NODISCARD _Ty* get() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 970  :         return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 971  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$auto_ptr@Uclass_info@luabind@@@std@@QBEPAUclass_info@luabind@@XZ ENDP ; std::auto_ptr<luabind::class_info>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ PROC	; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>, COMDAT
; _this$ = ecx

; 949  :     ~auto_ptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 950  :         delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@auto_ptr
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_Gclass_info@luabind@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN2@auto_ptr
$LN3@auto_ptr:
	mov	DWORD PTR tv69[ebp], 0
$LN2@auto_ptr:

; 951  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ENDP	; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z PROC ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>, COMDAT
; _this$ = ecx

; 907  :     auto_ptr(auto_ptr& _Right) noexcept : _Myptr(_Right.release()) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?release@?$auto_ptr@Uclass_info@luabind@@@std@@QAEPAUclass_info@luabind@@XZ ; std::auto_ptr<luabind::class_info>::release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z ENDP ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@PAUclass_info@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@PAUclass_info@luabind@@@Z PROC ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>, COMDAT
; _this$ = ecx

; 905  :     explicit auto_ptr(_Ty* _Ptr = nullptr) noexcept : _Myptr(_Ptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@PAUclass_info@luabind@@@Z ENDP ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\back_reference.hpp
;	COMDAT ??$get_back_reference_aux2@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
___formal$ = 12						; size = 1
??$get_back_reference_aux2@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z PROC ; luabind::detail::get_back_reference_aux2<luabind::class_info>, COMDAT

; 66   :   {

	push	ebp
	mov	ebp, esp

; 67   :       return get_back_reference_aux1(&x);

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	??$get_back_reference_aux1@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@PBUclass_info@1@@Z ; luabind::detail::get_back_reference_aux1<luabind::class_info>
	add	esp, 4

; 68   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$get_back_reference_aux2@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ENDP ; luabind::detail::get_back_reference_aux2<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z
_TEXT	SEGMENT
tv78 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
_ptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_x$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z PROC ; luabind::detail::make_pointee_instance<luabind::class_info>, COMDAT

; 181  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 182  :         std::auto_ptr<T> ptr(new T(x));

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@make_point
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0class_info@luabind@@QAE@ABU01@@Z
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN4@make_point
$LN3@make_point:
	mov	DWORD PTR tv78[ebp], 0
$LN4@make_point:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@PAUclass_info@luabind@@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 183  :         make_instance(L, ptr);

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	??0?$auto_ptr@Uclass_info@luabind@@@std@@QAE@AAV01@@Z ; std::auto_ptr<luabind::class_info>::auto_ptr<luabind::class_info>
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$make_instance@V?$auto_ptr@Uclass_info@luabind@@@std@@@detail@luabind@@YAXPAUlua_State@@V?$auto_ptr@Uclass_info@luabind@@@std@@@Z ; luabind::detail::make_instance<std::auto_ptr<luabind::class_info> >
	add	esp, 8

; 184  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ptr$[ebp]
	call	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@make_point
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@make_point:
	DD	1
	DD	$LN10@make_point
$LN10@make_point:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@make_point
$LN8@make_point:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z$0:
	push	44					; 0000002cH
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z$1:
	lea	ecx, DWORD PTR _ptr$[ebp]
	jmp	??1?$auto_ptr@Uclass_info@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::class_info>::~auto_ptr<luabind::class_info>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z ENDP ; luabind::detail::make_pointee_instance<luabind::class_info>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\back_reference.hpp
;	COMDAT ??$get_back_reference@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@@Z
_TEXT	SEGMENT
$T1 = -2						; size = 1
_x$ = 8							; size = 4
??$get_back_reference@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@@Z PROC ; luabind::detail::get_back_reference<luabind::class_info>, COMDAT

; 72   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 73   :       return detail::get_back_reference_aux2(

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	??$get_back_reference_aux2@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@U?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::get_back_reference_aux2<luabind::class_info>
	add	esp, 8

; 74   :           x
; 75   :         , has_get_pointer<T>()
; 76   :       );
; 77   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_back_reference@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@@Z ENDP ; luabind::detail::get_back_reference<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$make_pointee_instance@Uclass_info@luabind@@U?$bool_@$00@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$00@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -1						; size = 1
_L$ = 8							; size = 4
_x$ = 12						; size = 4
___formal$ = 16						; size = 1
??$make_pointee_instance@Uclass_info@luabind@@U?$bool_@$00@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$00@mpl@boost@@@Z PROC ; luabind::detail::make_pointee_instance<luabind::class_info,boost::mpl::bool_<1> >, COMDAT

; 194  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 195  :         make_pointee_instance(L, x, has_get_pointer<T>(), Clone());

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$make_pointee_instance@Uclass_info@luabind@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$0A@@mpl@boost@@U?$bool_@$00@56@@Z ; luabind::detail::make_pointee_instance<luabind::class_info>
	add	esp, 16					; 00000010H

; 196  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$make_pointee_instance@Uclass_info@luabind@@U?$bool_@$00@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$00@mpl@boost@@@Z ENDP ; luabind::detail::make_pointee_instance<luabind::class_info,boost::mpl::bool_<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\back_reference.hpp
;	COMDAT ??$get_back_reference@Uclass_info@luabind@@@luabind@@YA_NPAUlua_State@@ABUclass_info@0@@Z
_TEXT	SEGMENT
_w$1 = -4						; size = 4
_L$ = 8							; size = 4
_x$ = 12						; size = 4
??$get_back_reference@Uclass_info@luabind@@@luabind@@YA_NPAUlua_State@@ABUclass_info@0@@Z PROC ; luabind::get_back_reference<luabind::class_info>, COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 84   : #ifndef LUABIND_NO_RTTI
; 85   :     if (wrap_base const* w = detail::get_back_reference(x))

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	??$get_back_reference@Uclass_info@luabind@@@detail@luabind@@YAPBUwrap_base@1@ABUclass_info@1@@Z ; luabind::detail::get_back_reference<luabind::class_info>
	add	esp, 4
	mov	DWORD PTR _w$1[ebp], eax
	cmp	DWORD PTR _w$1[ebp], 0
	je	SHORT $LN2@get_back_r

; 86   :     {
; 87   :         detail::wrap_access::ref(*w).get(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$1[ebp]
	push	edx
	call	?ref@wrap_access@detail@luabind@@SAABUwrapped_self_t@3@ABUwrap_base@3@@Z ; luabind::detail::wrap_access::ref
	add	esp, 4
	mov	ecx, eax
	call	?get@weak_ref@luabind@@QBEXPAUlua_State@@@Z ; luabind::weak_ref::get

; 88   :         return true;

	mov	al, 1
	jmp	SHORT $LN1@get_back_r
$LN2@get_back_r:

; 89   :     }
; 90   : #endif
; 91   :     return false;

	xor	al, al
$LN1@get_back_r:

; 92   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$get_back_reference@Uclass_info@luabind@@@luabind@@YA_NPAUlua_State@@ABUclass_info@0@@Z ENDP ; luabind::get_back_reference<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__New_ptr$ = -68					; size = 4
__New_capacity$ = -60					; size = 4
__Proxy$ = -52						; size = 8
_$S17$ = -33						; size = 1
__Alproxy$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>, COMDAT
; _this$ = ecx

; 2729 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2730 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2731 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2732 : 
; 2733 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2734 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2735 :         } else {
; 2736 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2737 :         }
; 2738 : 
; 2739 :         if (_Count > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __Count$[ebp], eax
	jbe	SHORT $LN2@Construct

; 2740 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Construct:

; 2741 :         }
; 2742 : 
; 2743 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2744 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _$S17$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	edx, DWORD PTR _$S17$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], edx

; 2745 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2746 : 
; 2747 :         if (_Count < _BUF_SIZE) {

	cmp	DWORD PTR __Count$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Construct

; 2748 :             _My_data._Mysize = _Count;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2749 :             _My_data._Myres  = _BUF_SIZE - 1;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH

; 2750 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2751 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2752 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2753 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2754 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2755 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2756 :             } else { // _Strat == _Construct_strategy::_From_string
; 2757 : #ifdef _INSERT_STRING_ANNOTATION
; 2758 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2759 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2760 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);

	push	16					; 00000010H
	mov	edx, DWORD PTR __Arg$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 2761 : #endif // !_INSERT_STRING_ANNOTATION
; 2762 :             }
; 2763 : 
; 2764 :             _ASAN_STRING_CREATE(*this);
; 2765 :             _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2766 :             return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	jmp	$LN4@Construct
$LN3@Construct:

; 2767 :         }
; 2768 : 
; 2769 :         _My_data._Myres               = _BUF_SIZE - 1;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH

; 2770 :         const size_type _New_capacity = _Calculate_growth(_Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 2771 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 2772 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8

; 2773 : 
; 2774 : #if _HAS_CXX20
; 2775 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2776 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2777 :         }
; 2778 : #endif // _HAS_CXX20
; 2779 : 
; 2780 :         _My_data._Mysize = _Count;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2781 :         _My_data._Myres  = _New_capacity;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [edx+24], eax

; 2782 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2783 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2784 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2785 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2786 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2787 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2788 :         } else { // _Strat == _Construct_strategy::_From_string
; 2789 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

	mov	ecx, DWORD PTR __Count$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Arg$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2790 :         }
; 2791 : 
; 2792 :         _ASAN_STRING_CREATE(*this);
; 2793 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2794 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
$LN4@Construct:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Construct
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@Construct:
	DD	3
	DD	$LN10@Construct
$LN10@Construct:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN6@Construct
	DD	-52					; ffffffccH
	DD	8
	DD	$LN7@Construct
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN8@Construct
$LN8@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN7@Construct:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN6@Construct:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	55					; 00000037H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z PROC ; luabind::detail::const_ref_converter::converter_postcall<luabind::class_info>, COMDAT
; _this$ = ecx

; 459  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 460  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ENDP ; luabind::detail::const_ref_converter::converter_postcall<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z PROC ; luabind::detail::const_ref_converter::apply<luabind::class_info>, COMDAT
; _this$ = ecx

; 440  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 441  : 			return *static_cast<T*>(result);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 442  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ENDP ; luabind::detail::const_ref_converter::apply<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z
_TEXT	SEGMENT
_s$ = -20						; size = 8
_obj$ = -8						; size = 4
_this$ = -4						; size = 4
_L$ = 8							; size = 4
___formal$ = 12						; size = 1
_index$ = 16						; size = 4
??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z PROC ; luabind::detail::const_ref_converter::match<luabind::class_info>, COMDAT
; _this$ = ecx

; 446  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 447  : 			object_rep* obj = get_instance(L, index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z ; luabind::detail::get_instance
	add	esp, 8
	mov	DWORD PTR _obj$[ebp], eax

; 448  : 			if (obj == 0) return -1; // if the type is not one of our own registered types, classify it as a non-match

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@match
	or	eax, -1
	jmp	SHORT $LN1@match
$LN2@match:

; 449  : 
; 450  :             std::pair<void*, int> s = obj->get_instance(registered_class<T>::id);

	mov	edx, DWORD PTR ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?get_instance@object_rep@detail@luabind@@QBE?AU?$pair@PAXH@std@@I@Z ; luabind::detail::object_rep::get_instance

; 451  :             if (s.second >= 0 && !obj->is_const())

	cmp	DWORD PTR _s$[ebp+4], 0
	jl	SHORT $LN3@match
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?is_const@object_rep@detail@luabind@@QBE_NXZ ; luabind::detail::object_rep::is_const
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@match

; 452  :                 s.second += 10;

	mov	edx, DWORD PTR _s$[ebp+4]
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _s$[ebp+4], edx
$LN3@match:

; 453  :             result = s.first;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx

; 454  :             return s.second;

	mov	eax, DWORD PTR _s$[ebp+4]
$LN1@match:

; 455  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@match
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN7@match:
	DD	1
	DD	$LN6@match
$LN6@match:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@match
$LN5@match:
	DB	115					; 00000073H
	DB	0
??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ENDP ; luabind::detail::const_ref_converter::match<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\decorate_type.hpp
;	COMDAT ?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ
_TEXT	SEGMENT
?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ PROC ; luabind::detail::decorated_type<luabind::class_info const &>::get, COMDAT

; 89   : 		static inline by_const_reference<T>& get() { return /*by_const_reference<T>()*/t; }

	push	ebp
	mov	ebp, esp
	mov	eax, OFFSET ?t@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@2U?$by_const_reference@Uclass_info@luabind@@@23@A ; luabind::detail::decorated_type<luabind::class_info const &>::t
	pop	ebp
	ret	0
?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ENDP ; luabind::detail::decorated_type<luabind::class_info const &>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ PROC ; luabind::default_converter<luabind::class_info const &>::default_converter<luabind::class_info const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0const_ref_converter@detail@luabind@@QAE@XZ ; luabind::detail::const_ref_converter::const_ref_converter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ ENDP ; luabind::default_converter<luabind::class_info const &>::default_converter<luabind::class_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$converter_postcall@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEXPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
??$converter_postcall@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEXPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z PROC ; luabind::default_converter<lua_State *>::converter_postcall<luabind::detail::by_pointer<lua_State> >, COMDAT
; _this$ = ecx

; 841  :     void converter_postcall(lua_State*, U, int) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$converter_postcall@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEXPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ENDP ; luabind::default_converter<lua_State *>::converter_postcall<luabind::detail::by_pointer<lua_State> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_value_wrapper$ = 12					; size = 4
??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z PROC ; luabind::detail::value_wrapper_converter<luabind::adl::object>::apply<luabind::adl::object>, COMDAT
; _this$ = ecx

; 549  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 			value_wrapper_traits<T>::unwrap(interpreter, value_wrapper);

	mov	eax, DWORD PTR _value_wrapper$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::object>::apply<luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEPAUlua_State@@PAU2@U?$by_pointer@Ulua_State@@@detail@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
??$apply@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEPAUlua_State@@PAU2@U?$by_pointer@Ulua_State@@@detail@1@H@Z PROC ; luabind::default_converter<lua_State *>::apply<luabind::detail::by_pointer<lua_State> >, COMDAT
; _this$ = ecx

; 830  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 831  :         return L;

	mov	eax, DWORD PTR _L$[ebp]

; 832  :     }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$apply@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEPAUlua_State@@PAU2@U?$by_pointer@Ulua_State@@@detail@1@H@Z ENDP ; luabind::default_converter<lua_State *>::apply<luabind::detail::by_pointer<lua_State> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$match@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@SAHPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
??$match@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@SAHPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z PROC ; luabind::default_converter<lua_State *>::match<luabind::detail::by_pointer<lua_State> >, COMDAT

; 836  :     {

	push	ebp
	mov	ebp, esp

; 837  :         return 0;

	xor	eax, eax

; 838  :     }

	pop	ebp
	ret	0
??$match@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@SAHPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ENDP ; luabind::default_converter<lua_State *>::match<luabind::detail::by_pointer<lua_State> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\decorate_type.hpp
;	COMDAT ?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ
_TEXT	SEGMENT
?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ PROC ; luabind::detail::decorated_type<lua_State *>::get, COMDAT

; 49   : 		static inline by_pointer<T>& get() { return /*by_pointer<T>()*/t; }

	push	ebp
	mov	ebp, esp
	mov	eax, OFFSET ?t@?$decorated_type@PAUlua_State@@@detail@luabind@@2U?$by_pointer@Ulua_State@@@23@A ; luabind::detail::decorated_type<lua_State *>::t
	pop	ebp
	ret	0
?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ ENDP ; luabind::detail::decorated_type<lua_State *>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_L$ = 8							; size = 4
_results$ = 12						; size = 4
___formal$ = 16						; size = 4
??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z PROC ; luabind::detail::maybe_yield<luabind::detail::null_type>, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 117  :     return maybe_yield_aux(

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _results$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?maybe_yield_aux@detail@luabind@@YAHPAUlua_State@@HU?$bool_@$0A@@mpl@boost@@@Z ; luabind::detail::maybe_yield_aux
	add	esp, 12					; 0000000cH

; 118  :         L, results, mpl::bool_<has_yield<Policies>::value>());
; 119  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ENDP ; luabind::detail::maybe_yield<luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_x$ = 12						; size = 44
??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z PROC ; luabind::detail::value_converter::apply<luabind::class_info>, COMDAT
; _this$ = ecx

; 277  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 278  : 			if (luabind::get_back_reference(L, x))

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$get_back_reference@Uclass_info@luabind@@@luabind@@YA_NPAUlua_State@@ABUclass_info@0@@Z ; luabind::get_back_reference<luabind::class_info>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@apply

; 279  : 				return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _x$[ebp]
	call	??1class_info@luabind@@QAE@XZ
	jmp	SHORT $LN1@apply
$LN2@apply:

; 280  : 
; 281  :             make_pointee_instance(L, x, mpl::true_());

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$make_pointee_instance@Uclass_info@luabind@@U?$bool_@$00@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@AAUclass_info@1@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::make_pointee_instance<luabind::class_info,boost::mpl::bool_<1> >
	add	esp, 12					; 0000000cH

; 282  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _x$[ebp]
	call	??1class_info@luabind@@QAE@XZ
$LN1@apply:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z$0:
	lea	ecx, DWORD PTR _x$[ebp]
	jmp	??1class_info@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z ENDP ; luabind::detail::value_converter::apply<luabind::class_info>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAE?AVargument@adl@2@PAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
___formal$ = 16						; size = 1
_index$ = 20						; size = 4
??$apply@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAE?AVargument@adl@2@PAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z PROC ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::apply<luabind::adl::argument>, COMDAT
; _this$ = ecx

; 521  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 522  : 			return T(from_stack(L, index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0argument@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::argument::argument
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : 		}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$apply@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAE?AVargument@adl@2@PAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::apply<luabind::adl::argument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$match@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@SAHPAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z
_TEXT	SEGMENT
tv71 = -4						; size = 4
_L$ = 8							; size = 4
___formal$ = 12						; size = 1
_index$ = 16						; size = 4
??$match@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@SAHPAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z PROC ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::match<luabind::adl::argument>, COMDAT

; 533  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 534  : 			return value_wrapper_traits<T>::check(L, index) 

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?check@?$value_wrapper_traits@Vargument@adl@luabind@@@luabind@@SA_NZZ ; luabind::value_wrapper_traits<luabind::adl::argument>::check
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@match
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@match
$LN3@match:
	mov	DWORD PTR tv71[ebp], -1
$LN4@match:
	mov	eax, DWORD PTR tv71[ebp]

; 535  :                 ? (std::numeric_limits<int>::max)() / LUABIND_MAX_ARITY
; 536  :                 : -1;
; 537  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$match@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@SAHPAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::match<luabind::adl::argument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\decorate_type.hpp
;	COMDAT ?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ
_TEXT	SEGMENT
?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ PROC ; luabind::detail::decorated_type<luabind::adl::argument const &>::get, COMDAT

; 89   : 		static inline by_const_reference<T>& get() { return /*by_const_reference<T>()*/t; }

	push	ebp
	mov	ebp, esp
	mov	eax, OFFSET ?t@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@2U?$by_const_reference@Vargument@adl@luabind@@@23@A ; luabind::detail::decorated_type<luabind::adl::argument const &>::t
	pop	ebp
	ret	0
?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ ENDP ; luabind::detail::decorated_type<luabind::adl::argument const &>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?converter_postcall@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAAXZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?converter_postcall@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAAXZZ PROC ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::converter_postcall, COMDAT

; 545  : 		void converter_postcall(...) {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?converter_postcall@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAAXZZ ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::converter_postcall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?consumed_args@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAA?BHZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?consumed_args@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAA?BHZZ PROC ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::consumed_args, COMDAT

; 515  :         {

	push	ebp
	mov	ebp, esp

; 516  :             return 1;

	mov	eax, 1

; 517  :         }

	pop	ebp
	ret	0
?consumed_args@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAA?BHZZ ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::consumed_args
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$default_converter@Uclass_info@luabind@@@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$default_converter@Uclass_info@luabind@@@luabind@@QAE@XZ PROC ; luabind::default_converter<luabind::class_info>::default_converter<luabind::class_info>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0value_converter@detail@luabind@@QAE@XZ ; luabind::detail::value_converter::value_converter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$default_converter@Uclass_info@luabind@@@luabind@@QAE@XZ ENDP ; luabind::default_converter<luabind::class_info>::default_converter<luabind::class_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@$$CBVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@$$CBVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::adl::argument const >::get, COMDAT

; 64   :     {

	push	ebp
	mov	ebp, esp

; 65   :         type_to_string<T>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Vargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument>::get
	add	esp, 4

; 66   :         lua_pushstring(L, " const");

	push	OFFSET ??_C@_06PODBGOLO@?5const@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 67   :         lua_concat(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_concat
	add	esp, 8

; 68   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@$$CBVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::adl::argument const >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@$$CBUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@$$CBUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::class_info const >::get, COMDAT

; 64   :     {

	push	ebp
	mov	ebp, esp

; 65   :         type_to_string<T>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info>::get
	add	esp, 4

; 66   :         lua_pushstring(L, " const");

	push	OFFSET ??_C@_06PODBGOLO@?5const@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 67   :         lua_concat(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_concat
	add	esp, 8

; 68   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@$$CBUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::class_info const >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
_TEXT	SEGMENT
tv200 = -108						; size = 4
tv201 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 8
_indices$4 = -84					; size = 8
_results$ = -72						; size = 4
_scores$5 = -64						; size = 8
_score$ = -52						; size = 4
_arguments$ = -48					; size = 4
_arity$ = -44						; size = 4
_index0$ = -40						; size = 4
_c0$ = -32						; size = 4
_result_converter$ = -17				; size = 1
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z PROC ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	lea	ecx, DWORD PTR _c0$[ebp]
	call	??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ
	mov	DWORD PTR _index0$[ebp], 1
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 236  :     int const arity = 0

	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	call	?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ ; luabind::detail::const_ref_converter::consumed_args
	add	esp, 4
	mov	DWORD PTR _arity$[ebp], eax

; 237  : # if N > 0
; 238  : #  define BOOST_PP_LOCAL_MACRO(n) LUABIND_INVOKE_COMPUTE_ARITY(n)
; 239  : #  define BOOST_PP_LOCAL_LIMITS (0,N-1)
; 240  : #  include BOOST_PP_LOCAL_ITERATE()
; 241  : # endif
; 242  :     ;
; 243  : 
; 244  :     int const arguments = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _arguments$[ebp], eax

; 245  : 
; 246  :     int score = -1;

	mov	DWORD PTR _score$[ebp], -1

; 247  : 
; 248  :     if (arity == arguments)

	mov	edx, DWORD PTR _arity$[ebp]
	cmp	edx, DWORD PTR _arguments$[ebp]
	jne	SHORT $LN2@invoke_nor

; 249  :     {
; 250  :         int const scores[] = {
; 251  :             0

	mov	DWORD PTR _scores$5[ebp], 0
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::match<luabind::class_info>
	mov	DWORD PTR _scores$5[ebp+4], eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 259  :         score = sum_scores(scores + 1, scores + 1 + N);

	lea	eax, DWORD PTR _scores$5[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _scores$5[ebp+4]
	push	ecx
	call	?sum_scores@detail@luabind@@YAHPBH0@Z	; luabind::detail::sum_scores
	add	esp, 8
	mov	DWORD PTR _score$[ebp], eax
$LN2@invoke_nor:

; 260  :     }
; 261  : 
; 262  :     if (score >= 0 && score < ctx.best_score)

	cmp	DWORD PTR _score$[ebp], 0
	jl	SHORT $LN3@invoke_nor
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@invoke_nor

; 263  :     {
; 264  :         ctx.best_score = score;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR [ecx], edx

; 265  :         ctx.candidates[0] = &self;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _self$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 266  :         ctx.candidate_index = 1;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], 1

; 267  :     }

	jmp	SHORT $LN4@invoke_nor
$LN3@invoke_nor:

; 268  :     else if (score == ctx.best_score)

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@invoke_nor

; 269  :     {
; 270  :         ctx.candidates[ctx.candidate_index++] = &self;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	DWORD PTR [eax+edx*4+4], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN4@invoke_nor:

; 271  :     }
; 272  : 
; 273  :     int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 274  : 
; 275  :     if (self.next)

	mov	edx, DWORD PTR _self$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@invoke_nor

; 276  :     {
; 277  :         results = self.next->call(L, ctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _self$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _results$[ebp], eax
$LN6@invoke_nor:

; 278  :     }
; 279  : 
; 280  :     if (score == ctx.best_score && ctx.candidate_index == 1)

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN7@invoke_nor
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	$LN7@invoke_nor

; 281  :     {
; 282  : # ifndef LUABIND_INVOKE_VOID
; 283  :         result_converter.apply(

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::apply<luabind::class_info>
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _f$[ebp]
	call	??R?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QBE?AVobject@adl@2@ABUclass_info@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::operator()
	mov	DWORD PTR tv201[ebp], eax
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv200[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv200[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _result_converter$[ebp]
	call	??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::object>::apply<luabind::adl::object>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1object@adl@luabind@@QAE@XZ
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::converter_postcall<luabind::class_info>
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 308  :         results = maybe_yield(L, lua_gettop(L) - arguments, (Policies*)0);

	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	sub	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ; luabind::detail::maybe_yield<luabind::detail::null_type>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _results$[ebp], eax

; 309  : 
; 310  :         int const indices[] = {
; 311  :             arguments + results BOOST_PP_ENUM_TRAILING_PARAMS(N, index)

	mov	ecx, DWORD PTR _arguments$[ebp]
	add	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR _indices$4[ebp], ecx
	mov	DWORD PTR _indices$4[ebp+4], 1

; 312  :         };
; 313  : 
; 314  :         policy_list_postcall<Policies>::apply(L, indices);

	lea	edx, DWORD PTR _indices$4[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0index_map@luabind@@QAE@PBH@Z		; luabind::index_map::index_map
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
	add	esp, 8
$LN7@invoke_nor:

; 315  :     }
; 316  : 
; 317  :     return results;

	mov	eax, DWORD PTR _results$[ebp]

; 318  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@invoke_nor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@invoke_nor:
	DD	4
	DD	$LN15@invoke_nor
$LN15@invoke_nor:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN10@invoke_nor
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN11@invoke_nor
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN12@invoke_nor
	DD	-84					; ffffffacH
	DD	8
	DD	$LN13@invoke_nor
$LN13@invoke_nor:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@invoke_nor:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN11@invoke_nor:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
$LN10@invoke_nor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ENDP ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@2@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@2@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >, COMDAT

; 112  : {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@2@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
_TEXT	SEGMENT
tv200 = -132						; size = 4
tv201 = -128						; size = 4
$T2 = -124						; size = 4
_indices$3 = -116					; size = 8
$T4 = -104						; size = 28
_results$ = -76						; size = 4
_scores$5 = -68						; size = 8
_score$ = -56						; size = 4
_arguments$ = -52					; size = 4
_arity$ = -48						; size = 4
_index0$ = -44						; size = 4
_c0$ = -36						; size = 4
_result_converter$ = -21				; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z PROC ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	lea	ecx, DWORD PTR _c0$[ebp]
	call	??0?$default_converter@ABUclass_info@luabind@@@luabind@@QAE@XZ
	mov	DWORD PTR _index0$[ebp], 1
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 236  :     int const arity = 0

	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	call	?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ ; luabind::detail::const_ref_converter::consumed_args
	add	esp, 4
	mov	DWORD PTR _arity$[ebp], eax

; 237  : # if N > 0
; 238  : #  define BOOST_PP_LOCAL_MACRO(n) LUABIND_INVOKE_COMPUTE_ARITY(n)
; 239  : #  define BOOST_PP_LOCAL_LIMITS (0,N-1)
; 240  : #  include BOOST_PP_LOCAL_ITERATE()
; 241  : # endif
; 242  :     ;
; 243  : 
; 244  :     int const arguments = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _arguments$[ebp], eax

; 245  : 
; 246  :     int score = -1;

	mov	DWORD PTR _score$[ebp], -1

; 247  : 
; 248  :     if (arity == arguments)

	mov	edx, DWORD PTR _arity$[ebp]
	cmp	edx, DWORD PTR _arguments$[ebp]
	jne	SHORT $LN2@invoke_nor

; 249  :     {
; 250  :         int const scores[] = {
; 251  :             0

	mov	DWORD PTR _scores$5[ebp], 0
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$match@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEHPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::match<luabind::class_info>
	mov	DWORD PTR _scores$5[ebp+4], eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 259  :         score = sum_scores(scores + 1, scores + 1 + N);

	lea	eax, DWORD PTR _scores$5[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _scores$5[ebp+4]
	push	ecx
	call	?sum_scores@detail@luabind@@YAHPBH0@Z	; luabind::detail::sum_scores
	add	esp, 8
	mov	DWORD PTR _score$[ebp], eax
$LN2@invoke_nor:

; 260  :     }
; 261  : 
; 262  :     if (score >= 0 && score < ctx.best_score)

	cmp	DWORD PTR _score$[ebp], 0
	jl	SHORT $LN3@invoke_nor
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@invoke_nor

; 263  :     {
; 264  :         ctx.best_score = score;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR [ecx], edx

; 265  :         ctx.candidates[0] = &self;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _self$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 266  :         ctx.candidate_index = 1;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], 1

; 267  :     }

	jmp	SHORT $LN4@invoke_nor
$LN3@invoke_nor:

; 268  :     else if (score == ctx.best_score)

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@invoke_nor

; 269  :     {
; 270  :         ctx.candidates[ctx.candidate_index++] = &self;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	DWORD PTR [eax+edx*4+4], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN4@invoke_nor:

; 271  :     }
; 272  : 
; 273  :     int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 274  : 
; 275  :     if (self.next)

	mov	edx, DWORD PTR _self$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@invoke_nor

; 276  :     {
; 277  :         results = self.next->call(L, ctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _self$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _results$[ebp], eax
$LN6@invoke_nor:

; 278  :     }
; 279  : 
; 280  :     if (score == ctx.best_score && ctx.candidate_index == 1)

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN7@invoke_nor
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	$LN7@invoke_nor

; 281  :     {
; 282  : # ifndef LUABIND_INVOKE_VOID
; 283  :         result_converter.apply(

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$apply@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEABUclass_info@2@PAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::apply<luabind::class_info>
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _f$[ebp]
	call	??R?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
	mov	DWORD PTR tv201[ebp], eax
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv200[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv200[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _result_converter$[ebp]
	call	?apply@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::apply
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABUclass_info@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Uclass_info@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::class_info const &>::get
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$converter_postcall@Uclass_info@luabind@@@const_ref_converter@detail@luabind@@QAEXPAUlua_State@@U?$by_const_reference@Uclass_info@luabind@@@12@H@Z ; luabind::detail::const_ref_converter::converter_postcall<luabind::class_info>
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 308  :         results = maybe_yield(L, lua_gettop(L) - arguments, (Policies*)0);

	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	sub	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ; luabind::detail::maybe_yield<luabind::detail::null_type>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _results$[ebp], eax

; 309  : 
; 310  :         int const indices[] = {
; 311  :             arguments + results BOOST_PP_ENUM_TRAILING_PARAMS(N, index)

	mov	ecx, DWORD PTR _arguments$[ebp]
	add	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR _indices$3[ebp], ecx
	mov	DWORD PTR _indices$3[ebp+4], 1

; 312  :         };
; 313  : 
; 314  :         policy_list_postcall<Policies>::apply(L, indices);

	lea	edx, DWORD PTR _indices$3[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0index_map@luabind@@QAE@PBH@Z		; luabind::index_map::index_map
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
	add	esp, 8
$LN7@invoke_nor:

; 315  :     }
; 316  : 
; 317  :     return results;

	mov	eax, DWORD PTR _results$[ebp]

; 318  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@invoke_nor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@invoke_nor:
	DD	4
	DD	$LN15@invoke_nor
$LN15@invoke_nor:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN10@invoke_nor
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN11@invoke_nor
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN12@invoke_nor
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN13@invoke_nor
$LN13@invoke_nor:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@invoke_nor:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN11@invoke_nor:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
$LN10@invoke_nor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z$0:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ENDP ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@2@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@2@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >, COMDAT

; 112  : {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@2@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::class_info const &>::get, COMDAT

; 53   :     {

	push	ebp
	mov	ebp, esp

; 54   :         type_to_string<T>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@$$CBUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info const >::get
	add	esp, 4

; 55   :         lua_pushstring(L, "&");

	push	OFFSET ??_C@_01HNPIGOCE@?$CG@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 56   :         lua_concat(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_concat
	add	esp, 8

; 57   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::class_info const &>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z
_TEXT	SEGMENT
tv181 = -108						; size = 4
tv182 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 8
_indices$4 = -84					; size = 8
_results$ = -72						; size = 4
_scores$5 = -64						; size = 8
_score$ = -52						; size = 4
_arguments$ = -48					; size = 4
_arity$ = -44						; size = 4
_index0$ = -40						; size = 4
_c0$ = -29						; size = 1
_result_converter$ = -17				; size = 1
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z PROC ; luabind::detail::invoke_normal<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	mov	DWORD PTR _index0$[ebp], 1
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 236  :     int const arity = 0

	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	call	?consumed_args@?$default_converter@PAUlua_State@@@luabind@@QAA?BHZZ ; luabind::default_converter<lua_State *>::consumed_args
	add	esp, 4
	mov	DWORD PTR _arity$[ebp], eax

; 237  : # if N > 0
; 238  : #  define BOOST_PP_LOCAL_MACRO(n) LUABIND_INVOKE_COMPUTE_ARITY(n)
; 239  : #  define BOOST_PP_LOCAL_LIMITS (0,N-1)
; 240  : #  include BOOST_PP_LOCAL_ITERATE()
; 241  : # endif
; 242  :     ;
; 243  : 
; 244  :     int const arguments = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _arguments$[ebp], eax

; 245  : 
; 246  :     int score = -1;

	mov	DWORD PTR _score$[ebp], -1

; 247  : 
; 248  :     if (arity == arguments)

	mov	edx, DWORD PTR _arity$[ebp]
	cmp	edx, DWORD PTR _arguments$[ebp]
	jne	SHORT $LN2@invoke_nor

; 249  :     {
; 250  :         int const scores[] = {
; 251  :             0

	mov	DWORD PTR _scores$5[ebp], 0
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ ; luabind::detail::decorated_type<lua_State *>::get
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$match@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@SAHPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::match<luabind::detail::by_pointer<lua_State> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scores$5[ebp+4], eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 259  :         score = sum_scores(scores + 1, scores + 1 + N);

	lea	eax, DWORD PTR _scores$5[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _scores$5[ebp+4]
	push	ecx
	call	?sum_scores@detail@luabind@@YAHPBH0@Z	; luabind::detail::sum_scores
	add	esp, 8
	mov	DWORD PTR _score$[ebp], eax
$LN2@invoke_nor:

; 260  :     }
; 261  : 
; 262  :     if (score >= 0 && score < ctx.best_score)

	cmp	DWORD PTR _score$[ebp], 0
	jl	SHORT $LN3@invoke_nor
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@invoke_nor

; 263  :     {
; 264  :         ctx.best_score = score;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR [ecx], edx

; 265  :         ctx.candidates[0] = &self;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _self$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 266  :         ctx.candidate_index = 1;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], 1

; 267  :     }

	jmp	SHORT $LN4@invoke_nor
$LN3@invoke_nor:

; 268  :     else if (score == ctx.best_score)

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@invoke_nor

; 269  :     {
; 270  :         ctx.candidates[ctx.candidate_index++] = &self;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	DWORD PTR [eax+edx*4+4], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN4@invoke_nor:

; 271  :     }
; 272  : 
; 273  :     int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 274  : 
; 275  :     if (self.next)

	mov	edx, DWORD PTR _self$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@invoke_nor

; 276  :     {
; 277  :         results = self.next->call(L, ctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _self$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _results$[ebp], eax
$LN6@invoke_nor:

; 278  :     }
; 279  : 
; 280  :     if (score == ctx.best_score && ctx.candidate_index == 1)

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN7@invoke_nor
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	$LN7@invoke_nor

; 281  :     {
; 282  : # ifndef LUABIND_INVOKE_VOID
; 283  :         result_converter.apply(

	push	1
	call	?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ ; luabind::detail::decorated_type<lua_State *>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$apply@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEPAUlua_State@@PAU2@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::apply<luabind::detail::by_pointer<lua_State> >
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result_converter$[ebp]
	call	??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@Vobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::object>::apply<luabind::adl::object>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1object@adl@luabind@@QAE@XZ
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@PAUlua_State@@@detail@luabind@@SAAAU?$by_pointer@Ulua_State@@@23@XZ ; luabind::detail::decorated_type<lua_State *>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$converter_postcall@U?$by_pointer@Ulua_State@@@detail@luabind@@@?$default_converter@PAUlua_State@@@luabind@@QAEXPAUlua_State@@U?$by_pointer@Ulua_State@@@detail@1@H@Z ; luabind::default_converter<lua_State *>::converter_postcall<luabind::detail::by_pointer<lua_State> >
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 308  :         results = maybe_yield(L, lua_gettop(L) - arguments, (Policies*)0);

	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	sub	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ; luabind::detail::maybe_yield<luabind::detail::null_type>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _results$[ebp], eax

; 309  : 
; 310  :         int const indices[] = {
; 311  :             arguments + results BOOST_PP_ENUM_TRAILING_PARAMS(N, index)

	mov	eax, DWORD PTR _arguments$[ebp]
	add	eax, DWORD PTR _results$[ebp]
	mov	DWORD PTR _indices$4[ebp], eax
	mov	DWORD PTR _indices$4[ebp+4], 1

; 312  :         };
; 313  : 
; 314  :         policy_list_postcall<Policies>::apply(L, indices);

	lea	ecx, DWORD PTR _indices$4[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0index_map@luabind@@QAE@PBH@Z		; luabind::index_map::index_map
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
	add	esp, 8
$LN7@invoke_nor:

; 315  :     }
; 316  : 
; 317  :     return results;

	mov	eax, DWORD PTR _results$[ebp]

; 318  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@invoke_nor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@invoke_nor:
	DD	4
	DD	$LN15@invoke_nor
$LN15@invoke_nor:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN10@invoke_nor
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN11@invoke_nor
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN12@invoke_nor
	DD	-84					; ffffffacH
	DD	8
	DD	$LN13@invoke_nor
$LN13@invoke_nor:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@invoke_nor:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN11@invoke_nor:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
$LN10@invoke_nor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z ENDP ; luabind::detail::invoke_normal<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@2@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@2@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >, COMDAT

; 112  : {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@2@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@PAUlua_State@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@PAUlua_State@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<lua_State *>::get, COMDAT

; 42   :     {

	push	ebp
	mov	ebp, esp

; 43   :         type_to_string<T>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Ulua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<lua_State>::get
	add	esp, 4

; 44   :         lua_pushstring(L, "*");

	push	OFFSET ??_C@_01NBENCBCI@?$CK@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 45   :         lua_concat(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_concat
	add	esp, 8

; 46   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@PAUlua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<lua_State *>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z
_TEXT	SEGMENT
tv212 = -168						; size = 4
tv216 = -164						; size = 4
tv210 = -160						; size = 4
tv215 = -156						; size = 4
$T2 = -152						; size = 4
$T3 = -148						; size = 8
$T4 = -140						; size = 4
_indices$5 = -132					; size = 8
$T6 = -120						; size = 44
_results$ = -76						; size = 4
_scores$7 = -68						; size = 8
_score$ = -56						; size = 4
_arguments$ = -52					; size = 4
_arity$ = -48						; size = 4
_index0$ = -44						; size = 4
_c0$ = -33						; size = 1
_result_converter$ = -24				; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z PROC ; luabind::detail::invoke_normal<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 222  :     typedef typename mpl::begin<Signature>::type first;
; 223  : # ifndef LUABIND_INVOKE_VOID
; 224  :     typedef typename mpl::deref<first>::type result_type;
; 225  :     typedef typename find_conversion_policy<0, Policies>::type result_policy;
; 226  :     typename mpl::apply_wrap2<
; 227  :         result_policy, result_type, cpp_to_lua>::type result_converter;

	lea	ecx, DWORD PTR _result_converter$[ebp]
	call	??0?$default_converter@Uclass_info@luabind@@@luabind@@QAE@XZ
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	mov	DWORD PTR _index0$[ebp], 1
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 236  :     int const arity = 0

	lea	eax, DWORD PTR _c0$[ebp]
	push	eax
	call	?consumed_args@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAA?BHZZ ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::consumed_args
	add	esp, 4
	mov	DWORD PTR _arity$[ebp], eax

; 237  : # if N > 0
; 238  : #  define BOOST_PP_LOCAL_MACRO(n) LUABIND_INVOKE_COMPUTE_ARITY(n)
; 239  : #  define BOOST_PP_LOCAL_LIMITS (0,N-1)
; 240  : #  include BOOST_PP_LOCAL_ITERATE()
; 241  : # endif
; 242  :     ;
; 243  : 
; 244  :     int const arguments = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _arguments$[ebp], eax

; 245  : 
; 246  :     int score = -1;

	mov	DWORD PTR _score$[ebp], -1

; 247  : 
; 248  :     if (arity == arguments)

	mov	edx, DWORD PTR _arity$[ebp]
	cmp	edx, DWORD PTR _arguments$[ebp]
	jne	SHORT $LN2@invoke_nor

; 249  :     {
; 250  :         int const scores[] = {
; 251  :             0

	mov	DWORD PTR _scores$7[ebp], 0
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::adl::argument const &>::get
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$match@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@SAHPAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::match<luabind::adl::argument>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scores$7[ebp+4], eax
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 259  :         score = sum_scores(scores + 1, scores + 1 + N);

	lea	eax, DWORD PTR _scores$7[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _scores$7[ebp+4]
	push	ecx
	call	?sum_scores@detail@luabind@@YAHPBH0@Z	; luabind::detail::sum_scores
	add	esp, 8
	mov	DWORD PTR _score$[ebp], eax
$LN2@invoke_nor:

; 260  :     }
; 261  : 
; 262  :     if (score >= 0 && score < ctx.best_score)

	cmp	DWORD PTR _score$[ebp], 0
	jl	SHORT $LN3@invoke_nor
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@invoke_nor

; 263  :     {
; 264  :         ctx.best_score = score;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	mov	DWORD PTR [ecx], edx

; 265  :         ctx.candidates[0] = &self;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _self$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 266  :         ctx.candidate_index = 1;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], 1

; 267  :     }

	jmp	SHORT $LN4@invoke_nor
$LN3@invoke_nor:

; 268  :     else if (score == ctx.best_score)

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _score$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@invoke_nor

; 269  :     {
; 270  :         ctx.candidates[ctx.candidate_index++] = &self;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	DWORD PTR [eax+edx*4+4], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN4@invoke_nor:

; 271  :     }
; 272  : 
; 273  :     int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 274  : 
; 275  :     if (self.next)

	mov	edx, DWORD PTR _self$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@invoke_nor

; 276  :     {
; 277  :         results = self.next->call(L, ctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _self$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _results$[ebp], eax
$LN6@invoke_nor:

; 278  :     }
; 279  : 
; 280  :     if (score == ctx.best_score && ctx.candidate_index == 1)

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _score$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN7@invoke_nor
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	$LN7@invoke_nor

; 281  :     {
; 282  : # ifndef LUABIND_INVOKE_VOID
; 283  :         result_converter.apply(

	sub	esp, 44					; 0000002cH
	mov	esi, esp
	mov	DWORD PTR $T4[ebp], esp
	push	1
	call	?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::adl::argument const &>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _c0$[ebp]
	call	??$apply@Vargument@adl@luabind@@@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAE?AVargument@adl@2@PAUlua_State@@U?$by_const_reference@Vargument@adl@luabind@@@12@H@Z ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::apply<luabind::adl::argument>
	mov	DWORD PTR tv215[ebp], eax
	mov	edx, DWORD PTR tv215[ebp]
	mov	DWORD PTR tv210[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edi, esp
	mov	eax, DWORD PTR tv210[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv216[ebp], eax
	mov	ecx, DWORD PTR tv216[ebp]
	mov	DWORD PTR tv212[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv212[ebp]
	push	edx
	mov	ecx, esi
	call	??0class_info@luabind@@QAE@$$QAU01@@Z
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result_converter$[ebp]
	call	??$apply@Uclass_info@luabind@@@value_converter@detail@luabind@@QAEXPAUlua_State@@Uclass_info@2@@Z ; luabind::detail::value_converter::apply<luabind::class_info>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1class_info@luabind@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1argument@adl@luabind@@QAE@XZ
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\preprocessor\iteration\detail\local.hpp

; 41   :         BOOST_PP_LOCAL_MACRO(0)

	push	1
	call	?get@?$decorated_type@ABVargument@adl@luabind@@@detail@luabind@@SAAAU?$by_const_reference@Vargument@adl@luabind@@@23@XZ ; luabind::detail::decorated_type<luabind::adl::argument const &>::get
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c0$[ebp]
	push	ecx
	call	?converter_postcall@?$value_wrapper_converter@ABVargument@adl@luabind@@@detail@luabind@@QAAXZZ ; luabind::detail::value_wrapper_converter<luabind::adl::argument const &>::converter_postcall
	add	esp, 16					; 00000010H
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp

; 308  :         results = maybe_yield(L, lua_gettop(L) - arguments, (Policies*)0);

	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	sub	eax, DWORD PTR _arguments$[ebp]
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$maybe_yield@Unull_type@detail@luabind@@@detail@luabind@@YAHPAUlua_State@@HPAUnull_type@01@@Z ; luabind::detail::maybe_yield<luabind::detail::null_type>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _results$[ebp], eax

; 309  : 
; 310  :         int const indices[] = {
; 311  :             arguments + results BOOST_PP_ENUM_TRAILING_PARAMS(N, index)

	mov	ecx, DWORD PTR _arguments$[ebp]
	add	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR _indices$5[ebp], ecx
	mov	DWORD PTR _indices$5[ebp+4], 1

; 312  :         };
; 313  : 
; 314  :         policy_list_postcall<Policies>::apply(L, indices);

	lea	edx, DWORD PTR _indices$5[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0index_map@luabind@@QAE@PBH@Z		; luabind::index_map::index_map
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
	add	esp, 8
$LN7@invoke_nor:

; 315  :     }
; 316  : 
; 317  :     return results;

	mov	eax, DWORD PTR _results$[ebp]

; 318  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@invoke_nor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@invoke_nor:
	DD	4
	DD	$LN17@invoke_nor
$LN17@invoke_nor:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@invoke_nor
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN13@invoke_nor
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN14@invoke_nor
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN15@invoke_nor
$LN15@invoke_nor:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN14@invoke_nor:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN13@invoke_nor:
	DB	99					; 00000063H
	DB	48					; 00000030H
	DB	0
$LN12@invoke_nor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1argument@adl@luabind@@QAE@XZ
__unwindfunclet$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z$1:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1class_info@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-168]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z ENDP ; luabind::detail::invoke_normal<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@2@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@2@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >, COMDAT

; 112  : {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@2@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@ABVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@ABVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::adl::argument const &>::get, COMDAT

; 53   :     {

	push	ebp
	mov	ebp, esp

; 54   :         type_to_string<T>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@$$CBVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument const >::get
	add	esp, 4

; 55   :         lua_pushstring(L, "&");

	push	OFFSET ??_C@_01HNPIGOCE@?$CG@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 56   :         lua_concat(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_concat
	add	esp, 8

; 57   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@ABVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::adl::argument const &>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\implicit_cast.hpp
;	COMDAT ??$implicit_cast@ABI@boost@@YAABIABI@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$implicit_cast@ABI@boost@@YAABIABI@Z PROC		; boost::implicit_cast<unsigned int const &>, COMDAT

; 31   : BOOST_CONSTEXPR inline T implicit_cast (typename boost::detail::icast_identity<T>::type x) {

	push	ebp
	mov	ebp, esp

; 32   :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 33   : }

	pop	ebp
	ret	0
??$implicit_cast@ABI@boost@@YAABIABI@Z ENDP		; boost::implicit_cast<unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@U?$is_void@Vobject@adl@luabind@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@8@U?$bool_@$0A@@78@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@U?$is_void@Vobject@adl@luabind@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@8@U?$bool_@$0A@@78@@Z PROC ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 86   :     return invoke_normal(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 32					; 00000020H

; 87   :         L, self, ctx, f, Signature(), policies
; 88   :       , mpl::long_<mpl::size<Signature>::value - 1>(), IsVoid()
; 89   :     );
; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@U?$is_void@Vobject@adl@luabind@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@8@U?$bool_@$0A@@78@@Z ENDP ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@45@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_L$ = 8							; size = 4
_first$ = 12						; size = 1
___formal$ = 16						; size = 1
_end$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@45@@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 117  :     if (!first)

	movzx	eax, BYTE PTR _first$[ebp]
	test	eax, eax
	jne	SHORT $LN2@format_sig

; 118  :         lua_pushstring(L, ",");

	push	OFFSET $SG117547
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8
$LN2@format_sig:

; 119  :     type_to_string<typename Iter::type>::get(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info const &>::get
	add	esp, 4

; 120  :     format_signature_aux(L, false, typename mpl::next<Iter>::type(), end);

	movzx	eax, BYTE PTR _end$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
	add	esp, 16					; 00000010H

; 121  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@45@@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8@U?$bool_@$0A@@78@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8@U?$bool_@$0A@@78@@Z PROC ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 86   :     return invoke_normal(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke_normal@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@78@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke_normal<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 32					; 00000020H

; 87   :         L, self, ctx, f, Signature(), policies
; 88   :       , mpl::long_<mpl::size<Signature>::value - 1>(), IsVoid()
; 89   :     );
; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8@U?$bool_@$0A@@78@@Z ENDP ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@45@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_L$ = 8							; size = 4
_first$ = 12						; size = 1
___formal$ = 16						; size = 1
_end$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@45@@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 117  :     if (!first)

	movzx	eax, BYTE PTR _first$[ebp]
	test	eax, eax
	jne	SHORT $LN2@format_sig

; 118  :         lua_pushstring(L, ",");

	push	OFFSET $SG117496
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8
$LN2@format_sig:

; 119  :     type_to_string<typename Iter::type>::get(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?get@?$type_to_string@ABUclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info const &>::get
	add	esp, 4

; 120  :     format_signature_aux(L, false, typename mpl::next<Iter>::type(), end);

	movzx	eax, BYTE PTR _end$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
	add	esp, 16					; 00000010H

; 121  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@45@@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke0@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@U?$is_void@Vobject@adl@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@9@U?$bool_@$0A@@89@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke0@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@U?$is_void@Vobject@adl@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@9@U?$bool_@$0A@@89@@Z PROC ; luabind::detail::invoke0<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 86   :     return invoke_normal(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke_normal@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$long_@$00@89@U?$bool_@$0A@@89@@Z ; luabind::detail::invoke_normal<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
	add	esp, 32					; 00000020H

; 87   :         L, self, ctx, f, Signature(), policies
; 88   :       , mpl::long_<mpl::size<Signature>::value - 1>(), IsVoid()
; 89   :     );
; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke0@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@U?$is_void@Vobject@adl@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@9@U?$bool_@$0A@@89@@Z ENDP ; luabind::detail::invoke0<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@45@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_L$ = 8							; size = 4
_first$ = 12						; size = 1
___formal$ = 16						; size = 1
_end$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@45@@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 117  :     if (!first)

	movzx	eax, BYTE PTR _first$[ebp]
	test	eax, eax
	jne	SHORT $LN2@format_sig

; 118  :         lua_pushstring(L, ",");

	push	OFFSET $SG117431
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8
$LN2@format_sig:

; 119  :     type_to_string<typename Iter::type>::get(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?get@?$type_to_string@PAUlua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<lua_State *>::get
	add	esp, 4

; 120  :     format_signature_aux(L, false, typename mpl::next<Iter>::type(), end);

	movzx	eax, BYTE PTR _end$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
	add	esp, 16					; 00000010H

; 121  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@45@@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke0@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@U?$is_void@Uclass_info@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$is_void@Uclass_info@luabind@@@boost@@U?$bool_@$0A@@9boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
___formal$ = 32						; size = 1
___formal$ = 36						; size = 1
??$invoke0@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@U?$is_void@Uclass_info@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$is_void@Uclass_info@luabind@@@boost@@U?$bool_@$0A@@9boost@@@Z PROC ; luabind::detail::invoke0<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type,boost::is_void<luabind::class_info> >, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 86   :     return invoke_normal(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke_normal@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$long_@$00@9boost@@U?$bool_@$0A@@9boost@@@Z ; luabind::detail::invoke_normal<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
	add	esp, 32					; 00000020H

; 87   :         L, self, ctx, f, Signature(), policies
; 88   :       , mpl::long_<mpl::size<Signature>::value - 1>(), IsVoid()
; 89   :     );
; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke0@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@U?$is_void@Uclass_info@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$is_void@Uclass_info@luabind@@@boost@@U?$bool_@$0A@@9boost@@@Z ENDP ; luabind::detail::invoke0<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type,boost::is_void<luabind::class_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\mpl\aux_\integral_wrapper.hpp
;	COMDAT ??B?$long_@$01@mpl@boost@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$long_@$01@mpl@boost@@QBEJXZ PROC			; boost::mpl::long_<2>::operator long, COMDAT
; _this$ = ecx

; 80   :     BOOST_CONSTEXPR operator AUX_WRAPPER_VALUE_TYPE() const { return static_cast<AUX_WRAPPER_VALUE_TYPE>(this->value); } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$long_@$01@mpl@boost@@QBEJXZ ENDP			; boost::mpl::long_<2>::operator long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@45@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_L$ = 8							; size = 4
_first$ = 12						; size = 1
___formal$ = 16						; size = 1
_end$ = 20						; size = 1
??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@45@@Z PROC ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 117  :     if (!first)

	movzx	eax, BYTE PTR _first$[ebp]
	test	eax, eax
	jne	SHORT $LN2@format_sig

; 118  :         lua_pushstring(L, ",");

	push	OFFSET $SG117156
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8
$LN2@format_sig:

; 119  :     type_to_string<typename Iter::type>::get(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?get@?$type_to_string@ABVargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::argument const &>::get
	add	esp, 4

; 120  :     format_signature_aux(L, false, typename mpl::next<Iter>::type(), end);

	movzx	eax, BYTE PTR _end$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@mpl@boost@@2@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
	add	esp, 16					; 00000010H

; 121  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@45@@Z ENDP ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
tv77 = -40						; size = 4
$T1 = -36						; size = 4
$T2 = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::class_info>::get, COMDAT

; 33   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 34   :         lua_pushstring(L, get_class_name(L, typeid(T)).c_str());

	push	OFFSET ??_R0?AUclass_info@luabind@@@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?get_class_name@detail@luabind@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUlua_State@@ABVtype_id@2@@Z ; luabind::detail::get_class_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 35   :     }

	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::class_info>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\implicit_cast.hpp
;	COMDAT ??$implicit_cast@ABQBD@boost@@YAABQBDABQBD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$implicit_cast@ABQBD@boost@@YAABQBDABQBD@Z PROC	; boost::implicit_cast<char const * const &>, COMDAT

; 31   : BOOST_CONSTEXPR inline T implicit_cast (typename boost::detail::icast_identity<T>::type x) {

	push	ebp
	mov	ebp, esp

; 32   :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 33   : }

	pop	ebp
	ret	0
??$implicit_cast@ABQBD@boost@@YAABQBDABQBD@Z ENDP	; boost::implicit_cast<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_converter@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_value_wrapper$ = 12					; size = 4
??$apply@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_converter@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@@Z PROC ; luabind::detail::value_wrapper_converter<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >::apply<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT
; _this$ = ecx

; 549  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 			value_wrapper_traits<T>::unwrap(interpreter, value_wrapper);

	mov	eax, DWORD PTR _value_wrapper$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::unwrap<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	add	esp, 8

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$apply@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_converter@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@@Z ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >::apply<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\implicit_cast.hpp
;	COMDAT ??$implicit_cast@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@boost@@YAABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV123@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$implicit_cast@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@boost@@YAABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV123@@Z PROC ; boost::implicit_cast<luabind::adl::iterator_proxy<luabind::detail::basic_access> const &>, COMDAT

; 31   : BOOST_CONSTEXPR inline T implicit_cast (typename boost::detail::icast_identity<T>::type x) {

	push	ebp
	mov	ebp, esp

; 32   :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 33   : }

	pop	ebp
	ret	0
??$implicit_cast@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@boost@@YAABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV123@@Z ENDP ; boost::implicit_cast<luabind::adl::iterator_proxy<luabind::detail::basic_access> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@$$CBVobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_value_wrapper$ = 12					; size = 4
??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@$$CBVobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z PROC ; luabind::detail::value_wrapper_converter<luabind::adl::object const >::apply<luabind::adl::object>, COMDAT
; _this$ = ecx

; 549  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 			value_wrapper_traits<T>::unwrap(interpreter, value_wrapper);

	mov	eax, DWORD PTR _value_wrapper$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@$$CBVobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ENDP ; luabind::detail::value_wrapper_converter<luabind::adl::object const >::apply<luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\implicit_cast.hpp
;	COMDAT ??$implicit_cast@ABVobject@adl@luabind@@@boost@@YAABVobject@adl@luabind@@ABV123@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$implicit_cast@ABVobject@adl@luabind@@@boost@@YAABVobject@adl@luabind@@ABV123@@Z PROC ; boost::implicit_cast<luabind::adl::object const &>, COMDAT

; 31   : BOOST_CONSTEXPR inline T implicit_cast (typename boost::detail::icast_identity<T>::type x) {

	push	ebp
	mov	ebp, esp

; 32   :     return x;

	mov	eax, DWORD PTR _x$[ebp]

; 33   : }

	pop	ebp
	ret	0
??$implicit_cast@ABVobject@adl@luabind@@@boost@@YAABVobject@adl@luabind@@ABV123@@Z ENDP ; boost::implicit_cast<luabind::adl::object const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push_aux@$$CBIUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIPAUdefault_policy@01@@Z
_TEXT	SEGMENT
_cv$ = -5						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push_aux@$$CBIUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIPAUdefault_policy@01@@Z PROC ; luabind::detail::push_aux<unsigned int const ,luabind::detail::default_policy>, COMDAT

; 56   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 57   :       typedef typename boost::mpl::if_<
; 58   :           boost::is_reference_wrapper<T>
; 59   :         , BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 60   :         , T
; 61   :       >::type unwrapped_type;
; 62   : 
; 63   :       typename mpl::apply_wrap2<
; 64   :           ConverterGenerator,unwrapped_type,cpp_to_lua
; 65   :       >::type cv;
; 66   : 
; 67   :       cv.apply(

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	??$implicit_cast@ABI@boost@@YAABIABI@Z	; boost::implicit_cast<unsigned int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cv$[ebp]
	call	?apply@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEXPAUlua_State@@ABI@Z ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::apply

; 68   :           interpreter
; 69   :         , boost::implicit_cast<
; 70   :               BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 71   :           >(value)
; 72   :       );
; 73   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@push_aux
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@push_aux:
	DD	1
	DD	$LN4@push_aux
$LN4@push_aux:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@push_aux
$LN3@push_aux:
	DB	99					; 00000063H
	DB	118					; 00000076H
	DB	0
??$push_aux@$$CBIUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIPAUdefault_policy@01@@Z ENDP ; luabind::detail::push_aux<unsigned int const ,luabind::detail::default_policy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z PROC ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 97   :     return invoke0(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@U?$is_void@Vobject@adl@luabind@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@8@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
	add	esp, 32					; 00000020H

; 98   :         L, self, ctx, f, Signature(), policies
; 99   :       , boost::is_void<typename mpl::front<Signature>::type>()
; 100  :       , boost::is_member_function_pointer<F>()
; 101  :    );
; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z ENDP ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_function$ = 12						; size = 4
___formal$ = 16						; size = 1
??$format_signature@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@Z PROC ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &> >, COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 126  :     typedef typename mpl::begin<Signature>::type first;
; 127  : 
; 128  :     type_to_string<typename first::type>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::object>::get
	add	esp, 4

; 129  : 
; 130  :     lua_pushstring(L, " ");

	push	OFFSET $SG116878
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 131  :     lua_pushstring(L, function);

	mov	edx, DWORD PTR _function$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 132  : 
; 133  :     lua_pushstring(L, "(");

	push	OFFSET $SG116879
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 134  :     format_signature_aux(

	movzx	edx, BYTE PTR $T3[ebp]
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,2> >
	add	esp, 16					; 00000010H

; 135  :         L
; 136  :       , true
; 137  :       , typename mpl::next<first>::type()
; 138  :       , typename mpl::end<Signature>::type()
; 139  :     );
; 140  :     lua_pushstring(L, ")");

	push	OFFSET $SG116880
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 141  : 
; 142  :     lua_concat(L, static_cast<int>(mpl::size<Signature>()) * 2 + 2);

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$long_@$01@mpl@boost@@QBEJXZ	; boost::mpl::long_<2>::operator long
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_concat
	add	esp, 8

; 143  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@Z ENDP ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z PROC ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 97   :     return invoke0(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke0@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@U?$is_void@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8@U?$bool_@$0A@@78@@Z ; luabind::detail::invoke0<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type,boost::is_void<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 32					; 00000020H

; 98   :         L, self, ctx, f, Signature(), policies
; 99   :       , boost::is_void<typename mpl::front<Signature>::type>()
; 100  :       , boost::is_member_function_pointer<F>()
; 101  :    );
; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z ENDP ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_function$ = 12						; size = 4
___formal$ = 16						; size = 1
??$format_signature@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@Z PROC ; luabind::detail::format_signature<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &> >, COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 126  :     typedef typename mpl::begin<Signature>::type first;
; 127  : 
; 128  :     type_to_string<typename first::type>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::get
	add	esp, 4

; 129  : 
; 130  :     lua_pushstring(L, " ");

	push	OFFSET $SG116384
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 131  :     lua_pushstring(L, function);

	mov	edx, DWORD PTR _function$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 132  : 
; 133  :     lua_pushstring(L, "(");

	push	OFFSET $SG116385
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 134  :     format_signature_aux(

	movzx	edx, BYTE PTR $T3[ebp]
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,2> >
	add	esp, 16					; 00000010H

; 135  :         L
; 136  :       , true
; 137  :       , typename mpl::next<first>::type()
; 138  :       , typename mpl::end<Signature>::type()
; 139  :     );
; 140  :     lua_pushstring(L, ")");

	push	OFFSET $SG116386
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 141  : 
; 142  :     lua_concat(L, static_cast<int>(mpl::size<Signature>()) * 2 + 2);

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$long_@$01@mpl@boost@@QBEJXZ	; boost::mpl::long_<2>::operator long
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_concat
	add	esp, 8

; 143  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@Z ENDP ; luabind::detail::format_signature<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z PROC ; luabind::detail::invoke<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 97   :     return invoke0(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke0@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@U?$is_void@Vobject@adl@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@U?$is_void@Vobject@adl@luabind@@@9@U?$bool_@$0A@@89@@Z ; luabind::detail::invoke0<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type,boost::is_void<luabind::adl::object> >
	add	esp, 32					; 00000020H

; 98   :         L, self, ctx, f, Signature(), policies
; 99   :       , boost::is_void<typename mpl::front<Signature>::type>()
; 100  :       , boost::is_member_function_pointer<F>()
; 101  :    );
; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z ENDP ; luabind::detail::invoke<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_function$ = 12						; size = 4
___formal$ = 16						; size = 1
??$format_signature@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@Z PROC ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,lua_State *> >, COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 126  :     typedef typename mpl::begin<Signature>::type first;
; 127  : 
; 128  :     type_to_string<typename first::type>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::adl::object>::get
	add	esp, 4

; 129  : 
; 130  :     lua_pushstring(L, " ");

	push	OFFSET $SG115890
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 131  :     lua_pushstring(L, function);

	mov	edx, DWORD PTR _function$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 132  : 
; 133  :     lua_pushstring(L, "(");

	push	OFFSET $SG115891
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 134  :     format_signature_aux(

	movzx	edx, BYTE PTR $T3[ebp]
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::adl::object,lua_State *>,2> >
	add	esp, 16					; 00000010H

; 135  :         L
; 136  :       , true
; 137  :       , typename mpl::next<first>::type()
; 138  :       , typename mpl::end<Signature>::type()
; 139  :     );
; 140  :     lua_pushstring(L, ")");

	push	OFFSET $SG115892
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 141  : 
; 142  :     lua_concat(L, static_cast<int>(mpl::size<Signature>()) * 2 + 2);

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$long_@$01@mpl@boost@@QBEJXZ	; boost::mpl::long_<2>::operator long
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_concat
	add	esp, 8

; 143  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@Z ENDP ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,lua_State *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_self$ = 12						; size = 4
_ctx$ = 16						; size = 4
_f$ = 20						; size = 4
___formal$ = 24						; size = 1
_policies$ = 28						; size = 4
??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z PROC ; luabind::detail::invoke<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 97   :     return invoke0(

	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke0@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@U?$is_void@Uclass_info@luabind@@@7@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@U?$is_void@Uclass_info@luabind@@@boost@@U?$bool_@$0A@@9boost@@@Z ; luabind::detail::invoke0<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type,boost::is_void<luabind::class_info> >
	add	esp, 32					; 00000020H

; 98   :         L, self, ctx, f, Signature(), policies
; 99   :       , boost::is_void<typename mpl::front<Signature>::type>()
; 100  :       , boost::is_member_function_pointer<F>()
; 101  :    );
; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z ENDP ; luabind::detail::invoke<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ??$format_signature@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_L$ = 8							; size = 4
_function$ = 12						; size = 4
___formal$ = 16						; size = 1
??$format_signature@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@Z PROC ; luabind::detail::format_signature<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &> >, COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 126  :     typedef typename mpl::begin<Signature>::type first;
; 127  : 
; 128  :     type_to_string<typename first::type>::get(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get@?$type_to_string@Uclass_info@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ; luabind::detail::type_to_string<luabind::class_info>::get
	add	esp, 4

; 129  : 
; 130  :     lua_pushstring(L, " ");

	push	OFFSET $SG115382
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 131  :     lua_pushstring(L, function);

	mov	edx, DWORD PTR _function$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 132  : 
; 133  :     lua_pushstring(L, "(");

	push	OFFSET $SG115383
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 134  :     format_signature_aux(

	movzx	edx, BYTE PTR $T3[ebp]
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$format_signature_aux@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@23@@detail@luabind@@YAXPAUlua_State@@_NU?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$00@mpl@boost@@U?$v_iter@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@$01@45@@Z ; luabind::detail::format_signature_aux<boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,1>,boost::mpl::v_iter<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,2> >
	add	esp, 16					; 00000010H

; 135  :         L
; 136  :       , true
; 137  :       , typename mpl::next<first>::type()
; 138  :       , typename mpl::end<Signature>::type()
; 139  :     );
; 140  :     lua_pushstring(L, ")");

	push	OFFSET $SG115384
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 141  : 
; 142  :     lua_concat(L, static_cast<int>(mpl::size<Signature>()) * 2 + 2);

	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$long_@$01@mpl@boost@@QBEJXZ	; boost::mpl::long_<2>::operator long
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_concat
	add	esp, 8

; 143  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$format_signature@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@Z ENDP ; luabind::detail::format_signature<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::~function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1function_object@detail@luabind@@UAE@XZ ; luabind::detail::function_object::~function_object
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::~function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv130 = -88						; size = 4
$T2 = -82						; size = 1
_exception_caught$ = -81				; size = 1
_results$ = -80						; size = 4
_ctx$ = -72						; size = 48
_impl$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::entry_point, COMDAT

; 50   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 51   :           function_object_impl const* impl =

	push	-10003					; ffffd8edH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impl$[ebp], ecx

; 52   :               *(function_object_impl const**)lua_touserdata(L, lua_upvalueindex(1));
; 53   : 
; 54   :           invoke_context ctx;

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??0invoke_context@detail@luabind@@QAE@XZ ; luabind::detail::invoke_context::invoke_context

; 55   : 
; 56   :           int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 57   : 
; 58   : # ifndef LUABIND_NO_EXCEPTIONS
; 59   :           bool exception_caught = false;

	mov	BYTE PTR _exception_caught$[ebp], 0

; 60   : 
; 61   :           try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 62   :           {
; 63   :               results = invoke(

	mov	edx, DWORD PTR _impl$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _impl$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _impl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _results$[ebp], edx

; 64   :                   L, *impl, ctx, impl->f, Signature(), impl->policies);
; 65   :           }

	jmp	SHORT $LN6@entry_poin
__catch$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$0:

; 66   :           catch (...)
; 67   :           {
; 68   :               exception_caught = true;

	mov	BYTE PTR _exception_caught$[ebp], 1

; 69   :               handle_exception_aux(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::handle_exception_aux
	add	esp, 4

; 70   :           }

	mov	eax, $LN9@entry_poin
	ret	0
$LN6@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$1
$LN9@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z$1:

; 71   : 
; 72   :           if (exception_caught)

	movzx	ecx, BYTE PTR _exception_caught$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@entry_poin

; 73   :               lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4
$LN3@entry_poin:

; 74   : # else
; 75   :           results = invoke(L, *impl, ctx, impl->f, Signature(), impl->policies);
; 76   : # endif
; 77   : 
; 78   :           if (!ctx)

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??Binvoke_context@detail@luabind@@QBE_NXZ ; luabind::detail::invoke_context::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@entry_poin

; 79   :           {
; 80   :               ctx.format_error(L, impl);

	mov	ecx, DWORD PTR _impl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ctx$[ebp]
	call	?format_error@invoke_context@detail@luabind@@QBEXPAUlua_State@@PBUfunction_object@23@@Z ; luabind::detail::invoke_context::format_error

; 81   :               lua_error(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_error
	add	esp, 4
$LN4@entry_poin:

; 82   :           }
; 83   : 
; 84   :           return results;

	mov	eax, DWORD PTR _results$[ebp]

; 85   :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@entry_poin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@entry_poin:
	DD	1
	DD	$LN12@entry_poin
$LN12@entry_poin:
	DD	-72					; ffffffb8H
	DD	48					; 00000030H
	DD	$LN10@entry_poin
$LN10@entry_poin:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::entry_point
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?format_signature@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_function$ = 12						; size = 4
?format_signature@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@PBD@Z PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::format_signature, COMDAT
; _this$ = ecx

; 45   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :           detail::format_signature(L, function, Signature());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature@U?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &> >
	add	esp, 12					; 0000000cH

; 47   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?format_signature@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::format_signature
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?call@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_ctx$ = 12						; size = 4
?call@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::call, COMDAT
; _this$ = ecx

; 40   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 41   :           return invoke(L, *this, ctx, f, Signature(), policies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AUclass_info@1@ABVargument@adl@1@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H

; 42   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?call@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??0?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@QAE@P6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_policies$ = 12						; size = 4
??0?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@QAE@P6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z PROC ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 37   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :         : function_object(&entry_point)

	push	OFFSET ?entry_point@?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::entry_point
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ; luabind::detail::function_object::function_object

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@6B@

; 35   :         , f(f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@QAE@P6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ENDP ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::~function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1function_object@detail@luabind@@UAE@XZ ; luabind::detail::function_object::~function_object
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::~function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv130 = -88						; size = 4
$T2 = -82						; size = 1
_exception_caught$ = -81				; size = 1
_results$ = -80						; size = 4
_ctx$ = -72						; size = 48
_impl$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::entry_point, COMDAT

; 50   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 51   :           function_object_impl const* impl =

	push	-10003					; ffffd8edH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impl$[ebp], ecx

; 52   :               *(function_object_impl const**)lua_touserdata(L, lua_upvalueindex(1));
; 53   : 
; 54   :           invoke_context ctx;

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??0invoke_context@detail@luabind@@QAE@XZ ; luabind::detail::invoke_context::invoke_context

; 55   : 
; 56   :           int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 57   : 
; 58   : # ifndef LUABIND_NO_EXCEPTIONS
; 59   :           bool exception_caught = false;

	mov	BYTE PTR _exception_caught$[ebp], 0

; 60   : 
; 61   :           try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 62   :           {
; 63   :               results = invoke(

	mov	edx, DWORD PTR _impl$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _impl$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _impl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _results$[ebp], edx

; 64   :                   L, *impl, ctx, impl->f, Signature(), impl->policies);
; 65   :           }

	jmp	SHORT $LN6@entry_poin
__catch$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$0:

; 66   :           catch (...)
; 67   :           {
; 68   :               exception_caught = true;

	mov	BYTE PTR _exception_caught$[ebp], 1

; 69   :               handle_exception_aux(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::handle_exception_aux
	add	esp, 4

; 70   :           }

	mov	eax, $LN9@entry_poin
	ret	0
$LN6@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$1
$LN9@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z$1:

; 71   : 
; 72   :           if (exception_caught)

	movzx	ecx, BYTE PTR _exception_caught$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@entry_poin

; 73   :               lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4
$LN3@entry_poin:

; 74   : # else
; 75   :           results = invoke(L, *impl, ctx, impl->f, Signature(), impl->policies);
; 76   : # endif
; 77   : 
; 78   :           if (!ctx)

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??Binvoke_context@detail@luabind@@QBE_NXZ ; luabind::detail::invoke_context::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@entry_poin

; 79   :           {
; 80   :               ctx.format_error(L, impl);

	mov	ecx, DWORD PTR _impl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ctx$[ebp]
	call	?format_error@invoke_context@detail@luabind@@QBEXPAUlua_State@@PBUfunction_object@23@@Z ; luabind::detail::invoke_context::format_error

; 81   :               lua_error(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_error
	add	esp, 4
$LN4@entry_poin:

; 82   :           }
; 83   : 
; 84   :           return results;

	mov	eax, DWORD PTR _results$[ebp]

; 85   :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@entry_poin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@entry_poin:
	DD	1
	DD	$LN12@entry_poin
$LN12@entry_poin:
	DD	-72					; ffffffb8H
	DD	48					; 00000030H
	DD	$LN10@entry_poin
$LN10@entry_poin:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::entry_point
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?format_signature@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_function$ = 12						; size = 4
?format_signature@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@PBD@Z PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::format_signature, COMDAT
; _this$ = ecx

; 45   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :           detail::format_signature(L, function, Signature());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature@U?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,lua_State *> >
	add	esp, 12					; 0000000cH

; 47   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?format_signature@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::format_signature
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?call@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_ctx$ = 12						; size = 4
?call@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::call, COMDAT
; _this$ = ecx

; 40   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 41   :           return invoke(L, *this, ctx, f, Signature(), policies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABQ6A?AVobject@adl@1@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
	add	esp, 24					; 00000018H

; 42   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?call@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??0?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@QAE@P6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_policies$ = 12						; size = 4
??0?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@QAE@P6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z PROC ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 37   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :         : function_object(&entry_point)

	push	OFFSET ?entry_point@?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::entry_point
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ; luabind::detail::function_object::function_object

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@6B@

; 35   :         , f(f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@QAE@P6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ENDP ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1function_object@detail@luabind@@UAE@XZ ; luabind::detail::function_object::~function_object
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv130 = -88						; size = 4
$T2 = -82						; size = 1
_exception_caught$ = -81				; size = 1
_results$ = -80						; size = 4
_ctx$ = -72						; size = 48
_impl$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::entry_point, COMDAT

; 50   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 51   :           function_object_impl const* impl =

	push	-10003					; ffffd8edH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impl$[ebp], ecx

; 52   :               *(function_object_impl const**)lua_touserdata(L, lua_upvalueindex(1));
; 53   : 
; 54   :           invoke_context ctx;

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??0invoke_context@detail@luabind@@QAE@XZ ; luabind::detail::invoke_context::invoke_context

; 55   : 
; 56   :           int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 57   : 
; 58   : # ifndef LUABIND_NO_EXCEPTIONS
; 59   :           bool exception_caught = false;

	mov	BYTE PTR _exception_caught$[ebp], 0

; 60   : 
; 61   :           try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 62   :           {
; 63   :               results = invoke(

	mov	edx, DWORD PTR _impl$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _impl$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _impl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _results$[ebp], edx

; 64   :                   L, *impl, ctx, impl->f, Signature(), impl->policies);
; 65   :           }

	jmp	SHORT $LN6@entry_poin
__catch$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$0:

; 66   :           catch (...)
; 67   :           {
; 68   :               exception_caught = true;

	mov	BYTE PTR _exception_caught$[ebp], 1

; 69   :               handle_exception_aux(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::handle_exception_aux
	add	esp, 4

; 70   :           }

	mov	eax, $LN9@entry_poin
	ret	0
$LN6@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$1
$LN9@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$1:

; 71   : 
; 72   :           if (exception_caught)

	movzx	ecx, BYTE PTR _exception_caught$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@entry_poin

; 73   :               lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4
$LN3@entry_poin:

; 74   : # else
; 75   :           results = invoke(L, *impl, ctx, impl->f, Signature(), impl->policies);
; 76   : # endif
; 77   : 
; 78   :           if (!ctx)

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??Binvoke_context@detail@luabind@@QBE_NXZ ; luabind::detail::invoke_context::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@entry_poin

; 79   :           {
; 80   :               ctx.format_error(L, impl);

	mov	ecx, DWORD PTR _impl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ctx$[ebp]
	call	?format_error@invoke_context@detail@luabind@@QBEXPAUlua_State@@PBUfunction_object@23@@Z ; luabind::detail::invoke_context::format_error

; 81   :               lua_error(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_error
	add	esp, 4
$LN4@entry_poin:

; 82   :           }
; 83   : 
; 84   :           return results;

	mov	eax, DWORD PTR _results$[ebp]

; 85   :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@entry_poin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@entry_poin:
	DD	1
	DD	$LN12@entry_poin
$LN12@entry_poin:
	DD	-72					; ffffffb8H
	DD	48					; 00000030H
	DD	$LN10@entry_poin
$LN10@entry_poin:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::entry_point
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_function$ = 12						; size = 4
?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::format_signature, COMDAT
; _this$ = ecx

; 45   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :           detail::format_signature(L, function, Signature());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &> >
	add	esp, 12					; 0000000cH

; 47   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::format_signature
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_ctx$ = 12						; size = 4
?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::call, COMDAT
; _this$ = ecx

; 40   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 41   :           return invoke(L, *this, ctx, f, Signature(), policies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@01@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H

; 42   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@12@ABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_policies$ = 12						; size = 4
??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@12@ABUnull_type@12@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 37   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :         : function_object(&entry_point)

	push	OFFSET ?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::entry_point
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ; luabind::detail::function_object::function_object

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@

; 35   :         , f(f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@12@ABUnull_type@12@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1function_object@detail@luabind@@UAE@XZ ; luabind::detail::function_object::~function_object
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::~function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv130 = -88						; size = 4
$T2 = -82						; size = 1
_exception_caught$ = -81				; size = 1
_results$ = -80						; size = 4
_ctx$ = -72						; size = 48
_impl$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::entry_point, COMDAT

; 50   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 51   :           function_object_impl const* impl =

	push	-10003					; ffffd8edH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impl$[ebp], ecx

; 52   :               *(function_object_impl const**)lua_touserdata(L, lua_upvalueindex(1));
; 53   : 
; 54   :           invoke_context ctx;

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??0invoke_context@detail@luabind@@QAE@XZ ; luabind::detail::invoke_context::invoke_context

; 55   : 
; 56   :           int results = 0;

	mov	DWORD PTR _results$[ebp], 0

; 57   : 
; 58   : # ifndef LUABIND_NO_EXCEPTIONS
; 59   :           bool exception_caught = false;

	mov	BYTE PTR _exception_caught$[ebp], 0

; 60   : 
; 61   :           try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 62   :           {
; 63   :               results = invoke(

	mov	edx, DWORD PTR _impl$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _impl$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _impl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _results$[ebp], edx

; 64   :                   L, *impl, ctx, impl->f, Signature(), impl->policies);
; 65   :           }

	jmp	SHORT $LN6@entry_poin
__catch$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$0:

; 66   :           catch (...)
; 67   :           {
; 68   :               exception_caught = true;

	mov	BYTE PTR _exception_caught$[ebp], 1

; 69   :               handle_exception_aux(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::handle_exception_aux
	add	esp, 4

; 70   :           }

	mov	eax, $LN9@entry_poin
	ret	0
$LN6@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$1
$LN9@entry_poin:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z$1:

; 71   : 
; 72   :           if (exception_caught)

	movzx	ecx, BYTE PTR _exception_caught$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@entry_poin

; 73   :               lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4
$LN3@entry_poin:

; 74   : # else
; 75   :           results = invoke(L, *impl, ctx, impl->f, Signature(), impl->policies);
; 76   : # endif
; 77   : 
; 78   :           if (!ctx)

	lea	ecx, DWORD PTR _ctx$[ebp]
	call	??Binvoke_context@detail@luabind@@QBE_NXZ ; luabind::detail::invoke_context::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@entry_poin

; 79   :           {
; 80   :               ctx.format_error(L, impl);

	mov	ecx, DWORD PTR _impl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ctx$[ebp]
	call	?format_error@invoke_context@detail@luabind@@QBEXPAUlua_State@@PBUfunction_object@23@@Z ; luabind::detail::invoke_context::format_error

; 81   :               lua_error(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_error
	add	esp, 4
$LN4@entry_poin:

; 82   :           }
; 83   : 
; 84   :           return results;

	mov	eax, DWORD PTR _results$[ebp]

; 85   :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@entry_poin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@entry_poin:
	DD	1
	DD	$LN12@entry_poin
$LN12@entry_poin:
	DD	-72					; ffffffb8H
	DD	48					; 00000030H
	DD	$LN10@entry_poin
$LN10@entry_poin:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::entry_point
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_function$ = 12						; size = 4
?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::format_signature, COMDAT
; _this$ = ecx

; 45   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :           detail::format_signature(L, function, Signature());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$format_signature@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@detail@luabind@@YAXPAUlua_State@@PBDU?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@@Z ; luabind::detail::format_signature<boost::mpl::vector2<luabind::adl::object,luabind::class_info const &> >
	add	esp, 12					; 0000000cH

; 47   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?format_signature@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEXPAUlua_State@@PBD@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::format_signature
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_ctx$ = 12						; size = 4
?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::call, COMDAT
; _this$ = ecx

; 40   :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 41   :           return invoke(L, *this, ctx, f, Signature(), policies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$invoke@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@YAHPAUlua_State@@ABUfunction_object@01@AAUinvoke_context@01@ABU?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@01@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@ABUnull_type@01@@Z ; luabind::detail::invoke<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 24					; 00000018H

; 42   :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?call@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@UBEHPAUlua_State@@AAUinvoke_context@23@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@12@ABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
_policies$ = 12						; size = 4
??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@12@ABUnull_type@12@@Z PROC ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 37   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :         : function_object(&entry_point)

	push	OFFSET ?entry_point@?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::entry_point
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ; luabind::detail::function_object::function_object

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@6B@

; 35   :         , f(f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 37   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@12@ABUnull_type@12@@Z ENDP ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push_aux@QBDUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDPAUdefault_policy@01@@Z
_TEXT	SEGMENT
_cv$ = -5						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push_aux@QBDUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDPAUdefault_policy@01@@Z PROC ; luabind::detail::push_aux<char const * const,luabind::detail::default_policy>, COMDAT

; 56   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 57   :       typedef typename boost::mpl::if_<
; 58   :           boost::is_reference_wrapper<T>
; 59   :         , BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 60   :         , T
; 61   :       >::type unwrapped_type;
; 62   : 
; 63   :       typename mpl::apply_wrap2<
; 64   :           ConverterGenerator,unwrapped_type,cpp_to_lua
; 65   :       >::type cv;
; 66   : 
; 67   :       cv.apply(

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	??$implicit_cast@ABQBD@boost@@YAABQBDABQBD@Z ; boost::implicit_cast<char const * const &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	lea	ecx, DWORD PTR _cv$[ebp]
	call	?apply@?$default_converter@PBD@luabind@@QAEXPAUlua_State@@PBD@Z ; luabind::default_converter<char const *>::apply

; 68   :           interpreter
; 69   :         , boost::implicit_cast<
; 70   :               BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 71   :           >(value)
; 72   :       );
; 73   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@push_aux
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@push_aux:
	DD	1
	DD	$LN4@push_aux
$LN4@push_aux:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@push_aux
$LN3@push_aux:
	DB	99					; 00000063H
	DB	118					; 00000076H
	DB	0
??$push_aux@QBDUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDPAUdefault_policy@01@@Z ENDP ; luabind::detail::push_aux<char const * const,luabind::detail::default_policy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push_aux@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@PAUdefault_policy@01@@Z
_TEXT	SEGMENT
_cv$ = -5						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push_aux@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@PAUdefault_policy@01@@Z PROC ; luabind::detail::push_aux<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::default_policy>, COMDAT

; 56   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 57   :       typedef typename boost::mpl::if_<
; 58   :           boost::is_reference_wrapper<T>
; 59   :         , BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 60   :         , T
; 61   :       >::type unwrapped_type;
; 62   : 
; 63   :       typename mpl::apply_wrap2<
; 64   :           ConverterGenerator,unwrapped_type,cpp_to_lua
; 65   :       >::type cv;
; 66   : 
; 67   :       cv.apply(

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	??$implicit_cast@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@boost@@YAABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV123@@Z ; boost::implicit_cast<luabind::adl::iterator_proxy<luabind::detail::basic_access> const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cv$[ebp]
	call	??$apply@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_converter@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >::apply<luabind::adl::iterator_proxy<luabind::detail::basic_access> >

; 68   :           interpreter
; 69   :         , boost::implicit_cast<
; 70   :               BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 71   :           >(value)
; 72   :       );
; 73   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@push_aux
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@push_aux:
	DD	1
	DD	$LN4@push_aux
$LN4@push_aux:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@push_aux
$LN3@push_aux:
	DB	99					; 00000063H
	DB	118					; 00000076H
	DB	0
??$push_aux@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@PAUdefault_policy@01@@Z ENDP ; luabind::detail::push_aux<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::default_policy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push_aux@$$CBVobject@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@PAUdefault_policy@01@@Z
_TEXT	SEGMENT
_cv$ = -5						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push_aux@$$CBVobject@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@PAUdefault_policy@01@@Z PROC ; luabind::detail::push_aux<luabind::adl::object const ,luabind::detail::default_policy>, COMDAT

; 56   :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 57   :       typedef typename boost::mpl::if_<
; 58   :           boost::is_reference_wrapper<T>
; 59   :         , BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 60   :         , T
; 61   :       >::type unwrapped_type;
; 62   : 
; 63   :       typename mpl::apply_wrap2<
; 64   :           ConverterGenerator,unwrapped_type,cpp_to_lua
; 65   :       >::type cv;
; 66   : 
; 67   :       cv.apply(

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	??$implicit_cast@ABVobject@adl@luabind@@@boost@@YAABVobject@adl@luabind@@ABV123@@Z ; boost::implicit_cast<luabind::adl::object const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cv$[ebp]
	call	??$apply@Vobject@adl@luabind@@@?$value_wrapper_converter@$$CBVobject@adl@luabind@@@detail@luabind@@QAEXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::detail::value_wrapper_converter<luabind::adl::object const >::apply<luabind::adl::object>

; 68   :           interpreter
; 69   :         , boost::implicit_cast<
; 70   :               BOOST_DEDUCED_TYPENAME boost::unwrap_reference<T>::type&
; 71   :           >(value)
; 72   :       );
; 73   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@push_aux
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@push_aux:
	DD	1
	DD	$LN4@push_aux
$LN4@push_aux:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@push_aux
$LN3@push_aux:
	DB	99					; 00000063H
	DB	118					; 00000076H
	DB	0
??$push_aux@$$CBVobject@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@PAUdefault_policy@01@@Z ENDP ; luabind::detail::push_aux<luabind::adl::object const ,luabind::detail::default_policy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBIUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIABUnull_type@01@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push@$$CBIUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIABUnull_type@01@@Z PROC ; luabind::detail::push<unsigned int const ,luabind::detail::null_type>, COMDAT

; 77   :   {

	push	ebp
	mov	ebp, esp

; 78   :       typedef typename find_conversion_policy<
; 79   :           0
; 80   :         , Policies
; 81   :       >::type converter_policy;
; 82   : 
; 83   :       push_aux(interpreter, value, (converter_policy*)0);

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	??$push_aux@$$CBIUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIPAUdefault_policy@01@@Z ; luabind::detail::push_aux<unsigned int const ,luabind::detail::default_policy>
	add	esp, 12					; 0000000cH

; 84   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$push@$$CBIUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIABUnull_type@01@@Z ENDP ; luabind::detail::push<unsigned int const ,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z
_TEXT	SEGMENT
tv81 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -21						; size = 1
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_f$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z PROC ; luabind::make_function<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 106  :     return detail::make_function_aux(

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@make_funct
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_object_impl@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@detail@luabind@@QAE@P6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>::function_object_impl<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@make_funct
$LN3@make_funct:
	mov	DWORD PTR tv81[ebp], 0
$LN4@make_funct:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?make_function_aux@detail@luabind@@YA?AVobject@adl@2@PAUlua_State@@PAUfunction_object@12@@Z ; luabind::detail::make_function_aux
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  :         L
; 108  :       , new detail::function_object_impl<F, Signature, Policies>(
; 109  :             f, Policies()
; 110  :         )
; 111  :     );
; 112  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z ENDP ; luabind::make_function<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\deduce_signature.hpp
;	COMDAT ??$deduce_signature@Uclass_info@luabind@@ABVargument@adl@2@@detail@luabind@@YA?AU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@P6A?AUclass_info@1@ABVargument@adl@1@@ZZZ
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
??$deduce_signature@Uclass_info@luabind@@ABVargument@adl@2@@detail@luabind@@YA?AU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@P6A?AUclass_info@1@ABVargument@adl@1@@ZZZ PROC ; luabind::detail::deduce_signature<luabind::class_info,luabind::adl::argument const &>, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 74   :     return BOOST_PP_CAT(mpl::vector,NPLUS1)<R,BOOST_PP_ENUM_PARAMS(N,A)>();

	movzx	eax, BYTE PTR $T1[ebp]

; 75   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deduce_signature@Uclass_info@luabind@@ABVargument@adl@2@@detail@luabind@@YA?AU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@P6A?AUclass_info@1@ABVargument@adl@1@@ZZZ ENDP ; luabind::detail::deduce_signature<luabind::class_info,luabind::adl::argument const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z
_TEXT	SEGMENT
tv81 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -21						; size = 1
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_f$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z PROC ; luabind::make_function<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 106  :     return detail::make_function_aux(

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@make_funct
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_object_impl@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@detail@luabind@@QAE@P6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>::function_object_impl<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@make_funct
$LN3@make_funct:
	mov	DWORD PTR tv81[ebp], 0
$LN4@make_funct:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?make_function_aux@detail@luabind@@YA?AVobject@adl@2@PAUlua_State@@PAUfunction_object@12@@Z ; luabind::detail::make_function_aux
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  :         L
; 108  :       , new detail::function_object_impl<F, Signature, Policies>(
; 109  :             f, Policies()
; 110  :         )
; 111  :     );
; 112  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z ENDP ; luabind::make_function<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\deduce_signature.hpp
;	COMDAT ??$deduce_signature@Vobject@adl@luabind@@PAUlua_State@@@detail@luabind@@YA?AU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@P6A?AVobject@adl@1@PAUlua_State@@@ZZZ
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
??$deduce_signature@Vobject@adl@luabind@@PAUlua_State@@@detail@luabind@@YA?AU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@P6A?AVobject@adl@1@PAUlua_State@@@ZZZ PROC ; luabind::detail::deduce_signature<luabind::adl::object,lua_State *>, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 74   :     return BOOST_PP_CAT(mpl::vector,NPLUS1)<R,BOOST_PP_ENUM_PARAMS(N,A)>();

	movzx	eax, BYTE PTR $T1[ebp]

; 75   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deduce_signature@Vobject@adl@luabind@@PAUlua_State@@@detail@luabind@@YA?AU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@P6A?AVobject@adl@1@PAUlua_State@@@ZZZ ENDP ; luabind::detail::deduce_signature<luabind::adl::object,lua_State *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_next$ = 8						; size = 4
_interpreter$ = 12					; size = 4
_key$ = 16						; size = 4
??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><char const *>, COMDAT
; _this$ = ecx

; 586  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 583  :         : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 584  :         , m_key_index(lua_gettop(interpreter) + 1)

	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 585  :         , m_next(next)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+8], eax

; 587  :           detail::push(m_interpreter, key);

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z ; luabind::detail::push<char const * const>
	add	esp, 8

; 588  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><char const *>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z
_TEXT	SEGMENT
tv81 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -21						; size = 1
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_f$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z PROC ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 106  :     return detail::make_function_aux(

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@make_funct
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@12@ABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@make_funct
$LN3@make_funct:
	mov	DWORD PTR tv81[ebp], 0
$LN4@make_funct:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?make_function_aux@detail@luabind@@YA?AVobject@adl@2@PAUlua_State@@PAUfunction_object@12@@Z ; luabind::detail::make_function_aux
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  :         L
; 108  :       , new detail::function_object_impl<F, Signature, Policies>(
; 109  :             f, Policies()
; 110  :         )
; 111  :     );
; 112  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z ENDP ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\property.hpp
;	COMDAT ??R?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??R?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@2@@Z PROC ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator(), COMDAT
; _this$ = ecx

; 18   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 19   :         return const_cast<Class&>(x).*mem_ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 20   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@2@@Z ENDP ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\property.hpp
;	COMDAT ??0?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QAE@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mem_ptr$ = 8						; size = 4
??0?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QAE@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 15   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 14   :       : mem_ptr(mem_ptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mem_ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 15   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QAE@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\make_function.hpp
;	COMDAT ??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z
_TEXT	SEGMENT
tv81 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -21						; size = 1
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_f$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z PROC ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 106  :     return detail::make_function_aux(

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@make_funct
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_object_impl@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@detail@luabind@@QAE@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@12@ABUnull_type@12@@Z ; luabind::detail::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>::function_object_impl<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@make_funct
$LN3@make_funct:
	mov	DWORD PTR tv81[ebp], 0
$LN4@make_funct:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?make_function_aux@detail@luabind@@YA?AVobject@adl@2@PAUlua_State@@PAUfunction_object@12@@Z ; luabind::detail::make_function_aux
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  :         L
; 108  :       , new detail::function_object_impl<F, Signature, Policies>(
; 109  :             f, Policies()
; 110  :         )
; 111  :     );
; 112  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z ENDP ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\property.hpp
;	COMDAT ??R?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QBE?AVobject@adl@2@ABUclass_info@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??R?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QBE?AVobject@adl@2@ABUclass_info@2@@Z PROC ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::operator(), COMDAT
; _this$ = ecx

; 18   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 19   :         return const_cast<Class&>(x).*mem_ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@ABV012@@Z
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 20   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QBE?AVobject@adl@2@ABUclass_info@2@@Z ENDP ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\property.hpp
;	COMDAT ??0?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QAE@PQclass_info@2@Vobject@adl@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mem_ptr$ = 8						; size = 4
??0?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QAE@PQclass_info@2@Vobject@adl@2@@Z PROC ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>, COMDAT
; _this$ = ecx

; 15   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 14   :       : mem_ptr(mem_ptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mem_ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 15   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QAE@PQclass_info@2@Vobject@adl@2@@Z ENDP ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 669  :         }
; 670  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::~function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::~function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z
_TEXT	SEGMENT
tv91 = -60						; size = 4
tv64 = -56						; size = 4
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -33						; size = 1
_fn$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z PROC ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::register_, COMDAT
; _this$ = ecx

; 27   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   :           object fn = make_function(L, f, deduce_signature(f), policies);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$deduce_signature@Vobject@adl@luabind@@PAUlua_State@@@detail@luabind@@YA?AU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@P6A?AVobject@adl@1@PAUlua_State@@@ZZZ ; luabind::detail::deduce_signature<luabind::adl::object,lua_State *>
	add	esp, 4
	mov	BYTE PTR $T4[ebp], al
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	push	eax
	movzx	ecx, BYTE PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fn$[ebp]
	push	edx
	call	??$make_function@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@3@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AV120@0@ZU?$vector2@Vobject@adl@luabind@@PAUlua_State@@@mpl@boost@@Unull_type@detail@0@@Z ; luabind::make_function<luabind::adl::object (__cdecl*)(lua_State *),boost::mpl::vector2<luabind::adl::object,lua_State *>,luabind::detail::null_type>
	add	esp, 20					; 00000014H
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 29   : 
; 30   :           add_overload(

	lea	eax, DWORD PTR _fn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	call	?add_overload@detail@luabind@@YAXABVobject@adl@2@PBD0@Z ; luabind::detail::add_overload
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 31   :               object(from_stack(L, -1))
; 32   :             , name
; 33   :             , fn
; 34   :           );
; 35   :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fn$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@register_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@register_:
	DD	1
	DD	$LN7@register_
$LN7@register_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@register_
$LN5@register_:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _fn$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_@?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@UBEXPAUlua_State@@@Z ENDP ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::register_
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??0?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@QAE@PBDP6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_f$ = 12						; size = 4
_policies$ = 16						; size = 4
??0?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@QAE@PBDP6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z PROC ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 24   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0registration@detail@luabind@@QAE@XZ	; luabind::detail::registration::registration
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@6B@

; 21   :         : name(name)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 22   :         , f(f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 24   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@QAE@PBDP6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ENDP ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
_TEXT	SEGMENT
__Ans$ = -28						; size = 4
__Cvtptr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ PROC ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 921  :     operator auto_ptr_ref<_Other>() noexcept { // convert to compatible auto_ptr_ref

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 922  :         _Other* _Cvtptr = _Myptr; // test implicit conversion

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$[ebp], ecx

; 923  :         auto_ptr_ref<_Other> _Ans(_Cvtptr);

	mov	edx, DWORD PTR __Cvtptr$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>

; 924  :         _Myptr = nullptr; // pass ownership to auto_ptr_ref

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 925  :         return _Ans;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Ans$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 926  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@auto_ptr_r
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@auto_ptr_r:
	DD	1
	DD	$LN5@auto_ptr_r
$LN5@auto_ptr_r:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN3@auto_ptr_r
$LN3@auto_ptr_r:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ENDP ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z PROC ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 895  :     explicit auto_ptr_ref(_Ty* _Right) : _Ref(_Right) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr_ref@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ENDP ; std::auto_ptr_ref<luabind::detail::registration>::auto_ptr_ref<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ
_TEXT	SEGMENT
tv71 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ PROC ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 949  :     ~auto_ptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 950  :         delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@auto_ptr
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN2@auto_ptr
$LN3@auto_ptr:
	mov	DWORD PTR tv71[ebp], 0
$LN2@auto_ptr:

; 951  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ENDP ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z PROC ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 909  :     auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 910  :         _Ty* _Ptr   = _Right._Ref;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 911  :         _Right._Ref = nullptr; // release old

	mov	DWORD PTR __Right$[ebp], 0

; 912  :         _Myptr      = _Ptr; // reset this

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx], edx

; 913  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ENDP ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory
;	COMDAT ??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z PROC ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>, COMDAT
; _this$ = ecx

; 905  :     explicit auto_ptr(_Ty* _Ptr = nullptr) noexcept : _Myptr(_Ptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ENDP ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAE@XZ PROC ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::~function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::~function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z
_TEXT	SEGMENT
tv91 = -60						; size = 4
tv64 = -56						; size = 4
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -33						; size = 1
_fn$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z PROC ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::register_, COMDAT
; _this$ = ecx

; 27   :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   :           object fn = make_function(L, f, deduce_signature(f), policies);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$deduce_signature@Uclass_info@luabind@@ABVargument@adl@2@@detail@luabind@@YA?AU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@P6A?AUclass_info@1@ABVargument@adl@1@@ZZZ ; luabind::detail::deduce_signature<luabind::class_info,luabind::adl::argument const &>
	add	esp, 4
	mov	BYTE PTR $T4[ebp], al
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	push	eax
	movzx	ecx, BYTE PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fn$[ebp]
	push	edx
	call	??$make_function@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@2@@luabind@@YA?AVobject@adl@0@PAUlua_State@@P6A?AUclass_info@0@ABVargument@20@@ZU?$vector2@Uclass_info@luabind@@ABVargument@adl@2@@mpl@boost@@Unull_type@detail@0@@Z ; luabind::make_function<luabind::class_info (__cdecl*)(luabind::adl::argument const &),boost::mpl::vector2<luabind::class_info,luabind::adl::argument const &>,luabind::detail::null_type>
	add	esp, 20					; 00000014H
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 29   : 
; 30   :           add_overload(

	lea	eax, DWORD PTR _fn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	call	?add_overload@detail@luabind@@YAXABVobject@adl@2@PBD0@Z ; luabind::detail::add_overload
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 31   :               object(from_stack(L, -1))
; 32   :             , name
; 33   :             , fn
; 34   :           );
; 35   :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fn$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@register_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@register_:
	DD	1
	DD	$LN7@register_
$LN7@register_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@register_
$LN5@register_:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _fn$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_@?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@UBEXPAUlua_State@@@Z ENDP ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::register_
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??0?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@QAE@PBDP6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_f$ = 12						; size = 4
_policies$ = 16						; size = 4
??0?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@QAE@PBDP6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z PROC ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 24   :       {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0registration@detail@luabind@@QAE@XZ	; luabind::detail::registration::registration
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@6B@

; 21   :         : name(name)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 22   :         , f(f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 24   :       {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@QAE@PBDP6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ENDP ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@QBDUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDABUnull_type@01@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push@QBDUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDABUnull_type@01@@Z PROC ; luabind::detail::push<char const * const,luabind::detail::null_type>, COMDAT

; 77   :   {

	push	ebp
	mov	ebp, esp

; 78   :       typedef typename find_conversion_policy<
; 79   :           0
; 80   :         , Policies
; 81   :       >::type converter_policy;
; 82   : 
; 83   :       push_aux(interpreter, value, (converter_policy*)0);

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	??$push_aux@QBDUdefault_policy@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDPAUdefault_policy@01@@Z ; luabind::detail::push_aux<char const * const,luabind::detail::default_policy>
	add	esp, 12					; 0000000cH

; 84   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$push@QBDUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDABUnull_type@01@@Z ENDP ; luabind::detail::push<char const * const,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@ABUnull_type@01@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@ABUnull_type@01@@Z PROC ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::null_type>, COMDAT

; 77   :   {

	push	ebp
	mov	ebp, esp

; 78   :       typedef typename find_conversion_policy<
; 79   :           0
; 80   :         , Policies
; 81   :       >::type converter_policy;
; 82   : 
; 83   :       push_aux(interpreter, value, (converter_policy*)0);

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	??$push_aux@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@PAUdefault_policy@01@@Z ; luabind::detail::push_aux<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::default_policy>
	add	esp, 12					; 0000000cH

; 84   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@ABUnull_type@01@@Z ENDP ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBVobject@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@ABUnull_type@01@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
___formal$ = 16						; size = 4
??$push@$$CBVobject@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@ABUnull_type@01@@Z PROC ; luabind::detail::push<luabind::adl::object const ,luabind::detail::null_type>, COMDAT

; 77   :   {

	push	ebp
	mov	ebp, esp

; 78   :       typedef typename find_conversion_policy<
; 79   :           0
; 80   :         , Policies
; 81   :       >::type converter_policy;
; 82   : 
; 83   :       push_aux(interpreter, value, (converter_policy*)0);

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	??$push_aux@$$CBVobject@adl@luabind@@Udefault_policy@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@PAUdefault_policy@01@@Z ; luabind::detail::push_aux<luabind::adl::object const ,luabind::detail::default_policy>
	add	esp, 12					; 0000000cH

; 84   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$push@$$CBVobject@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@ABUnull_type@01@@Z ENDP ; luabind::detail::push<luabind::adl::object const ,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBI@detail@luabind@@YAXPAUlua_State@@ABI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
??$push@$$CBI@detail@luabind@@YAXPAUlua_State@@ABI@Z PROC ; luabind::detail::push<unsigned int const >, COMDAT

; 88   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 89   :       push(interpreter, value, null_type());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	??$push@$$CBIUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABIABUnull_type@01@@Z ; luabind::detail::push<unsigned int const ,luabind::detail::null_type>
	add	esp, 12					; 0000000cH

; 90   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$push@$$CBI@detail@luabind@@YAXPAUlua_State@@ABI@Z ENDP ; luabind::detail::push<unsigned int const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 8
_pop$ = -28						; size = 8
_interpreter$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_get$ = 12						; size = 4
??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z PROC ; luabind::property<luabind::adl::object>, COMDAT

; 1375 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 1376 :     lua_State* interpreter = value_wrapper_traits<GetValueWrapper>::interpreter(

	mov	eax, DWORD PTR _get$[ebp]
	push	eax
	call	?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::interpreter
	add	esp, 4
	mov	DWORD PTR _interpreter$[ebp], eax

; 1377 :         get
; 1378 :     );
; 1379 : 
; 1380 :     value_wrapper_traits<GetValueWrapper>::unwrap(interpreter, get);

	mov	ecx, DWORD PTR _get$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 1381 :     lua_pushnil(interpreter);

	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	call	_lua_pushnil
	add	esp, 4

; 1382 : 
; 1383 :     lua_pushcclosure(interpreter, &detail::property_tag, 2);

	push	2
	push	OFFSET ?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::property_tag
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 1384 :     detail::stack_pop pop(interpreter, 1);

	push	1
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1385 : 
; 1386 :     return object(from_stack(interpreter, -1));

	push	-1
	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1387 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@property
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@property:
	DD	1
	DD	$LN8@property
$LN8@property:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN6@property
$LN6@property:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z ENDP ; luabind::property<luabind::adl::object>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z PROC ; luabind::adl::object::operator[]<char const *>, COMDAT
; _this$ = ecx

; 760  :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 761  :           return index_proxy<object>(

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ; luabind::handle::interpreter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABQBD@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><char const *>
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 762  :               *this, m_handle.interpreter(), key
; 763  :           );
; 764  :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z ENDP ; luabind::adl::object::operator[]<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]

; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 67   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??$make_get@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$bool_@$00@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -6						; size = 1
$T4 = -5						; size = 1
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_mem_ptr$ = 16						; size = 4
___formal$ = 20						; size = 1
??$make_get@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$bool_@$00@mpl@boost@@@Z PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 427  :             {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 428  :                 typedef typename reference_result<D>::type result_type;
; 429  :                 typedef typename inject_dependency_policy<
; 430  :                     D, GetPolicies>::type policies;
; 431  : 
; 432  :                 return make_function(

	movzx	eax, BYTE PTR $T4[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _mem_ptr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@QAE@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$make_function@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@luabind@@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V34@@detail@0@U?$vector2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUclass_info@luabind@@@mpl@boost@@Unull_type@50@@Z ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,boost::mpl::vector2<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 433  :                     L
; 434  :                   , access_member_ptr<T, D, result_type>(mem_ptr)
; 435  :                   , mpl::vector2<result_type, Class const&>()
; 436  :                   , policies()
; 437  :                 );
; 438  :             }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$make_get@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$bool_@$00@mpl@boost@@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??$make_get@Uclass_info@luabind@@Vobject@adl@2@@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V342@U?$bool_@$00@mpl@boost@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -6						; size = 1
$T4 = -5						; size = 1
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_mem_ptr$ = 16						; size = 4
___formal$ = 20						; size = 1
??$make_get@Uclass_info@luabind@@Vobject@adl@2@@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V342@U?$bool_@$00@mpl@boost@@@Z PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,luabind::adl::object>, COMDAT
; _this$ = ecx

; 427  :             {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 428  :                 typedef typename reference_result<D>::type result_type;
; 429  :                 typedef typename inject_dependency_policy<
; 430  :                     D, GetPolicies>::type policies;
; 431  : 
; 432  :                 return make_function(

	movzx	eax, BYTE PTR $T4[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _mem_ptr$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@QAE@PQclass_info@2@Vobject@adl@2@@Z ; luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$make_function@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@luabind@@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@23@@luabind@@YA?AVobject@adl@0@PAUlua_State@@U?$access_member_ptr@Uclass_info@luabind@@Vobject@adl@2@V342@@detail@0@U?$vector2@Vobject@adl@luabind@@ABUclass_info@3@@mpl@boost@@Unull_type@50@@Z ; luabind::make_function<luabind::detail::access_member_ptr<luabind::class_info,luabind::adl::object,luabind::adl::object>,boost::mpl::vector2<luabind::adl::object,luabind::class_info const &>,luabind::detail::null_type>
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 433  :                     L
; 434  :                   , access_member_ptr<T, D, result_type>(mem_ptr)
; 435  :                   , mpl::vector2<result_type, Class const&>()
; 436  :                   , policies()
; 437  :                 );
; 438  :             }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$make_get@Uclass_info@luabind@@Vobject@adl@2@@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V342@U?$bool_@$00@mpl@boost@@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 130  :     if (_Block_size <= _Bytes) {

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET $SG111702
	push	OFFSET $SG111703
	push	0
	push	135					; 00000087H
	push	OFFSET $SG111704
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	135					; 00000087H
	push	OFFSET $SG111705
	push	OFFSET $SG111706
	push	OFFSET $SG111707
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 143  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 244  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 245  :     if constexpr (is_pointer_v<_Iter>) {
; 246  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 247  :     } else {
; 248  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 249  :     }
; 250  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT

; 244  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 245  :     if constexpr (is_pointer_v<_Iter>) {
; 246  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 247  :     } else {
; 248  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 249  :     }
; 250  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ
text$di	SEGMENT
$T1 = -4						; size = 4
??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ PROC ; `dynamic initializer for 'luabind::detail::registered_class<luabind::detail::null_type>::id'', COMDAT

; 159  : class_id const registered_class<T>::id = allocate_class_id(typeid(T));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	push	OFFSET ??_R0?AUnull_type@detail@luabind@@@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z ; luabind::detail::allocate_class_id
	add	esp, 4
	mov	DWORD PTR ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB, eax ; luabind::detail::registered_class<luabind::detail::null_type>::id
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB@@YAXXZ ENDP ; `dynamic initializer for 'luabind::detail::registered_class<luabind::detail::null_type>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ??__E?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB@@YAXXZ
text$di	SEGMENT
$T1 = -4						; size = 4
??__E?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB@@YAXXZ PROC ; `dynamic initializer for 'luabind::detail::registered_class<luabind::class_info>::id'', COMDAT

; 159  : class_id const registered_class<T>::id = allocate_class_id(typeid(T));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	push	OFFSET ??_R0?AUclass_info@luabind@@@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?allocate_class_id@detail@luabind@@YAIABVtype_id@2@@Z ; luabind::detail::allocate_class_id
	add	esp, 4
	mov	DWORD PTR ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB, eax ; luabind::detail::registered_class<luabind::class_info>::id
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB@@YAXXZ ENDP ; `dynamic initializer for 'luabind::detail::registered_class<luabind::class_info>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 979  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 980  :     // deallocate a plain pointer using an allocator
; 981  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 982  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 983  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 984  :     } else {
; 985  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 986  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 987  :     }
; 988  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z
_TEXT	SEGMENT
tv145 = -52						; size = 4
tv142 = -48						; size = 4
tv150 = -44						; size = 4
tv93 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_f$ = 16						; size = 4
_policies$ = 20						; size = 4
??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z PROC ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 49   :     return scope(std::auto_ptr<detail::registration>(

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@def
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_registration@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@detail@luabind@@QAE@PBDP6A?AVobject@adl@2@PAUlua_State@@@ZABUnull_type@12@@Z ; luabind::detail::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>::function_registration<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN4@def
$LN3@def:
	mov	DWORD PTR tv93[ebp], 0
$LN4@def:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	ecx
	mov	esi, esp
	mov	DWORD PTR $T7[ebp], esp
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv142[ebp]
	call	??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, esi
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z ; luabind::scope::scope
	mov	DWORD PTR tv145[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   :         new detail::function_registration<F, Policies>(name, f, policies)));
; 51   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z$1:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z ENDP ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z
_TEXT	SEGMENT
tv145 = -52						; size = 4
tv142 = -48						; size = 4
tv150 = -44						; size = 4
tv93 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_f$ = 16						; size = 4
_policies$ = 20						; size = 4
??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z PROC ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 49   :     return scope(std::auto_ptr<detail::registration>(

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@def
	mov	eax, DWORD PTR _policies$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$function_registration@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@detail@luabind@@QAE@PBDP6A?AUclass_info@2@ABVargument@adl@2@@ZABUnull_type@12@@Z ; luabind::detail::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>::function_registration<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN4@def
$LN3@def:
	mov	DWORD PTR tv93[ebp], 0
$LN4@def:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	ecx
	mov	esi, esp
	mov	DWORD PTR $T7[ebp], esp
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@PAUregistration@detail@luabind@@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv142[ebp]
	call	??$?BUregistration@detail@luabind@@@?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE?AU?$auto_ptr_ref@Uregistration@detail@luabind@@@1@XZ ; std::auto_ptr<luabind::detail::registration>::operator<luabind::detail::registration> std::auto_ptr_ref<luabind::detail::registration>
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, esi
	call	??0?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@U?$auto_ptr_ref@Uregistration@detail@luabind@@@1@@Z ; std::auto_ptr<luabind::detail::registration>::auto_ptr<luabind::detail::registration>
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0scope@luabind@@QAE@V?$auto_ptr@Uregistration@detail@luabind@@@std@@@Z ; luabind::scope::scope
	mov	DWORD PTR tv145[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   :         new detail::function_registration<F, Policies>(name, f, policies)));
; 51   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z$1:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$auto_ptr@Uregistration@detail@luabind@@@std@@QAE@XZ ; std::auto_ptr<luabind::detail::registration>::~auto_ptr<luabind::detail::registration>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z ENDP ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
_TEXT	SEGMENT
tv81 = -52						; size = 4
tv83 = -48						; size = 4
tv79 = -44						; size = 4
tv82 = -40						; size = 4
$T2 = -36						; size = 8
$T3 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_context$ = 12						; size = 4
_get_$ = 16						; size = 4
___formal$ = 20						; size = 1
?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux, COMDAT
; _this$ = ecx

; 472  :             {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 473  :                 context[name] = property(get_);

	mov	eax, DWORD PTR _get_$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z ; luabind::property<luabind::adl::object>
	add	esp, 8
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv79[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _context$[ebp]
	call	??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z ; luabind::adl::object::operator[]<char const *>
	mov	DWORD PTR tv83[ebp], eax
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv81[ebp]
	call	??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 474  :             }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
_TEXT	SEGMENT
tv95 = -60						; size = 4
tv65 = -56						; size = 4
$T2 = -52						; size = 8
$T3 = -41						; size = 1
$T4 = -40						; size = 8
_context$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_, COMDAT
; _this$ = ecx

; 408  :             {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 409  :                 object context(from_stack(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	lea	ecx, DWORD PTR _context$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 410  :                 register_aux(

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$make_get@Uclass_info@luabind@@Vobject@adl@2@@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V342@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,luabind::adl::object>
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	lea	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 411  :                     L
; 412  :                   , context
; 413  :                   , make_get(L, get, boost::is_member_object_pointer<Get>())
; 414  :                   , set
; 415  :                 );
; 416  :             }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _context$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@register_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@register_:
	DD	1
	DD	$LN7@register_
$LN7@register_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@register_
$LN5@register_:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _context$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_@?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??0?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@Vobject@adl@2@ABUnull_type@12@22@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_get$ = 12						; size = 4
_get_policies$ = 16					; size = 4
_set$ = 20						; size = 4
_set_policies$ = 24					; size = 4
??0?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@Vobject@adl@2@ABUnull_type@12@22@Z PROC ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 405  :             {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0registration@detail@luabind@@QAE@XZ	; luabind::detail::registration::registration
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@

; 400  :               : name(name)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 401  :               , get(get)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _get$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 405  :             {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@Vobject@adl@2@ABUnull_type@12@22@Z ENDP ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAEPAXI@Z ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1registration@detail@luabind@@UAE@XZ	; luabind::detail::registration::~registration
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UAE@XZ ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::~property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
_TEXT	SEGMENT
tv81 = -52						; size = 4
tv83 = -48						; size = 4
tv79 = -44						; size = 4
tv82 = -40						; size = 4
$T2 = -36						; size = 8
$T3 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_context$ = 12						; size = 4
_get_$ = 16						; size = 4
___formal$ = 20						; size = 1
?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux, COMDAT
; _this$ = ecx

; 472  :             {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 473  :                 context[name] = property(get_);

	mov	eax, DWORD PTR _get_$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??$property@Vobject@adl@luabind@@@luabind@@YA?AVobject@adl@0@ABV120@@Z ; luabind::property<luabind::adl::object>
	add	esp, 8
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv79[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _context$[ebp]
	call	??$?APBD@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABQBD@Z ; luabind::adl::object::operator[]<char const *>
	mov	DWORD PTR tv83[ebp], eax
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv81[ebp]
	call	??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 474  :             }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
_TEXT	SEGMENT
tv95 = -60						; size = 4
tv65 = -56						; size = 4
$T2 = -52						; size = 8
$T3 = -41						; size = 1
$T4 = -40						; size = 8
_context$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_, COMDAT
; _this$ = ecx

; 408  :             {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 409  :                 object context(from_stack(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	lea	ecx, DWORD PTR _context$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 410  :                 register_aux(

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &
	movzx	eax, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$make_get@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBE?AVobject@adl@2@PAUlua_State@@PQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$bool_@$00@mpl@boost@@@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::make_get<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	lea	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?register_aux@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QBEXPAUlua_State@@ABVobject@adl@3@1Unull_type@23@@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_aux
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 411  :                     L
; 412  :                   , context
; 413  :                   , make_get(L, get, boost::is_member_object_pointer<Get>())
; 414  :                   , set
; 415  :                 );
; 416  :             }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _context$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@register_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@register_:
	DD	1
	DD	$LN7@register_
$LN7@register_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@register_
$LN5@register_:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _context$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?register_@?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@UBEXPAUlua_State@@@Z ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::register_
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??0?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUnull_type@12@22@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_get$ = 12						; size = 4
_get_policies$ = 16					; size = 4
_set$ = 20						; size = 4
_set_policies$ = 24					; size = 4
??0?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUnull_type@12@22@Z PROC ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 405  :             {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0registration@detail@luabind@@QAE@XZ	; luabind::detail::registration::registration
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@6B@

; 400  :               : name(name)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 401  :               , get(get)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _get$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 405  :             {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUnull_type@12@22@Z ENDP ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z PROC ; luabind::detail::push<char const * const>, COMDAT

; 88   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 89   :       push(interpreter, value, null_type());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	??$push@QBDUnull_type@detail@luabind@@@detail@luabind@@YAXPAUlua_State@@ABQBDABUnull_type@01@@Z ; luabind::detail::push<char const * const,luabind::detail::null_type>
	add	esp, 12					; 0000000cH

; 90   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z ENDP ; luabind::detail::push<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z PROC ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >, COMDAT

; 88   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 89   :       push(interpreter, value, null_type());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@ABUnull_type@01@@Z ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const ,luabind::detail::null_type>
	add	esp, 12					; 0000000cH

; 90   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ENDP ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_next$ = 8						; size = 4
_interpreter$ = 12					; size = 4
_key$ = 16						; size = 4
??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><luabind::adl::object>, COMDAT
; _this$ = ecx

; 586  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 583  :         : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 584  :         , m_key_index(lua_gettop(interpreter) + 1)

	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 585  :         , m_next(next)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+8], eax

; 587  :           detail::push(m_interpreter, key);

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z ; luabind::detail::push<luabind::adl::object const >
	add	esp, 8

; 588  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><luabind::adl::object>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z PROC ; luabind::detail::push<luabind::adl::object const >, COMDAT

; 88   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 89   :       push(interpreter, value, null_type());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	??$push@$$CBVobject@adl@luabind@@Unull_type@detail@3@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@ABUnull_type@01@@Z ; luabind::detail::push<luabind::adl::object const ,luabind::detail::null_type>
	add	esp, 12					; 0000000cH

; 90   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z ENDP ; luabind::detail::push<luabind::adl::object const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_next$ = 8						; size = 4
_interpreter$ = 12					; size = 4
_key$ = 16						; size = 4
??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><unsigned int>, COMDAT
; _this$ = ecx

; 586  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 583  :         : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 584  :         , m_key_index(lua_gettop(interpreter) + 1)

	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 585  :         , m_next(next)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+8], eax

; 587  :           detail::push(m_interpreter, key);

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@$$CBI@detail@luabind@@YAXPAUlua_State@@ABI@Z ; luabind::detail::push<unsigned int const >
	add	esp, 8

; 588  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><unsigned int>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_p$ = 12						; size = 4
??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z PROC ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::unwrap<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT

; 712  :     {

	push	ebp
	mov	ebp, esp

; 713  :         // TODO: Why const_cast?
; 714  :         const_cast<Proxy&>(p).push(interpreter);

	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?push@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAEXPAUlua_State@@@Z ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::push

; 715  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ENDP ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::unwrap<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$interpreter@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??$interpreter@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z PROC ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::interpreter<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT

; 706  :     {

	push	ebp
	mov	ebp, esp

; 707  :         return p.interpreter();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?interpreter@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::interpreter

; 708  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$interpreter@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ENDP ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::interpreter<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??$equal@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V123@@iterator_core_access@iterators@boost@@CA_NABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@0U?$bool_@$00@mpl@2@@Z
_TEXT	SEGMENT
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
___formal$ = 16						; size = 1
??$equal@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V123@@iterator_core_access@iterators@boost@@CA_NABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@0U?$bool_@$00@mpl@2@@Z PROC ; boost::iterators::iterator_core_access::equal<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::detail::basic_iterator<luabind::detail::basic_access> >, COMDAT

; 567  :       {

	push	ebp
	mov	ebp, esp

; 568  :           return f1.equal(f2);

	mov	eax, DWORD PTR _f2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f1$[ebp]
	call	?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z ; luabind::detail::basic_iterator<luabind::detail::basic_access>::equal

; 569  :       }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$equal@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V123@@iterator_core_access@iterators@boost@@CA_NABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@0U?$bool_@$00@mpl@2@@Z ENDP ; boost::iterators::iterator_core_access::equal<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::detail::basic_iterator<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@PAX@std@@YA$$QAPAXAAPAX@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAX@std@@YA$$QAPAXAAPAX@Z PROC		; std::forward<void *>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@PAX@std@@YA$$QAPAXAAPAX@Z ENDP		; std::forward<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z PROC ; std::move<lua_State * &>, COMDAT

; 1437 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1438 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1439 : }

	pop	ebp
	ret	0
??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ENDP ; std::move<lua_State * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1437 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1438 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1439 : }

	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4903 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4904 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4905 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4906 :         if (_New_size > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 4907 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4908 :         }
; 4909 : 
; 4910 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 4911 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4912 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4913 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4914 : 
; 4915 : #if _HAS_CXX20
; 4916 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4917 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4918 :         }
; 4919 : #endif // _HAS_CXX20
; 4920 :         _Mypair._Myval2._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4921 :         _ASAN_STRING_REMOVE(*this);
; 4922 :         _Mypair._Myval2._Mysize = _New_size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 4923 :         _Mypair._Myval2._Myres  = _New_capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4924 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	edx, DWORD PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4925 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 4926 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4927 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 4928 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4929 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4930 :         }
; 4931 : 
; 4932 :         _ASAN_STRING_CREATE(*this);
; 4933 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4934 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN8@Reallocate:
	DD	1
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Reallocate
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 3543 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3541 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3542 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3543 :             },

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1339 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1340 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1341 :             _Delete_plain_internal(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1342 :         }
; 1343 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1325 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1326 :         // create a new _Container_proxy pointing at _Mycont
; 1327 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1328 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1329 :         _Mycont._Myproxy = _Ptr;

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1330 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 256  :     }
; 257  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z PROC	; std::_Construct_in_place<char *,char * &>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ENDP	; std::_Construct_in_place<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??$generate_baseclass_list@Unull_type@detail@luabind@@U123@U123@U123@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@U?$bases@Unull_type@detail@luabind@@U123@U123@U123@@luabind@@@detail@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$generate_baseclass_list@Unull_type@detail@luabind@@U123@U123@U123@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@U?$bases@Unull_type@detail@luabind@@U123@U123@U123@@luabind@@@detail@1@@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::generate_baseclass_list<luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>, COMDAT
; _this$ = ecx

; 556  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 557  : 			BOOST_PP_REPEAT(LUABIND_MAX_BASES, LUABIND_GEN_BASE_INFO, _)

	movzx	eax, BYTE PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info
	movzx	ecx, BYTE PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info

; 558  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$generate_baseclass_list@Unull_type@detail@luabind@@U123@U123@U123@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@U?$bases@Unull_type@detail@luabind@@U123@U123@U123@@luabind@@@detail@1@@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::generate_baseclass_list<luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z PROC ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ENDP ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Convert_size@II@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@II@std@@YAII@Z PROC			; std::_Convert_size<unsigned int,unsigned int>, COMDAT

; 964  :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

	push	ebp
	mov	ebp, esp

; 965  :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 966  :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 967  :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 968  : 
; 969  :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 970  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 971  :             _Xlength_error("size is too long for _Size_type");
; 972  :         }
; 973  :     }
; 974  : 
; 975  :     return static_cast<_Size_type>(_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 976  : }

	pop	ebp
	ret	0
??$_Convert_size@II@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1375 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1380 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1437 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1438 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1439 : }

	pop	ebp
	ret	0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 822  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1063 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1064 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1065 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1066 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1067 :         _New_proxy->_Mycont = this;

	mov	edx, DWORD PTR __New_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1068 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 991  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp

; 992  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 993  :     using _Ty = typename _Alloc::value_type;
; 994  :     _Ptr->~_Ty();
; 995  :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 996  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 832  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 833  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 835  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??$dereference@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CA?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@5@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??$dereference@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CA?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@5@@Z PROC ; boost::iterators::iterator_core_access::dereference<luabind::detail::basic_iterator<luabind::detail::basic_access> >, COMDAT

; 549  :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 550  :           return f.dereference();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	call	?dereference@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::dereference
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 551  :       }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$dereference@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CA?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@5@@Z ENDP ; boost::iterators::iterator_core_access::dereference<luabind::detail::basic_iterator<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??$increment@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CAXAAV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
??$increment@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CAXAAV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@Z PROC ; boost::iterators::iterator_core_access::increment<luabind::detail::basic_iterator<luabind::detail::basic_access> >, COMDAT

; 555  :       {

	push	ebp
	mov	ebp, esp

; 556  :           f.increment();

	mov	ecx, DWORD PTR _f$[ebp]
	call	?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::increment

; 557  :       }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$increment@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CAXAAV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@Z ENDP ; boost::iterators::iterator_core_access::increment<luabind::detail::basic_iterator<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z PROC ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to, COMDAT

; 312  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 313  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
	add	esp, 4

; 314  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ENDP ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@Z@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@Z@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_f$ = 16						; size = 4
??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@Z@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@Z@Z PROC ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *)>, COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 56   :     return def(name, f, detail::null_type());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@ZUnull_type@detail@3@@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@ZABUnull_type@detail@0@@Z ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *),luabind::detail::null_type>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@Z@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@Z@Z ENDP ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\function.hpp
;	COMDAT ??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@Z@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@Z@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_f$ = 16						; size = 4
??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@Z@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@Z@Z PROC ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &)>, COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T1[ebp], 0

; 56   :     return def(name, f, detail::null_type());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@ZUnull_type@detail@2@@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@ZABUnull_type@detail@0@@Z ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &),luabind::detail::null_type>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@Z@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@Z@Z ENDP ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z
_TEXT	SEGMENT
tv88 = -32						; size = 4
$T2 = -27						; size = 1
$T3 = -26						; size = 1
$T4 = -25						; size = 1
$T5 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_mem_ptr$ = 12						; size = 4
??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,luabind::adl::object>, COMDAT
; _this$ = ecx

; 656  :         {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 657  :             typedef detail::property_registration<T, D C::*, detail::null_type>
; 658  :                 registration_type;
; 659  : 
; 660  :             this->add_member(

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN3@def_readon
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR _mem_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0?$property_registration@Uclass_info@luabind@@PQ12@Vobject@adl@2@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@Vobject@adl@2@ABUnull_type@12@22@Z ; luabind::detail::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,luabind::adl::object luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN4@def_readon
$LN3@def_readon:
	mov	DWORD PTR tv88[ebp], 0
$LN4@def_readon:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ; luabind::detail::class_base::add_member

; 661  :                 new registration_type(name, mem_ptr, detail::null_type()));
; 662  :             return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 663  :         }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,luabind::adl::object>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv88 = -32						; size = 4
$T2 = -27						; size = 1
$T3 = -26						; size = 1
$T4 = -25						; size = 1
$T5 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_mem_ptr$ = 12						; size = 4
??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 656  :         {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 657  :             typedef detail::property_registration<T, D C::*, detail::null_type>
; 658  :                 registration_type;
; 659  : 
; 660  :             this->add_member(

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN3@def_readon
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR _mem_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0?$property_registration@Uclass_info@luabind@@PQ12@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Unull_type@detail@2@U562@U562@@detail@luabind@@QAE@PBDABQQclass_info@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUnull_type@12@22@Z ; luabind::detail::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>::property_registration<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > luabind::class_info::*,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN4@def_readon
$LN3@def_readon:
	mov	DWORD PTR tv88[ebp], 0
$LN4@def_readon:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add_member@class_base@detail@luabind@@QAEXPAUregistration@23@@Z ; luabind::detail::class_base::add_member

; 661  :                 new registration_type(name, mem_ptr, detail::null_type()));
; 662  :             return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 663  :         }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::~class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1class_base@detail@luabind@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::~class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?init@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXXZ
_TEXT	SEGMENT
$T1 = -13						; size = 1
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?init@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXXZ PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::init, COMDAT
; _this$ = ecx

; 766  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 			typedef typename detail::extract_parameter<
; 768  : 					parameters_type
; 769  : 				,	boost::mpl::or_<
; 770  : 							detail::is_bases<boost::mpl::_>
; 771  : 						,	boost::is_base_and_derived<boost::mpl::_, T>
; 772  : 					>
; 773  : 				,	no_bases
; 774  : 			>::type bases_t;
; 775  : 
; 776  : 			typedef typename 
; 777  : 				boost::mpl::if_<detail::is_bases<bases_t>
; 778  : 					,	bases_t
; 779  : 					,	bases<bases_t>
; 780  : 				>::type Base;
; 781  : 	
; 782  :             class_base::init(

	push	OFFSET ??_R0?AUnull_type@detail@luabind@@@8
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	push	OFFSET ??_R0?AUclass_info@luabind@@@8
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id
	mov	eax, DWORD PTR ?id@?$registered_class@Unull_type@detail@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::detail::null_type>::id
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR ?id@?$registered_class@Uclass_info@luabind@@@detail@luabind@@2IB ; luabind::detail::registered_class<luabind::class_info>::id
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@class_base@detail@luabind@@QAEXABVtype_id@3@I0I@Z ; luabind::detail::class_base::init

; 783  :                 typeid(T)
; 784  :               , detail::registered_class<T>::id
; 785  :               , typeid(WrappedType)
; 786  :               , detail::registered_class<WrappedType>::id
; 787  :             );
; 788  : 
; 789  :             add_wrapper_cast((WrappedType*)0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add_wrapper_cast@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXPAUnull_type@detail@2@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::add_wrapper_cast

; 790  : 
; 791  : 			generate_baseclass_list(detail::type_<Base>());

	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$generate_baseclass_list@Unull_type@detail@luabind@@U123@U123@U123@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@U?$bases@Unull_type@detail@luabind@@U123@U123@U123@@luabind@@@detail@1@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::generate_baseclass_list<luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type,luabind::detail::null_type>

; 792  : 		}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXXZ ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?add_wrapper_cast@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXPAUnull_type@detail@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?add_wrapper_cast@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXPAUnull_type@detail@2@@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::add_wrapper_cast, COMDAT
; _this$ = ecx

; 751  :         {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?add_wrapper_cast@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXPAUnull_type@detail@2@@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::add_wrapper_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??0?$static_scope@U?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@@detail@luabind@@QAE@AAU?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_self_$ = 8						; size = 4
??0?$static_scope@U?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@@detail@luabind@@QAE@AAU?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@2@@Z PROC ; luabind::detail::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >, COMDAT
; _this$ = ecx

; 243  : 			{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 			static_scope(T& self_) : self(self_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _self_$[ebp]
	mov	DWORD PTR [eax], ecx

; 244  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$static_scope@U?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@@detail@luabind@@QAE@AAU?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@2@@Z ENDP ; luabind::detail::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>, COMDAT
; _this$ = ecx

; 563  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 562  : 		class_(const char* name): class_base(name), scope(*this)

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0class_base@detail@luabind@@QAE@PBD@Z	; luabind::detail::class_base::class_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$static_scope@U?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@@detail@luabind@@QAE@AAU?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@2@@Z ; luabind::detail::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >::static_scope<luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified> >

; 564  : #ifndef NDEBUG
; 565  : 			detail::check_link_compatibility();

	call	?check_link_compatibility@detail@luabind@@YAXXZ ; luabind::detail::check_link_compatibility

; 566  : #endif
; 567  : 		   	init(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@AAEXXZ ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::init

; 568  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1class_base@detail@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\class.hpp
;	COMDAT ?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z PROC ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info, COMDAT
; _this$ = ecx

; 550  : 		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?gen_base_info@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEXU?$type_@Unull_type@detail@luabind@@@detail@2@@Z ENDP ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::gen_base_info
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::operator=<char const *>, COMDAT
; _this$ = ecx

; 621  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 622  :           value_wrapper_traits<Next>::unwrap(m_interpreter, m_next);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 623  :           detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 624  : 
; 625  :           lua_pushvalue(m_interpreter, m_key_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 626  :           detail::push(m_interpreter, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@QBD@detail@luabind@@YAXPAUlua_State@@ABQBD@Z ; luabind::detail::push<char const * const>
	add	esp, 8

; 627  :           lua_settable(m_interpreter, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settable
	add	esp, 8

; 628  :           return *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR $T2[ebp]

; 629  :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@operator:
	DD	1
	DD	$LN6@operator
$LN6@operator:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN4@operator
$LN4@operator:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::operator=<char const *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator!=, COMDAT
; _this$ = ecx

; 237  :     _NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 238  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv69[ebp]

; 239  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==, COMDAT
; _this$ = ecx

; 228  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN12@operator
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN13@operator
$LN12@operator:
	mov	DWORD PTR tv136[ebp], 0
$LN13@operator:
	movzx	eax, BYTE PTR tv136[ebp]

; 234  :     }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator++, COMDAT
; _this$ = ecx

; 193  :     _Tree_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 194  : #if _ITERATOR_DEBUG_LEVEL == 2
; 195  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 196  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	196					; 000000c4H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	196					; 000000c4H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 197  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 198  : 
; 199  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::operator++

; 200  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 201  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->, COMDAT
; _this$ = ecx

; 189  :     _NODISCARD pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 190  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
	add	esp, 4

; 191  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*, COMDAT
; _this$ = ecx

; 179  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 187  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN4@operator
$LN2@operator:

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$1[ebp], eax
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 55   :             }

	jmp	SHORT $LN2@operator
$LN3@operator:

; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx+8], eax

; 58   :         } else {

	jmp	SHORT $LN5@operator
$LN4@operator:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN5@operator:

; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 63   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 39   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 40   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT
; _this$ = ecx

; 621  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 622  :           value_wrapper_traits<Next>::unwrap(m_interpreter, m_next);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 623  :           detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 624  : 
; 625  :           lua_pushvalue(m_interpreter, m_key_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 626  :           detail::push(m_interpreter, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@$$CBV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::detail::push<luabind::adl::iterator_proxy<luabind::detail::basic_access> const >
	add	esp, 8

; 627  :           lua_settable(m_interpreter, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settable
	add	esp, 8

; 628  :           return *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR $T2[ebp]

; 629  :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@operator:
	DD	1
	DD	$LN6@operator
$LN6@operator:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN4@operator
$LN4@operator:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?AVobject@adl@luabind@@@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABV012@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
??$?AVobject@adl@luabind@@@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABV012@@Z PROC ; luabind::adl::object::operator[]<luabind::adl::object>, COMDAT
; _this$ = ecx

; 760  :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 761  :           return index_proxy<object>(

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ; luabind::handle::interpreter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@0@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><luabind::adl::object>
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 762  :               *this, m_handle.interpreter(), key
; 763  :           );
; 764  :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?AVobject@adl@luabind@@@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABV012@@Z ENDP ; luabind::adl::object::operator[]<luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z PROC ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>, COMDAT
; _this$ = ecx

; 621  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 622  :           value_wrapper_traits<Next>::unwrap(m_interpreter, m_next);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 623  :           detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 624  : 
; 625  :           lua_pushvalue(m_interpreter, m_key_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 626  :           detail::push(m_interpreter, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$push@$$CBVobject@adl@luabind@@@detail@luabind@@YAXPAUlua_State@@ABVobject@adl@1@@Z ; luabind::detail::push<luabind::adl::object const >
	add	esp, 8

; 627  :           lua_settable(m_interpreter, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settable
	add	esp, 8

; 628  :           return *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR $T2[ebp]

; 629  :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@operator:
	DD	1
	DD	$LN6@operator
$LN6@operator:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN4@operator
$LN4@operator:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z ENDP ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>, COMDAT
; _this$ = ecx

; 599  :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 600  :           if (m_interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@index_prox

; 601  :               lua_pop(m_interpreter, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN1@index_prox:

; 602  :       }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >, COMDAT
; _this$ = ecx

; 276  :       ~object_interface() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$object_interface@V?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::object_interface<luabind::adl::index_proxy<luabind::adl::object> >::~object_interface<luabind::adl::index_proxy<luabind::adl::object> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z PROC ; luabind::adl::object::operator[]<unsigned int>, COMDAT
; _this$ = ecx

; 760  :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 761  :           return index_proxy<object>(

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ; luabind::handle::interpreter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0I@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@ABVobject@12@PAUlua_State@@ABI@Z ; luabind::adl::index_proxy<luabind::adl::object>::index_proxy<luabind::adl::object><unsigned int>
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 762  :               *this, m_handle.interpreter(), key
; 763  :           );
; 764  :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z ENDP ; luabind::adl::object::operator[]<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$type@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@YAHABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@0@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
_pop$ = -16						; size = 8
_interpreter$ = -4					; size = 4
_value$ = 8						; size = 4
??$type@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@YAHABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@0@@Z PROC ; luabind::type<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT

; 1285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1286 :     lua_State* interpreter = value_wrapper_traits<ValueWrapper>::interpreter(

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	??$interpreter@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::interpreter<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	add	esp, 4
	mov	DWORD PTR _interpreter$[ebp], eax

; 1287 :         value
; 1288 :     );
; 1289 : 
; 1290 :     value_wrapper_traits<ValueWrapper>::unwrap(interpreter, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	??$unwrap@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$value_wrapper_traits@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@SAXPAUlua_State@@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@1@@Z ; luabind::value_wrapper_traits<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::unwrap<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	add	esp, 8

; 1291 :     detail::stack_pop pop(interpreter, 1);

	push	1
	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop

; 1292 :     return lua_type(interpreter, -1);

	push	-1
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR $T1[ebp]

; 1293 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@type
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@type:
	DD	1
	DD	$LN5@type
$LN5@type:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN4@type
$LN4@type:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
??$type@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@YAHABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@0@@Z ENDP ; luabind::type<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??$?9V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@Usingle_pass_traversal_tag@iterators@boost@@V342@HV012@V342@U567@V342@H@iterators@boost@@YA_NABV?$iterator_facade@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H@01@0@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
$T1 = -1						; size = 1
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??$?9V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@Usingle_pass_traversal_tag@iterators@boost@@V342@HV012@V342@U567@V342@H@iterators@boost@@YA_NABV?$iterator_facade@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H@01@0@Z PROC ; boost::iterators::operator!=<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int>, COMDAT

; 901  :   BOOST_ITERATOR_FACADE_RELATION(!=, return !, equal)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	lea	ecx, DWORD PTR $T1[ebp]
	call	??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	call	??$equal@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V123@@iterator_core_access@iterators@boost@@CA_NABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@0U?$bool_@$00@mpl@2@@Z ; boost::iterators::iterator_core_access::equal<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::detail::basic_iterator<luabind::detail::basic_access> >
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv84[ebp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv84[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?9V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@Usingle_pass_traversal_tag@iterators@boost@@V342@HV012@V342@U567@V342@H@iterators@boost@@YA_NABV?$iterator_facade@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H@01@0@Z ENDP ; boost::iterators::operator!=<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z
_TEXT	SEGMENT
tv166 = -80						; size = 4
tv82 = -76						; size = 4
tv163 = -72						; size = 4
tv130 = -68						; size = 4
$T2 = -64						; size = 8
$T3 = -56						; size = 8
_pop$4 = -44						; size = 8
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value_wrapper$ = 8					; size = 4
??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access><luabind::adl::object>, COMDAT
; _this$ = ecx

; 471  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 468  :         : m_interpreter(

	mov	eax, DWORD PTR _value_wrapper$[ebp]
	push	eax
	call	?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::interpreter
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 471  :       {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 472  :           detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 473  :           value_wrapper_traits<ValueWrapper>::unwrap(m_interpreter, value_wrapper);

	mov	ecx, DWORD PTR _value_wrapper$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
	add	esp, 8

; 474  : 
; 475  :           lua_pushnil(m_interpreter);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_pushnil
	add	esp, 4

; 476  :           if (lua_next(m_interpreter, -2) != 0)

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_lua_next
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@basic_acce

; 477  :           {
; 478  :               detail::stack_pop pop(m_interpreter, 2);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _pop$4[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 479  :               handle(m_interpreter, -2).swap(m_key);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv163[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv163[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 480  :           }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _pop$4[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	jmp	SHORT $LN3@basic_acce
$LN2@basic_acce:

; 481  :           else
; 482  :           {
; 483  :               m_interpreter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 484  :               return;

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	jmp	SHORT $LN1@basic_acce
$LN3@basic_acce:

; 485  :           }
; 486  : 
; 487  :           handle(m_interpreter, -1).swap(m_table);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv82[ebp], eax
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv166[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv166[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 488  :       }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
$LN1@basic_acce:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@basic_acce
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@basic_acce:
	DD	2
	DD	$LN14@basic_acce
$LN14@basic_acce:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN11@basic_acce
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN12@basic_acce
$LN12@basic_acce:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN11@basic_acce:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$2:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$3:
	lea	ecx, DWORD PTR _pop$4[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z$5:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access><luabind::adl::object>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::~basic_iterator<luabind::detail::basic_access>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::~basic_iterator<luabind::detail::basic_access>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?dereference@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?dereference@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@XZ PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::dereference, COMDAT
; _this$ = ecx

; 530  :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 531  :           return adl::iterator_proxy<AccessPolicy>(m_interpreter, m_table, m_key);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::iterator_proxy<luabind::detail::basic_access>
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 532  :       }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?dereference@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@XZ ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::dereference
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z
_TEXT	SEGMENT
tv91 = -40						; size = 4
$T2 = -33						; size = 1
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::equal, COMDAT
; _this$ = ecx

; 516  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 517  :           if (m_interpreter == 0 && other.m_interpreter == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@equal
	mov	ecx, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@equal

; 518  :               return true;

	mov	al, 1
	jmp	$LN1@equal
$LN2@equal:

; 519  : 
; 520  :           if (m_interpreter != other.m_interpreter)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@equal

; 521  :               return false;

	xor	al, al
	jmp	SHORT $LN1@equal
$LN3@equal:

; 522  : 
; 523  :           detail::stack_pop pop(m_interpreter, 2);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 524  :           m_key.push(m_interpreter);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 525  :           other.m_key.push(m_interpreter);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 12					; 0000000cH
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 526  :           return lua_equal(m_interpreter, -2, -1) != 0;

	push	-1
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_equal
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@equal
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN6@equal
$LN5@equal:
	mov	DWORD PTR tv91[ebp], 0
$LN6@equal:
	mov	cl, BYTE PTR tv91[ebp]
	mov	BYTE PTR $T2[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	al, BYTE PTR $T2[ebp]
$LN1@equal:

; 527  :       }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@equal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@equal:
	DD	1
	DD	$LN10@equal
$LN10@equal:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN8@equal
$LN8@equal:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?equal@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@ABE_NABV123@@Z ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::equal
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ
_TEXT	SEGMENT
tv142 = -64						; size = 4
tv143 = -60						; size = 4
tv140 = -56						; size = 4
tv73 = -52						; size = 4
$T2 = -48						; size = 8
$T3 = -40						; size = 8
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::increment, COMDAT
; _this$ = ecx

; 496  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 497  :           m_table.push(m_interpreter);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 498  :           m_key.push(m_interpreter);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 499  : 
; 500  :           detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 501  : 
; 502  :           if (lua_next(m_interpreter, -2) != 0)

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_lua_next
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@increment

; 503  :           {
; 504  :               m_key.replace(m_interpreter, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?replace@handle@luabind@@QAEXPAUlua_State@@H@Z ; luabind::handle::replace

; 505  :               lua_pop(m_interpreter, 2);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settop
	add	esp, 8

; 506  :           }

	jmp	SHORT $LN3@increment
$LN2@increment:

; 507  :           else
; 508  :           {
; 509  :               m_interpreter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 510  :               handle().swap(m_table);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv140[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv140[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 511  :               handle().swap(m_key);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv142[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv142[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
$LN3@increment:

; 512  :           }
; 513  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@increment
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@increment:
	DD	1
	DD	$LN10@increment
$LN10@increment:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN8@increment
$LN8@increment:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?increment@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@AAEXXZ ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::increment
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::key, COMDAT
; _this$ = ecx

; 924  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 925  :     return object(m_key);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@ABVhandle@2@@Z ; luabind::adl::object::object
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 926  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ PROC ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access>, COMDAT
; _this$ = ecx

; 464  :       {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 463  :         : m_interpreter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 464  :       {}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ ENDP ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IBEABV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IBEABV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ PROC ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived, COMDAT
; _this$ = ecx

; 680  :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 681  :             return *static_cast<Derived const*>(this);

	mov	eax, DWORD PTR _this$[ebp]

; 682  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IBEABV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ PROC ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived, COMDAT
; _this$ = ecx

; 675  :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 676  :             return *static_cast<Derived*>(this);

	mov	eax, DWORD PTR _this$[ebp]

; 677  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??E?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@1luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@1luabind@@XZ PROC ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator++, COMDAT
; _this$ = ecx

; 665  :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 666  :             iterator_core_access::increment(this->derived());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
	push	eax
	call	??$increment@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CAXAAV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@Z ; boost::iterators::iterator_core_access::increment<luabind::detail::basic_iterator<luabind::detail::basic_access> >
	add	esp, 4

; 667  :             return this->derived();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived

; 668  :         }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@1luabind@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\iterator\iterator_facade.hpp
;	COMDAT ??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ PROC ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*, COMDAT
; _this$ = ecx

; 655  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 656  :             return iterator_core_access::dereference(this->derived());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?derived@?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@IBEABV?$basic_iterator@Ubasic_access@detail@luabind@@@2luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::derived
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$dereference@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@@iterator_core_access@iterators@boost@@CA?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@ABV?$basic_iterator@Ubasic_access@detail@luabind@@@detail@5@@Z ; boost::iterators::iterator_core_access::dereference<luabind::detail::basic_iterator<luabind::detail::basic_access> >
	add	esp, 8
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  :         }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?push@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAEXPAUlua_State@@@Z PROC ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::push, COMDAT
; _this$ = ecx

; 410  :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 411  :           assert(interpreter == m_interpreter);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@push
	push	411					; 0000019bH
	push	OFFSET ??_C@_1JE@NFMGCHJI@?$AAD?$AA?3?$AA?2?$AA_?$AA_?$AAR?$AAe?$AAp?$AAo?$AAs?$AA?2?$AA_?$AA_?$AAM?$AAy@
	push	OFFSET ??_C@_1DK@GHMJFKK@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@push:

; 412  :           lua_pushvalue(m_interpreter, m_key_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 413  :           AccessPolicy::get(m_interpreter, m_table_index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z ; luabind::detail::basic_access::get
	add	esp, 8

; 414  :       }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAEXPAUlua_State@@@Z ENDP ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?interpreter@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QBEPAUlua_State@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interpreter@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QBEPAUlua_State@@XZ PROC ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::interpreter, COMDAT
; _this$ = ecx

; 404  :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 405  :           return m_interpreter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 406  :       }

	mov	esp, ebp
	pop	ebp
	ret	0
?interpreter@?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QBEPAUlua_State@@XZ ENDP ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::interpreter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 8
_pop$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ PROC ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::operator luabind::adl::object, COMDAT
; _this$ = ecx

; 915  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 916  :     lua_pushvalue(m_interpreter, m_key_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 917  :     AccessPolicy::get(m_interpreter, m_table_index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z ; luabind::detail::basic_access::get
	add	esp, 8

; 918  :     detail::stack_pop pop(m_interpreter, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 919  :     return object(from_stack(m_interpreter, -1));

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 920  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@object
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@object:
	DD	1
	DD	$LN8@object
$LN8@object:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN6@object
$LN6@object:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ ENDP ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::operator luabind::adl::object
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>, COMDAT
; _this$ = ecx

; 369  :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 370  :           if (m_interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@iterator_p

; 371  :               lua_pop(m_interpreter, 2);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN1@iterator_p:

; 372  :       }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::~object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_interpreter$ = 8					; size = 4
_table$ = 12						; size = 4
_key$ = 16						; size = 4
??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z PROC ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::iterator_proxy<luabind::detail::basic_access>, COMDAT
; _this$ = ecx

; 355  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 352  :         : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 353  :         , m_table_index(lua_gettop(interpreter) + 1)

	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 354  :         , m_key_index(m_table_index + 1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 356  :           table.push(m_interpreter);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 357  :           key.push(m_interpreter);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _key$[ebp]
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 358  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::~object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@PAUlua_State@@ABVhandle@2@1@Z ENDP ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::iterator_proxy<luabind::detail::basic_access>
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::~object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >, COMDAT
; _this$ = ecx

; 276  :       ~object_interface() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$object_interface@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >::~object_interface<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_info.cpp
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv173 = -72						; size = 4
tv177 = -68						; size = 4
tv179 = -64						; size = 4
tv184 = -60						; size = 4
tv183 = -56						; size = 4
tv182 = -52						; size = 4
tv170 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 12
$T5 = -24						; size = 4
$T6 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?bind_class_info@luabind@@YAXPAUlua_State@@@Z PROC	; luabind::bind_class_info

; 107  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?bind_class_info@luabind@@YAXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 108  : 		module(L)

	push	ecx
	mov	eax, esp
	mov	DWORD PTR $T5[ebp], esp
	mov	DWORD PTR tv170[ebp], eax
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	OFFSET ?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::get_class_names
	push	OFFSET $SG105671
	push	ecx
	call	??$def@P6A?AVobject@adl@luabind@@PAUlua_State@@@Z@luabind@@YA?AUscope@0@PBDP6A?AVobject@adl@0@PAUlua_State@@@Z@Z ; luabind::def<luabind::adl::object (__cdecl*)(lua_State *)>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv182[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	mov	edx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	OFFSET ?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z ; luabind::get_class_info
	push	OFFSET $SG105670
	push	edx
	call	??$def@P6A?AUclass_info@luabind@@ABVargument@adl@2@@Z@luabind@@YA?AUscope@0@PBDP6A?AUclass_info@0@ABVargument@adl@0@@Z@Z ; luabind::def<luabind::class_info (__cdecl*)(luabind::adl::argument const &)>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	36					; 00000024H
	push	OFFSET $SG105669
	push	28					; 0000001cH
	push	OFFSET $SG105668
	push	0
	push	OFFSET $SG105667
	push	OFFSET $SG105666
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@PBD@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>
	mov	DWORD PTR tv184[ebp], eax
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv179[ebp]
	call	??$def_readonly@Uclass_info@luabind@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	mov	ecx, eax
	call	??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,luabind::adl::object>
	mov	ecx, eax
	call	??$def_readonly@Uclass_info@luabind@@Vobject@adl@2@@?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAEAAU01@PBDPQclass_info@1@Vobject@adl@1@@Z ; luabind::class_<luabind::class_info,luabind::detail::unspecified,luabind::detail::unspecified,luabind::detail::unspecified>::def_readonly<luabind::class_info,luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, eax
	call	??Qscope@luabind@@QAEAAU01@U01@@Z	; luabind::scope::operator,
	mov	DWORD PTR tv177[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv177[ebp]
	call	??Qscope@luabind@@QAEAAU01@U01@@Z	; luabind::scope::operator,
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR tv173[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv170[ebp]
	call	??0scope@luabind@@QAE@ABU01@@Z		; luabind::scope::scope
	mov	DWORD PTR tv76[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	?module@luabind@@YA?AVmodule_@1@PAUlua_State@@PBD@Z ; luabind::module
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, eax
	call	??Amodule_@luabind@@QAEXUscope@1@@Z	; luabind::module_::operator[]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ

; 109  : 		[
; 110  : 			class_<class_info>("class_info_data")
; 111  : 				.def_readonly("name", &class_info::name)
; 112  : 				.def_readonly("methods", &class_info::methods)
; 113  : 				.def_readonly("attributes", &class_info::attributes),
; 114  : 		
; 115  :             def("class_info", &get_class_info),
; 116  :             def("class_names", &get_class_names)
; 117  : 		];
; 118  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$0:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$1:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$2:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$class_@Uclass_info@luabind@@Uunspecified@detail@2@U342@U342@@luabind@@QAE@XZ
__unwindfunclet$?bind_class_info@luabind@@YAXPAUlua_State@@@Z$3:
	mov	ecx, DWORD PTR $T5[ebp]
	jmp	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?bind_class_info@luabind@@YAXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?bind_class_info@luabind@@YAXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?bind_class_info@luabind@@YAXPAUlua_State@@@Z ENDP	; luabind::bind_class_info
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_info.cpp
_TEXT	SEGMENT
tv150 = -112						; size = 4
tv77 = -108						; size = 4
tv148 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 12
$T5 = -80						; size = 4
$T6 = -76						; size = 12
$T7 = -61						; size = 1
_iter$8 = -56						; size = 12
_index$ = -40						; size = 4
_result$ = -32						; size = 8
_classes$ = -20						; size = 4
_reg$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z PROC ; luabind::get_class_names

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 90   :         detail::class_registry* reg = detail::class_registry::get_registry(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _reg$[ebp], eax

; 91   : 
; 92   :         std::map<type_id, detail::class_rep*> const& classes = reg->get_classes();

	mov	ecx, DWORD PTR _reg$[ebp]
	call	?get_classes@class_registry@detail@luabind@@QBEABV?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@XZ ; luabind::detail::class_registry::get_classes
	mov	DWORD PTR _classes$[ebp], eax

; 93   : 
; 94   :         object result = newtable(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR _result$[ebp]
	push	edx
	call	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 95   :         std::size_t index = 1;

	mov	DWORD PTR _index$[ebp], 1

; 96   : 
; 97   :         for (std::map<type_id, detail::class_rep*>::const_iterator iter = classes.begin();

	lea	eax, DWORD PTR _iter$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	jmp	SHORT $LN4@get_class_
$LN2@get_class_:

; 98   :             iter != classes.end(); ++iter)

	lea	ecx, DWORD PTR _iter$8[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator++
$LN4@get_class_:
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _classes$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
	mov	DWORD PTR tv148[ebp], eax
	mov	edx, DWORD PTR tv148[ebp]
	push	edx
	lea	ecx, DWORD PTR _iter$8[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator!=
	mov	BYTE PTR $T7[ebp], al
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T7[ebp]
	test	eax, eax
	je	SHORT $LN3@get_class_

; 99   :         {
; 100  :             result[index++] = iter->second->name();

	lea	ecx, DWORD PTR _iter$8[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
	mov	ecx, DWORD PTR [eax+4]
	call	?name@class_rep@detail@luabind@@QBEPBDXZ ; luabind::detail::class_rep::name
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	ecx, DWORD PTR _result$[ebp]
	call	??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z ; luabind::adl::object::operator[]<unsigned int>
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv150[ebp]
	call	??$?4PBD@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABQBD@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	jmp	$LN2@get_class_
$LN3@get_class_:

; 101  :         }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iter$8[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ

; 102  : 
; 103  :         return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@$$QAV012@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 104  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@get_class_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@get_class_:
	DD	2
	DD	$LN15@get_class_
$LN15@get_class_:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN12@get_class_
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN13@get_class_
$LN13@get_class_:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN12@get_class_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR _iter$8[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$3:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_class_names@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ENDP ; luabind::get_class_names
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_info.cpp
_TEXT	SEGMENT
tv344 = -456						; size = 4
tv349 = -452						; size = 4
tv342 = -448						; size = 4
tv348 = -444						; size = 4
tv340 = -440						; size = 4
tv132 = -436						; size = 4
tv338 = -432						; size = 4
tv225 = -428						; size = 4
tv336 = -424						; size = 4
tv231 = -420						; size = 4
tv332 = -416						; size = 4
tv175 = -412						; size = 4
tv211 = -408						; size = 4
tv330 = -404						; size = 4
tv179 = -400						; size = 4
tv326 = -396						; size = 4
tv142 = -392						; size = 4
tv324 = -388						; size = 4
tv152 = -384						; size = 4
tv283 = -380						; size = 4
tv276 = -376						; size = 4
tv281 = -372						; size = 4
tv73 = -368						; size = 4
$T2 = -364						; size = 4
$T3 = -360						; size = 12
$T4 = -348						; size = 12
$T5 = -336						; size = 8
$T6 = -328						; size = 8
$T7 = -320						; size = 12
$T8 = -308						; size = 4
$T9 = -304						; size = 12
$T10 = -292						; size = 12
$T11 = -277						; size = 1
$T12 = -276						; size = 8
$T13 = -268						; size = 8
$T14 = -260						; size = 8
$T15 = -252						; size = 8
$T16 = -244						; size = 8
_pop$17 = -232						; size = 8
_member$18 = -216					; size = 8
_e$19 = -200						; size = 20
_i$20 = -172						; size = 20
_index$ = -148						; size = 4
_result$ = -140						; size = 44
_table$ = -88						; size = 8
_result$21 = -72					; size = 44
_obj$ = -24						; size = 4
_L$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_o$ = 12						; size = 4
?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z PROC ; luabind::get_class_info

; 34   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 444				; 000001bcH
	push	edi
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 111				; 0000006fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 35   : 		lua_State* L = o.interpreter();

	mov	ecx, DWORD PTR _o$[ebp]
	call	?interpreter@argument@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::argument::interpreter
	mov	DWORD PTR _L$[ebp], eax

; 36   : 	
; 37   : 		o.push(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	call	?push@argument@adl@luabind@@QBEXPAUlua_State@@@Z ; luabind::adl::argument::push

; 38   :         detail::object_rep* obj = detail::get_instance(L, -1);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z ; luabind::detail::get_instance
	add	esp, 8
	mov	DWORD PTR _obj$[ebp], eax

; 39   : 
; 40   :         if (!obj)

	cmp	DWORD PTR _obj$[ebp], 0
	jne	$LN5@get_class_

; 41   :         {
; 42   :             class_info result;

	lea	ecx, DWORD PTR _result$21[ebp]
	call	??0class_info@luabind@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 43   :             result.name = lua_typename(L, lua_type(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_typename
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _result$21[ebp]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 44   :             lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 45   :             result.methods = newtable(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	eax, DWORD PTR $T16[ebp]
	push	eax
	call	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
	add	esp, 8
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv281[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv281[ebp]
	push	edx
	lea	ecx, DWORD PTR _result$21[ebp+28]
	call	??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T16[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 46   :             result.attributes = newtable(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T15[ebp]
	push	ecx
	call	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
	add	esp, 8
	mov	DWORD PTR tv276[ebp], eax
	mov	edx, DWORD PTR tv276[ebp]
	mov	DWORD PTR tv283[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv283[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$21[ebp+36]
	call	??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T15[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 47   :             return result;

	lea	ecx, DWORD PTR _result$21[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0class_info@luabind@@QAE@$$QAU01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$21[ebp]
	call	??1class_info@luabind@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@get_class_
$LN5@get_class_:

; 48   :         }
; 49   : 
; 50   :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 51   : 
; 52   :         obj->crep()->get_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	call	?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ ; luabind::detail::object_rep::crep
	mov	ecx, eax
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 53   :         object table(from_stack(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T14[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	lea	ecx, DWORD PTR _table$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 54   :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 55   : 
; 56   :         class_info result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??0class_info@luabind@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 57   :         result.name = obj->crep()->name();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ ; luabind::detail::object_rep::crep
	mov	ecx, eax
	call	?name@class_rep@detail@luabind@@QBEPBDXZ ; luabind::detail::class_rep::name
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 58   :         result.methods = newtable(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	call	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
	add	esp, 8
	mov	DWORD PTR tv152[ebp], eax
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv324[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv324[ebp]
	push	ecx
	lea	ecx, DWORD PTR _result$[ebp+28]
	call	??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T13[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 59   :         result.attributes = newtable(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	call	?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ; luabind::newtable
	add	esp, 8
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv326[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR tv326[ebp]
	push	edx
	lea	ecx, DWORD PTR _result$[ebp+36]
	call	??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T12[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 60   : 
; 61   :         std::size_t index = 1;

	mov	DWORD PTR _index$[ebp], 1

; 62   : 
; 63   :         for (iterator i(table), e; i != e; ++i)

	lea	eax, DWORD PTR _table$[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??$?0Vobject@adl@luabind@@@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@ABVobject@adl@2@@Z ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access><luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _e$19[ebp]
	call	??0?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::basic_iterator<luabind::detail::basic_access>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	jmp	SHORT $LN4@get_class_
$LN2@get_class_:
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??E?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$basic_iterator@Ubasic_access@detail@luabind@@@1luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator++
$LN4@get_class_:
	lea	ecx, DWORD PTR _e$19[ebp]
	push	ecx
	lea	edx, DWORD PTR _i$20[ebp]
	push	edx
	call	??$?9V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@2@Usingle_pass_traversal_tag@iterators@boost@@V342@HV012@V342@U567@V342@H@iterators@boost@@YA_NABV?$iterator_facade@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H@01@0@Z ; boost::iterators::operator!=<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int>
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@get_class_

; 64   :         {
; 65   :             if (type(*i) != LUA_TFUNCTION)

	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*
	mov	DWORD PTR tv179[ebp], eax
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR tv330[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR tv330[ebp]
	push	eax
	call	??$type@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@luabind@@YAHABV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@0@@Z ; luabind::type<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	add	esp, 4
	cmp	eax, 6
	je	SHORT $LN10@get_class_
	mov	DWORD PTR tv211[ebp], 1
	jmp	SHORT $LN11@get_class_
$LN10@get_class_:
	mov	DWORD PTR tv211[ebp], 0
$LN11@get_class_:
	mov	cl, BYTE PTR tv211[ebp]
	mov	BYTE PTR $T11[ebp], cl
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T10[ebp]
	call	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
	movzx	edx, BYTE PTR $T11[ebp]
	test	edx, edx
	je	SHORT $LN6@get_class_

; 66   :                 continue;

	jmp	$LN2@get_class_
$LN6@get_class_:

; 67   : 
; 68   :             // We have to create a temporary `object` here, otherwise the proxy
; 69   :             // returned by operator->() will mess up the stack. This is a known
; 70   :             // problem that probably doesn't show up in real code very often.
; 71   :             object member(*i);

	lea	eax, DWORD PTR _member$18[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*
	mov	DWORD PTR tv175[ebp], eax
	mov	edx, DWORD PTR tv175[ebp]
	mov	DWORD PTR tv332[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR tv332[ebp]
	call	??B?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE?AVobject@12@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::operator luabind::adl::object
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>

; 72   :             member.push(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _member$18[ebp]
	call	?push@object@adl@luabind@@QBEXPAUlua_State@@@Z ; luabind::adl::object::push

; 73   :             detail::stack_pop pop(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pop$17[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 74   : 
; 75   :             if (lua_tocfunction(L, -1) == &detail::property_tag)

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tocfunction
	add	esp, 8
	cmp	eax, OFFSET ?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::property_tag
	jne	$LN7@get_class_

; 76   :             {
; 77   :                 result.attributes[index++] = i.key();

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$20[ebp]
	call	?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::key
	mov	DWORD PTR tv231[ebp], eax
	mov	eax, DWORD PTR tv231[ebp]
	mov	DWORD PTR tv336[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR tv336[ebp]
	push	ecx
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp+36]
	call	??$?AI@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABI@Z ; luabind::adl::object::operator[]<unsigned int>
	mov	DWORD PTR tv225[ebp], eax
	mov	ecx, DWORD PTR tv225[ebp]
	mov	DWORD PTR tv338[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR tv338[ebp]
	call	??$?4Vobject@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABVobject@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1object@adl@luabind@@QAE@XZ

; 78   :             }

	jmp	$LN8@get_class_
$LN7@get_class_:

; 79   :             else
; 80   :             {
; 81   :                 result.methods[i.key()] = *i;

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??D?$iterator_facade_base@V?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@3@Usingle_pass_traversal_tag@iterators@boost@@V453@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@XZ ; boost::iterators::detail::iterator_facade_base<luabind::detail::basic_iterator<luabind::detail::basic_access>,luabind::adl::iterator_proxy<luabind::detail::basic_access>,boost::iterators::single_pass_traversal_tag,luabind::adl::iterator_proxy<luabind::detail::basic_access>,int,0,0>::operator*
	mov	DWORD PTR tv132[ebp], eax
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv340[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv340[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$20[ebp]
	call	?key@?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QBE?AVobject@adl@3@XZ ; luabind::detail::basic_iterator<luabind::detail::basic_access>::key
	mov	DWORD PTR tv348[ebp], eax
	mov	eax, DWORD PTR tv348[ebp]
	mov	DWORD PTR tv342[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR tv342[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	ecx, DWORD PTR _result$[ebp+28]
	call	??$?AVobject@adl@luabind@@@object@adl@luabind@@QBE?AV?$index_proxy@Vobject@adl@luabind@@@12@ABV012@@Z ; luabind::adl::object::operator[]<luabind::adl::object>
	mov	DWORD PTR tv349[ebp], eax
	mov	eax, DWORD PTR tv349[ebp]
	mov	DWORD PTR tv344[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR tv344[ebp]
	call	??$?4V?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@@?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAEAAV012@ABV?$iterator_proxy@Ubasic_access@detail@luabind@@@12@@Z ; luabind::adl::index_proxy<luabind::adl::object>::operator=<luabind::adl::iterator_proxy<luabind::detail::basic_access> >
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
$LN8@get_class_:

; 82   :             }
; 83   :         }

	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _pop$17[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _member$18[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	jmp	$LN2@get_class_
$LN3@get_class_:
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _e$19[ebp]
	call	??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _i$20[ebp]
	call	??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ

; 84   : 
; 85   :         return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0class_info@luabind@@QAE@$$QAU01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _result$[ebp]
	call	??1class_info@luabind@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _table$[ebp]
	call	??1object@adl@luabind@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@get_class_:

; 86   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@get_class_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 456				; 000001c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN41@get_class_:
	DD	7
	DD	$LN40@get_class_
$LN40@get_class_:
	DD	-72					; ffffffb8H
	DD	44					; 0000002cH
	DD	$LN32@get_class_
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN33@get_class_
	DD	-140					; ffffff74H
	DD	44					; 0000002cH
	DD	$LN34@get_class_
	DD	-172					; ffffff54H
	DD	20					; 00000014H
	DD	$LN35@get_class_
	DD	-200					; ffffff38H
	DD	20					; 00000014H
	DD	$LN36@get_class_
	DD	-216					; ffffff28H
	DD	8
	DD	$LN37@get_class_
	DD	-232					; ffffff18H
	DD	8
	DD	$LN38@get_class_
$LN38@get_class_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN37@get_class_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN36@get_class_:
	DB	101					; 00000065H
	DB	0
$LN35@get_class_:
	DB	105					; 00000069H
	DB	0
$LN34@get_class_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN33@get_class_:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN32@get_class_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$0:
	lea	ecx, DWORD PTR _result$21[ebp]
	jmp	??1class_info@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$1:
	lea	ecx, DWORD PTR $T16[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$2:
	lea	ecx, DWORD PTR $T15[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$4:
	lea	ecx, DWORD PTR _table$[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$5:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	??1class_info@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$6:
	lea	ecx, DWORD PTR $T13[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$7:
	lea	ecx, DWORD PTR $T12[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$8:
	lea	ecx, DWORD PTR _i$20[ebp]
	jmp	??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$9:
	lea	ecx, DWORD PTR _e$19[ebp]
	jmp	??1?$basic_iterator@Ubasic_access@detail@luabind@@@detail@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$10:
	lea	ecx, DWORD PTR $T10[ebp]
	jmp	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$11:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$12:
	lea	ecx, DWORD PTR _member$18[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$13:
	lea	ecx, DWORD PTR _pop$17[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$14:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$15:
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$16:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$iterator_proxy@Ubasic_access@detail@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::iterator_proxy<luabind::detail::basic_access>::~iterator_proxy<luabind::detail::basic_access>
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$17:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1object@adl@luabind@@QAE@XZ
__unwindfunclet$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z$18:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$index_proxy@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::index_proxy<luabind::adl::object>::~index_proxy<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-452]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_class_info@luabind@@YA?AUclass_info@1@ABVargument@adl@1@@Z ENDP ; luabind::get_class_info
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gclass_info@luabind@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gclass_info@luabind@@QAEPAXI@Z PROC			; luabind::class_info::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1class_info@luabind@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gclass_info@luabind@@QAEPAXI@Z ENDP			; luabind::class_info::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0class_info@luabind@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0class_info@luabind@@QAE@$$QAU01@@Z PROC		; luabind::class_info::class_info, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_info@luabind@@QAE@$$QAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0object@adl@luabind@@QAE@$$QAV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0object@adl@luabind@@QAE@$$QAV012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0class_info@luabind@@QAE@$$QAU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0class_info@luabind@@QAE@$$QAU01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_info@luabind@@QAE@$$QAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_info@luabind@@QAE@$$QAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_info@luabind@@QAE@$$QAU01@@Z ENDP		; luabind::class_info::class_info
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0class_info@luabind@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0class_info@luabind@@QAE@ABU01@@Z PROC		; luabind::class_info::class_info, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_info@luabind@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0object@adl@luabind@@QAE@ABV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0object@adl@luabind@@QAE@ABV012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0class_info@luabind@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0class_info@luabind@@QAE@ABU01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_info@luabind@@QAE@ABU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_info@luabind@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_info@luabind@@QAE@ABU01@@Z ENDP		; luabind::class_info::class_info
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1class_info@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1class_info@luabind@@QAE@XZ PROC			; luabind::class_info::~class_info, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1object@adl@luabind@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1object@adl@luabind@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1class_info@luabind@@QAE@XZ ENDP			; luabind::class_info::~class_info
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0class_info@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0class_info@luabind@@QAE@XZ PROC			; luabind::class_info::class_info, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_info@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0object@adl@luabind@@QAE@XZ		; luabind::adl::object::object
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0object@adl@luabind@@QAE@XZ		; luabind::adl::object::object
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0class_info@luabind@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0class_info@luabind@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1object@adl@luabind@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_info@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_info@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_info@luabind@@QAE@XZ ENDP			; luabind::class_info::class_info
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1class_base@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1class_base@detail@luabind@@QAE@XZ PROC		; luabind::detail::class_base::~class_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1scope@luabind@@QAE@XZ		; luabind::scope::~scope
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1class_base@detail@luabind@@QAE@XZ ENDP		; luabind::detail::class_base::~class_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\link_compatibility.hpp
;	COMDAT ?check_link_compatibility@detail@luabind@@YAXXZ
_TEXT	SEGMENT
?check_link_compatibility@detail@luabind@@YAXXZ PROC	; luabind::detail::check_link_compatibility, COMDAT

; 44   : 	{

	push	ebp
	mov	ebp, esp

; 45   : 	#ifdef LUABIND_NOT_THREADSAFE
; 46   : 		not_threadsafe_defined_conflict();
; 47   : 	#else
; 48   : 		not_threadsafe_not_defined_conflict();

	call	?not_threadsafe_not_defined_conflict@detail@luabind@@YAXXZ ; luabind::detail::not_threadsafe_not_defined_conflict

; 49   : 	#endif
; 50   : 
; 51   : 	#ifdef LUABIND_NO_ERROR_CHECKING
; 52   : 		no_error_checking_defined_conflict();
; 53   : 	#else
; 54   : 		no_error_checking_not_defined_conflict();

	call	?no_error_checking_not_defined_conflict@detail@luabind@@YAXXZ ; luabind::detail::no_error_checking_not_defined_conflict

; 55   : 	#endif
; 56   : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?check_link_compatibility@detail@luabind@@YAXXZ ENDP	; luabind::detail::check_link_compatibility
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@Vargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@Vargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::adl::argument>::get, COMDAT

; 96   : LUABIND_TYPE_TO_STRING(luabind::argument)

	push	ebp
	mov	ebp, esp
	push	OFFSET ??_C@_0BC@BCFALIOM@luabind?3?3argument@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@Vargument@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::adl::argument>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<luabind::adl::object>::get, COMDAT

; 95   : LUABIND_TYPE_TO_STRING(luabind::object)

	push	ebp
	mov	ebp, esp
	push	OFFSET ??_C@_0BA@OBLMPGNH@luabind?3?3object@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@Vobject@adl@luabind@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<luabind::adl::object>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@Ulua_State@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@Ulua_State@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<lua_State>::get, COMDAT

; 93   : LUABIND_TYPE_TO_STRING(lua_State)

	push	ebp
	mov	ebp, esp
	push	OFFSET ??_C@_09OKOGDPMI@lua_State@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@Ulua_State@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<lua_State>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\format_signature.hpp
;	COMDAT ?get@?$type_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@luabind@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get@?$type_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@luabind@@SAXPAUlua_State@@@Z PROC ; luabind::detail::type_to_string<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::get, COMDAT

; 92   : LUABIND_TYPE_TO_STRING(std::string)

	push	ebp
	mov	ebp, esp
	push	OFFSET ??_C@_0M@OOBHPBL@std?3?3string@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@?$type_to_string@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@luabind@@SAXPAUlua_State@@@Z ENDP ; luabind::detail::type_to_string<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ?sum_scores@detail@luabind@@YAHPBH0@Z
_TEXT	SEGMENT
_result$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?sum_scores@detail@luabind@@YAHPBH0@Z PROC		; luabind::detail::sum_scores, COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 123  :     int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 124  : 
; 125  :     for (; first != last; ++first)

	jmp	SHORT $LN4@sum_scores
$LN2@sum_scores:
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, 4
	mov	DWORD PTR _first$[ebp], eax
$LN4@sum_scores:
	mov	ecx, DWORD PTR _first$[ebp]
	cmp	ecx, DWORD PTR _last$[ebp]
	je	SHORT $LN3@sum_scores

; 126  :     {
; 127  :         if (*first < 0)

	mov	edx, DWORD PTR _first$[ebp]
	cmp	DWORD PTR [edx], 0
	jge	SHORT $LN5@sum_scores

; 128  :             return *first;

	mov	eax, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN1@sum_scores
$LN5@sum_scores:

; 129  :         result += *first;

	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _result$[ebp], edx

; 130  :     }

	jmp	SHORT $LN2@sum_scores
$LN3@sum_scores:

; 131  : 
; 132  :     return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN1@sum_scores:

; 133  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?sum_scores@detail@luabind@@YAHPBH0@Z ENDP		; luabind::detail::sum_scores
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ?maybe_yield_aux@detail@luabind@@YAHPAUlua_State@@HU?$bool_@$0A@@mpl@boost@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_results$ = 12						; size = 4
___formal$ = 16						; size = 1
?maybe_yield_aux@detail@luabind@@YAHPAUlua_State@@HU?$bool_@$0A@@mpl@boost@@@Z PROC ; luabind::detail::maybe_yield_aux, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp

; 106  :     return results;

	mov	eax, DWORD PTR _results$[ebp]

; 107  : }

	pop	ebp
	ret	0
?maybe_yield_aux@detail@luabind@@YAHPAUlua_State@@HU?$bool_@$0A@@mpl@boost@@@Z ENDP ; luabind::detail::maybe_yield_aux
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??Binvoke_context@detail@luabind@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??Binvoke_context@detail@luabind@@QBE_NXZ PROC		; luabind::detail::invoke_context::operator bool, COMDAT
; _this$ = ecx

; 59   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 60   :         return candidate_index == 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv66[ebp]

; 61   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??Binvoke_context@detail@luabind@@QBE_NXZ ENDP		; luabind::detail::invoke_context::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??0invoke_context@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0invoke_context@detail@luabind@@QAE@XZ PROC		; luabind::detail::invoke_context::invoke_context, COMDAT
; _this$ = ecx

; 56   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 54   :       : best_score((std::numeric_limits<int>::max)())

	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 55   :       , candidate_index(0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 56   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0invoke_context@detail@luabind@@QAE@XZ ENDP		; luabind::detail::invoke_context::invoke_context
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gfunction_object@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfunction_object@detail@luabind@@UAEPAXI@Z PROC	; luabind::detail::function_object::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1function_object@detail@luabind@@UAE@XZ ; luabind::detail::function_object::~function_object
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gfunction_object@detail@luabind@@UAEPAXI@Z ENDP	; luabind::detail::function_object::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??1function_object@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1function_object@detail@luabind@@UAE@XZ PROC		; luabind::detail::function_object::~function_object, COMDAT
; _this$ = ecx

; 39   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7function_object@detail@luabind@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1object@adl@luabind@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1function_object@detail@luabind@@UAE@XZ ENDP		; luabind::detail::function_object::~function_object
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\call.hpp
;	COMDAT ??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entry$ = 8						; size = 4
??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z PROC ; luabind::detail::function_object::function_object, COMDAT
; _this$ = ecx

; 36   :     {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7function_object@detail@luabind@@6B@

; 34   :       : entry(entry)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 36   :     {}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 35   :       , next(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 36   :     {}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0object@adl@luabind@@QAE@XZ		; luabind::adl::object::object
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0function_object@detail@luabind@@QAE@P6AHPAUlua_State@@@Z@Z ENDP ; luabind::detail::function_object::function_object
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\wrapper_base.hpp
;	COMDAT ?ref@wrap_access@detail@luabind@@SAABUwrapped_self_t@3@ABUwrap_base@3@@Z
_TEXT	SEGMENT
_b$ = 8							; size = 4
?ref@wrap_access@detail@luabind@@SAABUwrapped_self_t@3@ABUwrap_base@3@@Z PROC ; luabind::detail::wrap_access::ref, COMDAT

; 78   : 			{

	push	ebp
	mov	ebp, esp

; 79   : 				return b.m_self;

	mov	eax, DWORD PTR _b$[ebp]

; 80   : 			}

	pop	ebp
	ret	0
?ref@wrap_access@detail@luabind@@SAABUwrapped_self_t@3@ABUwrap_base@3@@Z ENDP ; luabind::detail::wrap_access::ref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -36						; size = 8
_pop$ = -24						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_interpreter$ = 12					; size = 4
?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z PROC ; luabind::newtable, COMDAT

; 1201 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 1202 :     lua_newtable(interpreter);

	push	0
	push	0
	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 1203 :     detail::stack_pop pop(interpreter, 1);

	push	1
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ; luabind::detail::stack_pop::stack_pop
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1204 :     return object(from_stack(interpreter, -1));

	push	-1
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ; luabind::from_stack::from_stack
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ; luabind::adl::object::object
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pop$[ebp]
	call	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1205 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@newtable
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@newtable:
	DD	1
	DD	$LN8@newtable
$LN8@newtable:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@newtable
$LN6@newtable:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _pop$[ebp]
	jmp	??1stack_pop@detail@luabind@@QAE@XZ	; luabind::detail::stack_pop::~stack_pop
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?newtable@luabind@@YA?AVobject@adl@1@PAUlua_State@@@Z ENDP ; luabind::newtable
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?check@?$value_wrapper_traits@Vargument@adl@luabind@@@luabind@@SA_NZZ
_TEXT	SEGMENT
?check@?$value_wrapper_traits@Vargument@adl@luabind@@@luabind@@SA_NZZ PROC ; luabind::value_wrapper_traits<luabind::adl::argument>::check, COMDAT

; 888  :     {

	push	ebp
	mov	ebp, esp

; 889  :         return true;

	mov	al, 1

; 890  :     }

	pop	ebp
	ret	0
?check@?$value_wrapper_traits@Vargument@adl@luabind@@@luabind@@SA_NZZ ENDP ; luabind::value_wrapper_traits<luabind::adl::argument>::check
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_value$ = 12						; size = 4
?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z PROC ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap, COMDAT

; 862  :     {

	push	ebp
	mov	ebp, esp

; 863  :         value.push(interpreter);

	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	call	?push@object@adl@luabind@@QBEXPAUlua_State@@@Z ; luabind::adl::object::push

; 864  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?unwrap@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAXPAUlua_State@@ABVobject@adl@2@@Z ENDP ; luabind::value_wrapper_traits<luabind::adl::object>::unwrap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z PROC ; luabind::value_wrapper_traits<luabind::adl::object>::interpreter, COMDAT

; 857  :     {

	push	ebp
	mov	ebp, esp

; 858  :         return value.interpreter();

	mov	ecx, DWORD PTR _value$[ebp]
	call	?interpreter@object@adl@luabind@@QBEPAUlua_State@@XZ ; luabind::adl::object::interpreter

; 859  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?interpreter@?$value_wrapper_traits@Vobject@adl@luabind@@@luabind@@SAPAUlua_State@@ABVobject@adl@2@@Z ENDP ; luabind::value_wrapper_traits<luabind::adl::object>::interpreter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1argument@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1argument@adl@luabind@@QAE@XZ PROC			; luabind::adl::argument::~argument, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$object_interface@Vargument@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::argument>::~object_interface<luabind::adl::argument>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1argument@adl@luabind@@QAE@XZ ENDP			; luabind::adl::argument::~argument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?interpreter@argument@adl@luabind@@QBEPAUlua_State@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interpreter@argument@adl@luabind@@QBEPAUlua_State@@XZ PROC ; luabind::adl::argument::interpreter, COMDAT
; _this$ = ecx

; 813  : 	  {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 814  : 		  return m_interpreter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 815  : 	  }

	mov	esp, ebp
	pop	ebp
	ret	0
?interpreter@argument@adl@luabind@@QBEPAUlua_State@@XZ ENDP ; luabind::adl::argument::interpreter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?push@argument@adl@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?push@argument@adl@luabind@@QBEXPAUlua_State@@@Z PROC	; luabind::adl::argument::push, COMDAT
; _this$ = ecx

; 808  : 	  {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 809  : 		  lua_pushvalue(L, m_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 810  : 	  }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@argument@adl@luabind@@QBEXPAUlua_State@@@Z ENDP	; luabind::adl::argument::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0argument@adl@luabind@@QAE@ABUfrom_stack@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stack_reference$ = 8					; size = 4
??0argument@adl@luabind@@QAE@ABUfrom_stack@2@@Z PROC	; luabind::adl::argument::argument, COMDAT
; _this$ = ecx

; 796  : 	  {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 794  : 		: m_interpreter(stack_reference.interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stack_reference$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 795  : 		, m_index(stack_reference.index)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stack_reference$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 797  : 		  if (m_index < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN1@argument

; 798  : 			  m_index = lua_gettop(m_interpreter) - m_index + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_gettop
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	add	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN1@argument:

; 799  : 	  }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0argument@adl@luabind@@QAE@ABUfrom_stack@2@@Z ENDP	; luabind::adl::argument::argument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$object_interface@Vargument@adl@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$object_interface@Vargument@adl@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::object_interface<luabind::adl::argument>::~object_interface<luabind::adl::argument>, COMDAT
; _this$ = ecx

; 276  :       ~object_interface() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$object_interface@Vargument@adl@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::object_interface<luabind::adl::argument>::~object_interface<luabind::adl::argument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z PROC	; luabind::adl::object::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4handle@luabind@@QAEAAV01@ABV01@@Z	; luabind::handle::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4object@adl@luabind@@QAEAAV012@$$QAV012@@Z ENDP	; luabind::adl::object::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0object@adl@luabind@@QAE@$$QAV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0object@adl@luabind@@QAE@$$QAV012@@Z PROC		; luabind::adl::object::object, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0object@adl@luabind@@QAE@$$QAV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0handle@luabind@@QAE@ABV01@@Z		; luabind::handle::handle
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0object@adl@luabind@@QAE@$$QAV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0object@adl@luabind@@QAE@$$QAV012@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0object@adl@luabind@@QAE@$$QAV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0object@adl@luabind@@QAE@$$QAV012@@Z ENDP		; luabind::adl::object::object
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0object@adl@luabind@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0object@adl@luabind@@QAE@ABV012@@Z PROC		; luabind::adl::object::object, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0object@adl@luabind@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0handle@luabind@@QAE@ABV01@@Z		; luabind::handle::handle
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0object@adl@luabind@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0object@adl@luabind@@QAE@ABV012@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0object@adl@luabind@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0object@adl@luabind@@QAE@ABV012@@Z ENDP		; luabind::adl::object::object
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1object@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1object@adl@luabind@@QAE@XZ PROC			; luabind::adl::object::~object, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1object@adl@luabind@@QAE@XZ ENDP			; luabind::adl::object::~object
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?interpreter@object@adl@luabind@@QBEPAUlua_State@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interpreter@object@adl@luabind@@QBEPAUlua_State@@XZ PROC ; luabind::adl::object::interpreter, COMDAT
; _this$ = ecx

; 781  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 782  :       return m_handle.interpreter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ; luabind::handle::interpreter

; 783  :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?interpreter@object@adl@luabind@@QBEPAUlua_State@@XZ ENDP ; luabind::adl::object::interpreter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?push@object@adl@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@object@adl@luabind@@QBEXPAUlua_State@@@Z PROC	; luabind::adl::object::push, COMDAT
; _this$ = ecx

; 776  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 777  :       m_handle.push(interpreter);

	mov	eax, DWORD PTR _interpreter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push

; 778  :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@object@adl@luabind@@QBEXPAUlua_State@@@Z ENDP	; luabind::adl::object::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stack_reference$ = 8					; size = 4
??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z PROC	; luabind::adl::object::object, COMDAT
; _this$ = ecx

; 735  :       {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 734  :         : m_handle(stack_reference.interpreter, stack_reference.index)

	mov	eax, DWORD PTR _stack_reference$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stack_reference$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle

; 736  :       }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0object@adl@luabind@@QAE@ABUfrom_stack@2@@Z ENDP	; luabind::adl::object::object
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0object@adl@luabind@@QAE@ABVhandle@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
??0object@adl@luabind@@QAE@ABVhandle@2@@Z PROC		; luabind::adl::object::object, COMDAT
; _this$ = ecx

; 731  :       {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0object@adl@luabind@@QAE@ABVhandle@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 730  :         : m_handle(other)

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0handle@luabind@@QAE@ABV01@@Z		; luabind::handle::handle

; 731  :       {}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0object@adl@luabind@@QAE@ABVhandle@2@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0object@adl@luabind@@QAE@ABVhandle@2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0object@adl@luabind@@QAE@ABVhandle@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0object@adl@luabind@@QAE@ABVhandle@2@@Z ENDP		; luabind::adl::object::object
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??0object@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0object@adl@luabind@@QAE@XZ PROC			; luabind::adl::object::object, COMDAT
; _this$ = ecx

; 726  :       object()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0object@adl@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle

; 727  :       {}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0object@adl@luabind@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0object@adl@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0object@adl@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0object@adl@luabind@@QAE@XZ ENDP			; luabind::adl::object::object
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ PROC ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>, COMDAT
; _this$ = ecx

; 276  :       ~object_interface() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$object_interface@Vobject@adl@luabind@@@adl@luabind@@QAE@XZ ENDP ; luabind::adl::object_interface<luabind::adl::object>::~object_interface<luabind::adl::object>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\object.hpp
;	COMDAT ?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z
_TEXT	SEGMENT
_interpreter$ = 8					; size = 4
_table$ = 12						; size = 4
?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z PROC ; luabind::detail::basic_access::get, COMDAT

; 434  :       {

	push	ebp
	mov	ebp, esp

; 435  :           lua_gettable(interpreter, table);

	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 436  :       }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get@basic_access@detail@luabind@@SAXPAUlua_State@@H@Z ENDP ; luabind::detail::basic_access::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init_if@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init_if@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init_if'', COMDAT

; 106  : const in_place_init_if_t in_place_init_if ((in_place_init_if_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B
	call	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init_if@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init_if''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t, COMDAT
; _this$ = ecx

; 104  :   explicit in_place_init_if_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init'', COMDAT

; 98   : const in_place_init_t in_place_init ((in_place_init_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B
	call	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_t::in_place_init_t, COMDAT
; _this$ = ecx

; 96   :   explicit in_place_init_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_t::in_place_init_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\stack_utils.hpp
;	COMDAT ??1stack_pop@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stack_pop@detail@luabind@@QAE@XZ PROC		; luabind::detail::stack_pop::~stack_pop, COMDAT
; _this$ = ecx

; 40   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 			lua_pop(m_state, m_n);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_lua_settop
	add	esp, 8

; 42   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1stack_pop@detail@luabind@@QAE@XZ ENDP		; luabind::detail::stack_pop::~stack_pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\stack_utils.hpp
;	COMDAT ??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_n$ = 12						; size = 4
??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z PROC	; luabind::detail::stack_pop::stack_pop, COMDAT
; _this$ = ecx

; 36   : 			{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 			: m_state(L)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR [eax], ecx

; 35   : 			, m_n(n)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax

; 37   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0stack_pop@detail@luabind@@QAE@PAUlua_State@@H@Z ENDP	; luabind::detail::stack_pop::stack_pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z PROC ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply, COMDAT

; 942  : 		static void apply(lua_State*, const index_map&) {}

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?apply@?$policy_list_postcall@Unull_type@detail@luabind@@@detail@luabind@@SAXPAUlua_State@@ABVindex_map@3@@Z ENDP ; luabind::detail::policy_list_postcall<luabind::detail::null_type>::apply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?consumed_args@?$default_converter@PAUlua_State@@@luabind@@QAA?BHZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?consumed_args@?$default_converter@PAUlua_State@@@luabind@@QAA?BHZZ PROC ; luabind::default_converter<lua_State *>::consumed_args, COMDAT

; 824  :     {

	push	ebp
	mov	ebp, esp

; 825  :         return 0;

	xor	eax, eax

; 826  :     }

	pop	ebp
	ret	0
?consumed_args@?$default_converter@PAUlua_State@@@luabind@@QAA?BHZZ ENDP ; luabind::default_converter<lua_State *>::consumed_args
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?apply@?$default_converter@PBD@luabind@@QAEXPAUlua_State@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_str$ = 12						; size = 4
?apply@?$default_converter@PBD@luabind@@QAEXPAUlua_State@@PBD@Z PROC ; luabind::default_converter<char const *>::apply, COMDAT
; _this$ = ecx

; 791  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 792  :         lua_pushstring(L, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 793  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?apply@?$default_converter@PBD@luabind@@QAEXPAUlua_State@@PBD@Z ENDP ; luabind::default_converter<char const *>::apply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?to@?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_value$ = 12						; size = 4
?to@?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::to, COMDAT
; _this$ = ecx

; 752  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 753  :         lua_pushlstring(L, value.data(), value.size());

	mov	ecx, DWORD PTR _value$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 754  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?to@?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?derived@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEAAU?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?derived@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEAAU?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::derived, COMDAT
; _this$ = ecx

; 642  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 643  :         return static_cast<Derived&>(*this);

	mov	eax, DWORD PTR _this$[ebp]

; 644  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?derived@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEAAU?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::derived
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?apply@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_value$ = 12						; size = 4
?apply@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::apply, COMDAT
; _this$ = ecx

; 637  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 638  :         derived().to(L, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?derived@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEAAU?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::derived
	mov	ecx, eax
	call	?to@?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::to

; 639  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?apply@?$native_converter_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$default_converter@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@luabind@@@luabind@@QAEXPAUlua_State@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; luabind::native_converter_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,luabind::default_converter<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::apply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??$as_lua_number@I@luabind@@YANI@Z
_TEXT	SEGMENT
tv71 = -12						; size = 8
tv66 = -4						; size = 4
_v$ = 8							; size = 4
??$as_lua_number@I@luabind@@YANI@Z PROC			; luabind::as_lua_number<unsigned int>, COMDAT

; 655  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 656  :     return static_cast<lua_Number>(v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv66[ebp]
	mov	ecx, DWORD PTR tv66[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv71[ebp], xmm0
	fld	QWORD PTR tv71[ebp]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$as_lua_number@I@luabind@@YANI@Z ENDP			; luabind::as_lua_number<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?to@?$default_converter@I@luabind@@QAEXPAUlua_State@@ABI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_value$ = 12						; size = 4
?to@?$default_converter@I@luabind@@QAEXPAUlua_State@@ABI@Z PROC ; luabind::default_converter<unsigned int>::to, COMDAT
; _this$ = ecx

; 697  : LUABIND_NUMBER_CONVERTER(unsigned int, number)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$as_lua_number@I@luabind@@YANI@Z	; luabind::as_lua_number<unsigned int>
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnumber
	add	esp, 12					; 0000000cH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?to@?$default_converter@I@luabind@@QAEXPAUlua_State@@ABI@Z ENDP ; luabind::default_converter<unsigned int>::to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?derived@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEAAU?$default_converter@I@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?derived@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEAAU?$default_converter@I@2@XZ PROC ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::derived, COMDAT
; _this$ = ecx

; 642  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 643  :         return static_cast<Derived&>(*this);

	mov	eax, DWORD PTR _this$[ebp]

; 644  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?derived@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEAAU?$default_converter@I@2@XZ ENDP ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::derived
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?apply@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEXPAUlua_State@@ABI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_value$ = 12						; size = 4
?apply@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEXPAUlua_State@@ABI@Z PROC ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::apply, COMDAT
; _this$ = ecx

; 637  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 638  :         derived().to(L, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?derived@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEAAU?$default_converter@I@2@XZ ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::derived
	mov	ecx, eax
	call	?to@?$default_converter@I@luabind@@QAEXPAUlua_State@@ABI@Z ; luabind::default_converter<unsigned int>::to

; 639  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?apply@?$native_converter_base@IU?$default_converter@I@luabind@@@luabind@@QAEXPAUlua_State@@ABI@Z ENDP ; luabind::native_converter_base<unsigned int,luabind::default_converter<unsigned int> >::apply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??0const_ref_converter@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0const_ref_converter@detail@luabind@@QAE@XZ PROC	; luabind::detail::const_ref_converter::const_ref_converter, COMDAT
; _this$ = ecx

; 425  :         {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  :           : result(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 425  :         {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0const_ref_converter@detail@luabind@@QAE@XZ ENDP	; luabind::detail::const_ref_converter::const_ref_converter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ PROC ; luabind::detail::const_ref_converter::consumed_args, COMDAT

; 419  :         {

	push	ebp
	mov	ebp, esp

; 420  :             return 1;

	mov	eax, 1

; 421  :         }

	pop	ebp
	ret	0
?consumed_args@const_ref_converter@detail@luabind@@QAA?BHZZ ENDP ; luabind::detail::const_ref_converter::consumed_args
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??0value_converter@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0value_converter@detail@luabind@@QAE@XZ PROC		; luabind::detail::value_converter::value_converter, COMDAT
; _this$ = ecx

; 271  :         {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 270  :           : result(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 271  :         {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0value_converter@detail@luabind@@QAE@XZ ENDP		; luabind::detail::value_converter::value_converter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\policy.hpp
;	COMDAT ??0index_map@luabind@@QAE@PBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0index_map@luabind@@QAE@PBH@Z PROC			; luabind::index_map::index_map, COMDAT
; _this$ = ecx

; 86   : 		index_map(const int* m): m_map(m) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0index_map@luabind@@QAE@PBH@Z ENDP			; luabind::index_map::index_map
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\from_stack.hpp
;	COMDAT ??0from_stack@luabind@@QAE@PAUlua_State@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_index$ = 12						; size = 4
??0from_stack@luabind@@QAE@PAUlua_State@@H@Z PROC	; luabind::from_stack::from_stack, COMDAT
; _this$ = ecx

; 33   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   :       : interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   :       , index(index)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax

; 33   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0from_stack@luabind@@QAE@PAUlua_State@@H@Z ENDP	; luabind::from_stack::from_stack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z PROC	; std::pair<void *,int>::pair<void *,int><void *,int,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z	; std::forward<void *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@H@std@@YA$$QAHAAH@Z		; std::forward<int>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z ENDP	; std::pair<void *,int>::pair<void *,int><void *,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?deallocate@object_rep@detail@luabind@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_storage$ = 8						; size = 4
?deallocate@object_rep@detail@luabind@@QAEXPAX@Z PROC	; luabind::detail::object_rep::deallocate, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			if (storage == &m_instance_buffer)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	cmp	DWORD PTR _storage$[ebp], eax
	jne	SHORT $LN2@deallocate

; 83   : 				return;

	jmp	SHORT $LN1@deallocate
$LN2@deallocate:

; 84   : 			std::free(storage);

	mov	ecx, DWORD PTR _storage$[ebp]
	push	ecx
	call	_free
	add	esp, 4
$LN1@deallocate:

; 85   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ENDP	; luabind::detail::object_rep::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?allocate@object_rep@detail@luabind@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@object_rep@detail@luabind@@QAEPAXI@Z PROC	; luabind::detail::object_rep::allocate, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			if (size <= 32)

	cmp	DWORD PTR _size$[ebp], 32		; 00000020H
	ja	SHORT $LN2@allocate

; 76   : 				return &m_instance_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@allocate
$LN2@allocate:

; 77   : 			return std::malloc(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
$LN1@allocate:

; 78   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@object_rep@detail@luabind@@QAEPAXI@Z ENDP	; luabind::detail::object_rep::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?is_const@object_rep@detail@luabind@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?is_const@object_rep@detail@luabind@@QBE_NXZ PROC	; luabind::detail::object_rep::is_const, COMDAT
; _this$ = ecx

; 63   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 			return m_instance && m_instance->pointee_const();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@is_const
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?pointee_const@instance_holder@detail@luabind@@QBE_NXZ ; luabind::detail::instance_holder::pointee_const
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@is_const
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@is_const
$LN3@is_const:
	mov	DWORD PTR tv71[ebp], 0
$LN4@is_const:
	movzx	eax, BYTE PTR tv71[ebp]

; 65   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?is_const@object_rep@detail@luabind@@QBE_NXZ ENDP	; luabind::detail::object_rep::is_const
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?get_instance@object_rep@detail@luabind@@QBE?AU?$pair@PAXH@std@@I@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_target$ = 12						; size = 4
?get_instance@object_rep@detail@luabind@@QBE?AU?$pair@PAXH@std@@I@Z PROC ; luabind::detail::object_rep::get_instance, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			if (m_instance == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@get_instan

; 58   : 				return std::pair<void*, int>((void*)0, -1);

	mov	DWORD PTR $T2[ebp], -1
	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAXH$0A@@?$pair@PAXH@std@@QAE@$$QAPAX$$QAH@Z ; std::pair<void *,int>::pair<void *,int><void *,int,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@get_instan
$LN2@get_instan:

; 59   : 			return m_instance->get(target);

	mov	esi, esp
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@get_instan:

; 60   : 		}

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?get_instance@object_rep@detail@luabind@@QBE?AU?$pair@PAXH@std@@I@Z ENDP ; luabind::detail::object_rep::get_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?set_instance@object_rep@detail@luabind@@QAEXPAVinstance_holder@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_instance$ = 8						; size = 4
?set_instance@object_rep@detail@luabind@@QAEXPAVinstance_holder@23@@Z PROC ; luabind::detail::object_rep::set_instance, COMDAT
; _this$ = ecx

; 50   : 		void set_instance(instance_holder* instance) { m_instance = instance; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _instance$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?set_instance@object_rep@detail@luabind@@QAEXPAVinstance_holder@23@@Z ENDP ; luabind::detail::object_rep::set_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ PROC ; luabind::detail::object_rep::crep, COMDAT
; _this$ = ecx

; 48   : 		class_rep* crep() { return m_classrep; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?crep@object_rep@detail@luabind@@QAEPAVclass_rep@23@XZ ENDP ; luabind::detail::object_rep::crep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ?check_const_pointer@detail@luabind@@YA?AU?$bool_@$0A@@mpl@boost@@PAX@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
?check_const_pointer@detail@luabind@@YA?AU?$bool_@$0A@@mpl@boost@@PAX@Z PROC ; luabind::detail::check_const_pointer, COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 51   :     return mpl::false_();

	movzx	eax, BYTE PTR $T1[ebp]

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?check_const_pointer@detail@luabind@@YA?AU?$bool_@$0A@@mpl@boost@@PAX@Z ENDP ; luabind::detail::check_const_pointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Ginstance_holder@detail@luabind@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Ginstance_holder@detail@luabind@@UAEPAXI@Z PROC	; luabind::detail::instance_holder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1instance_holder@detail@luabind@@UAE@XZ ; luabind::detail::instance_holder::~instance_holder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Ginstance_holder@detail@luabind@@UAEPAXI@Z ENDP	; luabind::detail::instance_holder::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ?pointee_const@instance_holder@detail@luabind@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pointee_const@instance_holder@detail@luabind@@QBE_NXZ PROC ; luabind::detail::instance_holder::pointee_const, COMDAT
; _this$ = ecx

; 38   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   :         return m_pointee_const;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+8]

; 40   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?pointee_const@instance_holder@detail@luabind@@QBE_NXZ ENDP ; luabind::detail::instance_holder::pointee_const
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ?get_class@instance_holder@detail@luabind@@QBEPAVclass_rep@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_class@instance_holder@detail@luabind@@QBEPAVclass_rep@23@XZ PROC ; luabind::detail::instance_holder::get_class, COMDAT
; _this$ = ecx

; 33   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   :         return m_cls;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 35   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?get_class@instance_holder@detail@luabind@@QBEPAVclass_rep@23@XZ ENDP ; luabind::detail::instance_holder::get_class
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ??1instance_holder@detail@luabind@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1instance_holder@detail@luabind@@UAE@XZ PROC		; luabind::detail::instance_holder::~instance_holder, COMDAT
; _this$ = ecx

; 26   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7instance_holder@detail@luabind@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1instance_holder@detail@luabind@@UAE@XZ ENDP		; luabind::detail::instance_holder::~instance_holder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\instance_holder.hpp
;	COMDAT ??0instance_holder@detail@luabind@@QAE@PAVclass_rep@12@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cls$ = 8						; size = 4
_pointee_const$ = 12					; size = 1
??0instance_holder@detail@luabind@@QAE@PAVclass_rep@12@_N@Z PROC ; luabind::detail::instance_holder::instance_holder, COMDAT
; _this$ = ecx

; 23   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7instance_holder@detail@luabind@@6B@

; 21   :       : m_cls(cls)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cls$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 22   :       , m_pointee_const(pointee_const)

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _pointee_const$[ebp]
	mov	BYTE PTR [eax+8], cl

; 23   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0instance_holder@detail@luabind@@QAE@PAVclass_rep@12@_N@Z ENDP ; luabind::detail::instance_holder::instance_holder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 107  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?casts@class_rep@detail@luabind@@QBEABVcast_graph@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?casts@class_rep@detail@luabind@@QBEABVcast_graph@23@XZ PROC ; luabind::detail::class_rep::casts, COMDAT
; _this$ = ecx

; 143  :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  :             return *m_casts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 145  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
?casts@class_rep@detail@luabind@@QBEABVcast_graph@23@XZ ENDP ; luabind::detail::class_rep::casts
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_table, COMDAT
; _this$ = ecx

; 125  : 		void get_table(lua_State* L) const { m_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?name@class_rep@detail@luabind@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@class_rep@detail@luabind@@QBEPBDXZ PROC		; luabind::detail::class_rep::name, COMDAT
; _this$ = ecx

; 120  : 		const char* name() const throw() { return m_name; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?name@class_rep@detail@luabind@@QBEPBDXZ ENDP		; luabind::detail::class_rep::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z PROC ; std::swap<lua_State *,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ENDP ; std::swap<lua_State *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?replace@handle@luabind@@QAEXPAUlua_State@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_stack_index$ = 12					; size = 4
?replace@handle@luabind@@QAEXPAUlua_State@@H@Z PROC	; luabind::handle::replace, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 116  :     lua_pushvalue(interpreter, stack_index);

	mov	eax, DWORD PTR _stack_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 117  :     lua_rawseti(interpreter, LUA_REGISTRYINDEX, m_index);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_rawseti
	add	esp, 12					; 0000000cH

; 118  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?replace@handle@luabind@@QAEXPAUlua_State@@H@Z ENDP	; luabind::handle::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?interpreter@handle@luabind@@QBEPAUlua_State@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interpreter@handle@luabind@@QBEPAUlua_State@@XZ PROC	; luabind::handle::interpreter, COMDAT
; _this$ = ecx

; 110  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  :     return m_interpreter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 112  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?interpreter@handle@luabind@@QBEPAUlua_State@@XZ ENDP	; luabind::handle::interpreter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?push@handle@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@handle@luabind@@QBEXPAUlua_State@@@Z PROC		; luabind::handle::push, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     lua_rawgeti(interpreter, LUA_REGISTRYINDEX, m_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 107  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@handle@luabind@@QBEXPAUlua_State@@@Z ENDP		; luabind::handle::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?swap@handle@luabind@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?swap@handle@luabind@@QAEXAAV12@@Z PROC			; luabind::handle::swap, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  :     std::swap(m_interpreter, other.m_interpreter);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ; std::swap<lua_State *,0>
	add	esp, 8

; 101  :     std::swap(m_index, other.m_index);

	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$swap@H$0A@@std@@YAXAAH0@Z		; std::swap<int,0>
	add	esp, 8

; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@handle@luabind@@QAEXAAV12@@Z ENDP			; luabind::handle::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??4handle@luabind@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv72 = -32						; size = 4
tv73 = -28						; size = 4
$T2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
??4handle@luabind@@QAEAAV01@ABV01@@Z PROC		; luabind::handle::operator=, COMDAT
; _this$ = ecx

; 93   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4handle@luabind@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 94   :     handle(other).swap(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0handle@luabind@@QAE@ABV01@@Z		; luabind::handle::handle
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv72[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 95   :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 96   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4handle@luabind@@QAEAAV01@ABV01@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??4handle@luabind@@QAEAAV01@ABV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4handle@luabind@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4handle@luabind@@QAEAAV01@ABV01@@Z ENDP		; luabind::handle::operator=
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??1handle@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1handle@luabind@@QAE@XZ PROC				; luabind::handle::~handle, COMDAT
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 88   :     if (m_interpreter && m_index != LUA_NOREF)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@handle
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -2			; fffffffeH
	je	SHORT $LN3@handle

; 89   :         luaL_unref(m_interpreter, LUA_REGISTRYINDEX, m_index);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_luaL_unref
	add	esp, 12					; 0000000cH
$LN3@handle:

; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1handle@luabind@@QAE@XZ ENDP				; luabind::handle::~handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??0handle@luabind@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0handle@luabind@@QAE@ABV01@@Z PROC			; luabind::handle::handle, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 62   :   : m_interpreter(other.m_interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 63   :   , m_index(LUA_NOREF)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -2			; fffffffeH

; 65   :     if (m_interpreter == 0) return;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@handle
	jmp	SHORT $LN1@handle
$LN2@handle:

; 66   :     lua_rawgeti(m_interpreter, LUA_REGISTRYINDEX, other.m_index);

	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 67   :     m_index = luaL_ref(m_interpreter, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_luaL_ref
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN1@handle:

; 68   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0handle@luabind@@QAE@ABV01@@Z ENDP			; luabind::handle::handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??0handle@luabind@@QAE@PAUlua_State@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_stack_index$ = 12					; size = 4
??0handle@luabind@@QAE@PAUlua_State@@H@Z PROC		; luabind::handle::handle, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 71   :   : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 72   :   , m_index(LUA_NOREF)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], -2			; fffffffeH

; 74   :     lua_pushvalue(interpreter, stack_index);

	mov	eax, DWORD PTR _stack_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 75   :     m_index = luaL_ref(interpreter, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_luaL_ref
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 76   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0handle@luabind@@QAE@PAUlua_State@@H@Z ENDP		; luabind::handle::handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??0handle@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0handle@luabind@@QAE@XZ PROC				; luabind::handle::handle, COMDAT
; _this$ = ecx

; 59   : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   :   : m_interpreter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 58   :   , m_index(LUA_NOREF)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -2			; fffffffeH

; 59   : {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0handle@luabind@@QAE@XZ ENDP				; luabind::handle::handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector
;	COMDAT ??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEABQAVclass_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEABQAVclass_rep@detail@luabind@@I@Z PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[], COMDAT
; _this$ = ecx

; 1955 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1956 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1957 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1958 :         _STL_VERIFY(

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1959					; 000007a7H
	push	OFFSET ??_C@_0GB@NEMOGBCE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1959					; 000007a7H
	push	OFFSET ??_C@_1MC@BDGGHEJF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1959 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1960 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1961 : 
; 1962 :         return _My_data._Myfirst[_Pos];

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]

; 1963 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEABQAVclass_rep@detail@luabind@@I@Z ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector
;	COMDAT ?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size, COMDAT
; _this$ = ecx

; 1930 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1931 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 1933 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\inheritance.hpp
;	COMDAT ?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z PROC ; luabind::detail::class_map::get, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 119  :     if (id >= m_classes.size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::size
	cmp	DWORD PTR _id$[ebp], eax
	jb	SHORT $LN2@get

; 120  :         return 0;

	xor	eax, eax
	jmp	SHORT $LN1@get
$LN2@get:

; 121  :     return m_classes[id];

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@PAVclass_rep@detail@luabind@@V?$allocator@PAVclass_rep@detail@luabind@@@std@@@std@@QBEABQAVclass_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep *,std::allocator<luabind::detail::class_rep *> >::operator[]
	mov	eax, DWORD PTR [eax]
$LN1@get:

; 122  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get@class_map@detail@luabind@@QBEPAVclass_rep@23@I@Z ENDP ; luabind::detail::class_map::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Min, COMDAT

; 452  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 453  :         while (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Min

; 454  :             _Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 455  :         }

	jmp	SHORT $LN2@Min
$LN3@Min:

; 456  : 
; 457  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 458  :     }

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1970 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1971 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
	add	esp, 4

; 1972 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end, COMDAT
; _this$ = ecx

; 1139 :     _NODISCARD const_iterator end() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1140 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1141 :         return const_iterator(_Scary->_Myhead, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1142 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1129 :     _NODISCARD const_iterator begin() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1130 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1131 :         return const_iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1132 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_registry.hpp
;	COMDAT ?get_classes@class_registry@detail@luabind@@QBEABV?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_classes@class_registry@detail@luabind@@QBEABV?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@XZ PROC ; luabind::detail::class_registry::get_classes, COMDAT
; _this$ = ecx

; 55   :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   :             return m_classes;

	mov	eax, DWORD PTR _this$[ebp]

; 57   :         }

	mov	esp, ebp
	pop	ebp
	ret	0
?get_classes@class_registry@detail@luabind@@QBEABV?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@XZ ENDP ; luabind::detail::class_registry::get_classes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??0type_id@luabind@@QAE@ABVtype_info@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
??0type_id@luabind@@QAE@ABVtype_info@@@Z PROC		; luabind::type_id::type_id, COMDAT
; _this$ = ecx

; 32   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   :       : id(&id)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0type_id@luabind@@QAE@ABVtype_info@@@Z ENDP		; luabind::type_id::type_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$swap@H$0A@@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H$0A@@std@@YAXAAH0@Z PROC			; std::swap<int,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@H$0A@@std@@YAXAAH0@Z ENDP			; std::swap<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\scope.hpp
;	COMDAT ?module@luabind@@YA?AVmodule_@1@PAUlua_State@@PBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
_name$ = 16						; size = 4
?module@luabind@@YA?AVmodule_@1@PAUlua_State@@PBD@Z PROC ; luabind::module, COMDAT

; 96   :     {

	push	ebp
	mov	ebp, esp

; 97   :         return module_(L, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0module_@luabind@@QAE@PAUlua_State@@PBD@Z ; luabind::module_::module_
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 98   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?module@luabind@@YA?AVmodule_@1@PAUlua_State@@PBD@Z ENDP ; luabind::module
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\mpl\bool.hpp
;	COMDAT ??B?$bool_@$0A@@mpl@boost@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$bool_@$0A@@mpl@boost@@QBE_NXZ PROC			; boost::mpl::bool_<0>::operator bool, COMDAT
; _this$ = ecx

; 29   :     BOOST_CONSTEXPR operator bool() const { return this->value; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$bool_@$0A@@mpl@boost@@QBE_NXZ ENDP			; boost::mpl::bool_<0>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\type_traits\integral_constant.hpp
;	COMDAT ??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ PROC ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &, COMDAT
; _this$ = ecx

; 81   :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   :          static const char data[sizeof(long)] = { 0 };
; 83   :          static const void* pdata = data;
; 84   :          return *(reinterpret_cast<const mpl::bool_<val>*>(pdata));

	mov	eax, DWORD PTR ?pdata@?1???B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@2@XZ@4PBXB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &'::`2'::pdata

; 85   :       }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$integral_constant@_N$00@boost@@QBEABU?$bool_@$00@mpl@1@XZ ENDP ; boost::integral_constant<bool,1>::operator boost::mpl::bool_<1> const &
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\type_traits\integral_constant.hpp
;	COMDAT ??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ PROC ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &, COMDAT
; _this$ = ecx

; 81   :       {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   :          static const char data[sizeof(long)] = { 0 };
; 83   :          static const void* pdata = data;
; 84   :          return *(reinterpret_cast<const mpl::bool_<val>*>(pdata));

	mov	eax, DWORD PTR ?pdata@?1???B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@2@XZ@4PBXB ;  ?? ::PBXB::mpl::XZ::`boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &'::`2'::pdata

; 85   :       }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$integral_constant@_N$0A@@boost@@QBEABU?$bool_@$0A@@mpl@1@XZ ENDP ; boost::integral_constant<bool,0>::operator boost::mpl::bool_<0> const &
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1382 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1384 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5042 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5043 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5044 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5038 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5039 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5040 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 5034 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(basic_string& _Right) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5035 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 5036 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -29						; size = 1
__Al$3 = -28						; size = 4
__Ptr$4 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 5010 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5011 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 5012 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 5013 :         _ASAN_STRING_REMOVE(*this);
; 5014 :         if (_My_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Tidy_deall

; 5015 :             const pointer _Ptr = _My_data._Bx._Ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$4[ebp], eax

; 5016 :             auto& _Al          = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$3[ebp], eax

; 5017 :             _Destroy_in_place(_My_data._Bx._Ptr);

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
	add	esp, 4

; 5018 :             _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 5019 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Ptr$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$3[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 5020 :         }
; 5021 : 
; 5022 :         _My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], 0

; 5023 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 5024 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5025 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR __My_data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 5026 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -9						; size = 1
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4999 :     _CONSTEXPR20 void _Tidy_init() noexcept { // initialize basic_string data members

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 5000 :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 5001 :         _My_data._Mysize = 0;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 5002 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+24], 15			; 0000000fH

; 5003 :         _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 5004 : 
; 5005 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5006 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __My_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 5007 :         _ASAN_STRING_CREATE(*this);
; 5008 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4898 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4899 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Requested$[ebp]
	push	edx
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH

; 4900 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4885 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 4886 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 4887 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	ecx, DWORD PTR __Masked$[ebp]
	cmp	ecx, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 4888 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4889 :         }
; 4890 : 
; 4891 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	mov	edx, DWORD PTR __Old$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR __Max$[ebp]
	sub	eax, edx
	cmp	DWORD PTR __Old$[ebp], eax
	jbe	SHORT $LN3@Calculate_

; 4892 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4893 :         }
; 4894 : 
; 4895 :         return (_STD max)(_Masked, _Old + _Old / 2);

	mov	ecx, DWORD PTR __Old$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	eax, DWORD PTR __Masked$[ebp]
	push	eax
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4896 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Calculate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Calculate_:
	DD	1
	DD	$LN6@Calculate_
$LN6@Calculate_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Calculate_
$LN5@Calculate_:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 4279 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4280 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 4281 :         const size_type _Storage_max = // can always store small string

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 4282 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4283 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 4284 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4285 :         );
; 4286 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@max_size
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@max_size:
	DD	1
	DD	$LN4@max_size
$LN4@max_size:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@max_size
$LN3@max_size:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 4275 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4276 :         return _Mypair._Myval2._Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 4277 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 4261 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4262 :         return _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 4263 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 4257 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4258 :         return _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 4259 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3547 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3548 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3549 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3527 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3528 :         // assign [_Ptr, _Ptr + _Count)
; 3529 :         if (_Count <= _Mypair._Myval2._Myres) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 3530 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3531 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3532 :             _Mypair._Myval2._Mysize = _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 3533 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$3[ebp]
	push	eax
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3534 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3535 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 3536 :         }
; 3537 : 
; 3538 :         return _Reallocate_for(

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3539 :             _Count,
; 3540 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3541 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3542 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3543 :             },
; 3544 :             _Ptr);
; 3545 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3356 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3357 :         return assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3358 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -24					; size = 4
_$S6$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3269 :     _CONSTEXPR20 ~basic_string() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3270 :         _Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3271 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3272 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S6$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	eax, DWORD PTR _$S6$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 3273 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __To_delete$[ebp], edx

; 3274 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3275 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	ecx, DWORD PTR __To_delete$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 3276 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3277 :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@basic_stri:
	DD	1
	DD	$LN4@basic_stri
$LN4@basic_stri:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@basic_stri
$LN3@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	54					; 00000036H
	DB	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
__Right_data$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 3142 :     _CONSTEXPR20 void _Take_contents(basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3143 :         // assign by stealing _Right's buffer
; 3144 :         // pre: this != &_Right
; 3145 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 3146 :         // pre: *this owns no memory, iterators orphaned
; 3147 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 3148 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 3149 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], ecx

; 3150 : 
; 3151 :         if constexpr (_Can_memcpy_val) {
; 3152 : #if _HAS_CXX20
; 3153 :             if (!_STD is_constant_evaluated())
; 3154 : #endif // _HAS_CXX20
; 3155 :             {
; 3156 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3157 :                 if (_Right_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Take_conte

; 3158 :                     // take ownership of _Right's iterators along with its buffer
; 3159 :                     _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 3160 :                 } else {

	jmp	SHORT $LN3@Take_conte
$LN2@Take_conte:

; 3161 :                     _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 3162 :                 }
; 3163 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3164 : 
; 3165 : #ifdef _INSERT_STRING_ANNOTATION
; 3166 :                 if (!_Right_data._Large_string_engaged()) {
; 3167 :                     _ASAN_STRING_REMOVE(_Right);
; 3168 :                 }
; 3169 : #endif // _INSERT_STRING_ANNOTATION
; 3170 : 
; 3171 :                 _Memcpy_val_from(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 3172 : 
; 3173 : #ifdef _INSERT_STRING_ANNOTATION
; 3174 :                 if (!_Right_data._Large_string_engaged()) {
; 3175 :                     _ASAN_STRING_REMOVE(_Right);
; 3176 :                     _ASAN_STRING_CREATE(*this);
; 3177 :                 }
; 3178 : #endif // _INSERT_STRING_ANNOTATION
; 3179 : 
; 3180 :                 _Right._Tidy_init();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 3181 :                 return;

	jmp	$LN6@Take_conte

; 3182 :             }
; 3183 :         }
; 3184 : 
; 3185 :         if (_Right_data._Large_string_engaged()) { // steal buffer

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Take_conte

; 3186 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

	mov	eax, DWORD PTR __Right_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
	add	esp, 8

; 3187 :             _Right_data._Bx._Ptr = nullptr;

	mov	edx, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [edx+4], 0

; 3188 :             _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 3189 :         } else { // copy small string buffer

	jmp	SHORT $LN5@Take_conte
$LN4@Take_conte:

; 3190 :             _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 3191 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Right_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3192 :             _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN5@Take_conte:

; 3193 :         }
; 3194 : 
; 3195 :         _My_data._Mysize = _Right_data._Mysize;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx

; 3196 :         _My_data._Myres  = _Right_data._Myres;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 3197 :         _Right._Tidy_init();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
$LN6@Take_conte:

; 3198 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -12					; size = 4
__My_data_mem$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 3133 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3134 :         _STL_INTERNAL_CHECK(_Can_memcpy_val);
; 3135 :         const auto _My_data_mem =

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __My_data_mem$[ebp], eax

; 3136 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 3137 :         const auto _Right_data_mem =

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __Right_data_mem$[ebp], eax

; 3138 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 3139 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	push	24					; 00000018H
	mov	edx, DWORD PTR __Right_data_mem$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data_mem$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 3140 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2890 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
	add	esp, 4
	push	eax
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2891 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2892 :         _Take_contents(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2893 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2625 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2626 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>

; 2627 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2614 :         : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2615 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2616 :         _Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2617 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2340 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT
; _this$ = ecx

; 2303 :     constexpr void _Activate_SSO_buffer() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2304 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2305 : #if _HAS_CXX20
; 2306 :         if (_STD is_constant_evaluated()) {
; 2307 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2308 :                 _Bx._Buf[_Idx] = value_type();
; 2309 :             }
; 2310 :         }
; 2311 : #endif // _HAS_CXX20
; 2312 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2299 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2300 :         return _BUF_SIZE <= _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
	movzx	eax, BYTE PTR tv66[ebp]

; 2301 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2290 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2291 :         const value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2292 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2293 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2294 :         }
; 2295 : 
; 2296 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2297 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2281 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2282 :         value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2283 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2284 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2285 :         }
; 2286 : 
; 2287 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2288 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2270 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2271 : 
; 2272 :     // length of internal buffer, [1, 16]:
; 2273 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2274 :     // roundup mask for allocated buffers, [0, 15]:
; 2275 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2276 :                                            : sizeof(value_type) <= 2 ? 7
; 2277 :                                            : sizeof(value_type) <= 4 ? 3
; 2278 :                                            : sizeof(value_type) <= 8 ? 1
; 2279 :                                                                      : 0;
; 2280 : 
; 2281 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2282 :         value_type* _Result = _Bx._Buf;
; 2283 :         if (_Large_string_engaged()) {
; 2284 :             _Result = _Unfancy(_Bx._Ptr);
; 2285 :         }
; 2286 : 
; 2287 :         return _Result;
; 2288 :     }
; 2289 : 
; 2290 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2291 :         const value_type* _Result = _Bx._Buf;
; 2292 :         if (_Large_string_engaged()) {
; 2293 :             _Result = _Unfancy(_Bx._Ptr);
; 2294 :         }
; 2295 : 
; 2296 :         return _Result;
; 2297 :     }
; 2298 : 
; 2299 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2300 :         return _BUF_SIZE <= _Myres;
; 2301 :     }
; 2302 : 
; 2303 :     constexpr void _Activate_SSO_buffer() noexcept {
; 2304 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2305 : #if _HAS_CXX20
; 2306 :         if (_STD is_constant_evaluated()) {
; 2307 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2308 :                 _Bx._Buf[_Idx] = value_type();
; 2309 :             }
; 2310 :         }
; 2311 : #endif // _HAS_CXX20
; 2312 :     }
; 2313 : 
; 2314 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2315 :         // checks whether _Off is in the bounds of [0, size()]
; 2316 :         if (_Mysize < _Off) {
; 2317 :             _Xran();
; 2318 :         }
; 2319 :     }
; 2320 : 
; 2321 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2322 :         // checks whether _Off is in the bounds of [0, size())
; 2323 :         if (_Mysize <= _Off) {
; 2324 :             _Xran();
; 2325 :         }
; 2326 :     }
; 2327 : 
; 2328 :     [[noreturn]] static void _Xran() {
; 2329 :         _Xout_of_range("invalid string position");
; 2330 :     }
; 2331 : 
; 2332 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2333 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2334 :         return (_STD min)(_Size, _Mysize - _Off);
; 2335 :     }
; 2336 : 
; 2337 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2338 :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 2339 :         // renaming `_String_val` (and fixing the visualizer).
; 2340 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2342 : 
; 2343 :         value_type _Buf[_BUF_SIZE];
; 2344 :         pointer _Ptr;
; 2345 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2346 :     } _Bx;
; 2347 : 
; 2348 :     size_type _Mysize = 0; // current length of string

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2349 :     size_type _Myres  = 0; // current storage reserved for string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 2270 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 697  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

	push	ebp
	mov	ebp, esp

; 698  :         return _Al;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 699  :     }

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	or	eax, -1

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 832  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 833  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 835  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 826  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 827  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	827					; 0000033bH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	827					; 0000033bH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 828  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 829  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 830  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 818  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2366 : [[noreturn]] inline void _Xlen_string() {

	push	ebp
	mov	ebp, esp

; 2367 :     _Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen_strin:

; 2368 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 455  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

	push	ebp
	mov	ebp, esp

; 456  : #if _HAS_CXX20
; 457  :         if (_STD is_constant_evaluated()) {
; 458  :             return _Primary_char_traits::assign(_Left, _Right);
; 459  :         }
; 460  : #endif // _HAS_CXX20
; 461  :         _Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 462  :     }

	pop	ebp
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 402  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 403  :         // find length of null-terminated string
; 404  : #if _HAS_CXX17
; 405  : #ifdef __cpp_char8_t
; 406  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 407  : #if _HAS_U8_INTRINSICS
; 408  :             return __builtin_u8strlen(_First);
; 409  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 410  :             return _Primary_char_traits::length(_First);
; 411  : #endif // _HAS_U8_INTRINSICS
; 412  :         } else
; 413  : #endif // __cpp_char8_t
; 414  :         {
; 415  :             return __builtin_strlen(_First);
; 416  :         }
; 417  : #else // _HAS_CXX17
; 418  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 419  : #endif // _HAS_CXX17
; 420  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 121  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 68   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 :     _Container_proxy* _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1304 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1305 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1306 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 652  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 653  :     // assign _New_val to _Val, return previous _Val
; 654  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 655  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 656  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked_v3, COMDAT
; _this$ = ecx

; 1218 :     void _Orphan_me_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1219 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1220 :         _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1221 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_me_:
	DD	1
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_me_
$LN3@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ PROC ; std::_Iterator_base12::_Orphan_me_unlocked_v3, COMDAT
; _this$ = ecx

; 1202 :     _CONSTEXPR20 void _Orphan_me_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1203 :         if (!_Myproxy) { // already orphaned

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Orphan_me_

; 1204 :             return;

	jmp	$LN13@Orphan_me_
$LN10@Orphan_me_:

; 1205 :         }
; 1206 : 
; 1207 :         // adopted, remove self from list
; 1208 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$[ebp], edx
$LN2@Orphan_me_:

; 1209 :         while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me_
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me_

; 1210 :             _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1211 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN6@Orphan_me_:

; 1212 : 
; 1213 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me_
	jmp	SHORT $LN4@Orphan_me_
$LN9@Orphan_me_:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1213					; 000004bdH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me_
	int	3
$LN14@Orphan_me_:
	push	0
	push	1213					; 000004bdH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me_
$LN4@Orphan_me_:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me_

; 1214 :         *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1215 :         _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me_:

; 1216 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ENDP ; std::_Iterator_base12::_Orphan_me_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1197 :     void _Adopt_locked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1198 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1199 :         _Adopt_unlocked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1200 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Adopt_lock:
	DD	1
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Adopt_lock
$LN3@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1180 :     _CONSTEXPR20 void _Adopt_unlocked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1181 :         if (!_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt_unlo

; 1182 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1183 :             return;

	jmp	SHORT $LN5@Adopt_unlo
$LN2@Adopt_unlo:

; 1184 :         }
; 1185 : 
; 1186 :         _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$[ebp], ecx

; 1187 :         if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$[ebp]
	je	SHORT $LN5@Adopt_unlo

; 1188 :             if (_Myproxy) { // adopted, remove self from list

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Adopt_unlo

; 1189 :                 _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN4@Adopt_unlo:

; 1190 :             }
; 1191 :             _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1192 :             _Parent_proxy->_Myfirstiter = this;

	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1193 :             _Myproxy                    = _Parent_proxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@Adopt_unlo:

; 1194 :         }
; 1195 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1152 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1153 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1154 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1132 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1133 : #if _HAS_CXX20
; 1134 :         if (_STD is_constant_evaluated()) {
; 1135 :             _Adopt_unlocked(_Parent);
; 1136 :         } else
; 1137 : #endif // _HAS_CXX20
; 1138 :         {
; 1139 :             _Adopt_locked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked

; 1140 :         }
; 1141 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1121 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1122 : #if _HAS_CXX20
; 1123 :         if (_STD is_constant_evaluated()) {
; 1124 :             _Orphan_me_unlocked_v3();
; 1125 :         } else
; 1126 : #endif // _HAS_CXX20
; 1127 :         {
; 1128 :             _Orphan_me_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3

; 1129 :         }
; 1130 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1098 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1099 : 
; 1100 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1101 :         *this = _Right;
; 1102 :     }
; 1103 : 
; 1104 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1105 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1106 : #if _HAS_CXX20
; 1107 :         if (_STD is_constant_evaluated()) {
; 1108 :             _Assign_unlocked(_Right);
; 1109 :         } else
; 1110 : #endif // _HAS_CXX20
; 1111 :         {
; 1112 :             _Assign_locked(_Right);
; 1113 :         }
; 1114 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1115 :         _Myproxy = _Right._Myproxy;
; 1116 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1117 :         return *this;
; 1118 :     }
; 1119 : 
; 1120 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1121 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1122 : #if _HAS_CXX20
; 1123 :         if (_STD is_constant_evaluated()) {
; 1124 :             _Orphan_me_unlocked_v3();
; 1125 :         } else
; 1126 : #endif // _HAS_CXX20
; 1127 :         {
; 1128 :             _Orphan_me_locked_v3();
; 1129 :         }
; 1130 :     }
; 1131 : 
; 1132 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1133 : #if _HAS_CXX20
; 1134 :         if (_STD is_constant_evaluated()) {
; 1135 :             _Adopt_unlocked(_Parent);
; 1136 :         } else
; 1137 : #endif // _HAS_CXX20
; 1138 :         {
; 1139 :             _Adopt_locked(_Parent);
; 1140 :         }
; 1141 :     }
; 1142 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1143 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1144 :         if (_Parent) { // have a parent, do adoption
; 1145 :             _Myproxy = _Parent->_Myproxy;
; 1146 :         } else { // no future parent, just disown current parent
; 1147 :             _Myproxy = nullptr;
; 1148 :         }
; 1149 :     }
; 1150 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1151 : 
; 1152 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1153 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1154 :     }
; 1155 : 
; 1156 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1157 : 
; 1158 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1159 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1098 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_locked, COMDAT
; _this$ = ecx

; 1090 :     void _Swap_proxy_and_iterators_locked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1091 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1092 :         _Swap_proxy_and_iterators_unlocked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked

; 1093 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Swap_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Swap_proxy:
	DD	1
	DD	$LN4@Swap_proxy
$LN4@Swap_proxy:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Swap_proxy
$LN3@Swap_proxy:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1085 :     void _Orphan_all_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1086 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1087 :         _Orphan_all_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1088 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_all:
	DD	1
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_all
$LN3@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked, COMDAT
; _this$ = ecx

; 1249 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1250 :     _Container_proxy* _Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 1251 :     _Myproxy                = _Right._Myproxy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 1252 :     _Right._Myproxy         = _Temp;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [edx], eax

; 1253 : 
; 1254 :     if (_Myproxy) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Swap_proxy

; 1255 :         _Myproxy->_Mycont = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1256 :     }
; 1257 : 
; 1258 :     if (_Right._Myproxy) {

	mov	edx, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN4@Swap_proxy

; 1259 :         _Right._Myproxy->_Mycont = &_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN4@Swap_proxy:

; 1260 :     }
; 1261 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Pnext$2 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1225 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1226 :     if (!_Myproxy) { // no proxy, already done

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Orphan_all

; 1227 :         return;

	jmp	SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1228 :     }
; 1229 : 
; 1230 :     // proxy allocated, drain it
; 1231 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	push	eax
	call	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
	add	esp, 8
	mov	DWORD PTR __Pnext$2[ebp], eax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnext$2[ebp], edx
$LN4@Orphan_all:
	cmp	DWORD PTR __Pnext$2[ebp], 0
	je	SHORT $LN6@Orphan_all

; 1232 :         _Pnext->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	DWORD PTR [eax], 0

; 1233 :     }

	jmp	SHORT $LN2@Orphan_all
$LN6@Orphan_all:

; 1234 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1263 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1264 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : #if _HAS_CXX20
; 1266 :     if (_STD is_constant_evaluated()) {
; 1267 :         _Swap_proxy_and_iterators_unlocked(_Right);
; 1268 :     } else
; 1269 : #endif // _HAS_CXX20
; 1270 :     {
; 1271 :         _Swap_proxy_and_iterators_locked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked

; 1272 :     }
; 1273 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1274 :     _Swap_proxy_and_iterators_unlocked(_Right);
; 1275 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1276 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1236 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1237 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1238 : #if _HAS_CXX20
; 1239 :     if (_STD is_constant_evaluated()) {
; 1240 :         _Orphan_all_unlocked_v3();
; 1241 :     } else
; 1242 : #endif // _HAS_CXX20
; 1243 :     {
; 1244 :         _Orphan_all_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1245 :     }
; 1246 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1247 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1054 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1055 : 
; 1056 :     _Container_base12(const _Container_base12&)            = delete;
; 1057 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1058 : 
; 1059 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1060 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1061 : 
; 1062 :     template <class _Alloc>
; 1063 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1064 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1065 :         _Construct_in_place(*_New_proxy, this);
; 1066 :         _Myproxy            = _New_proxy;
; 1067 :         _New_proxy->_Mycont = this;
; 1068 :     }
; 1069 : 
; 1070 :     template <class _Alloc>
; 1071 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1072 :         // pre: no iterators refer to the existing proxy
; 1073 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1074 :         _Construct_in_place(*_New_proxy, this);
; 1075 :         _New_proxy->_Mycont = this;
; 1076 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1077 :     }
; 1078 : 
; 1079 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1054 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1046 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1047 : 
; 1048 :     const _Container_base12* _Mycont       = nullptr;
; 1049 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1046 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 166  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 77   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 78   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 328  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 329  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 330  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -16					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 59   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 58   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 60   :         __std_exception_data _InitData = { _Message, true };

	mov	eax, DWORD PTR __Message$[ebp]
	mov	DWORD PTR __InitData$[ebp], eax
	mov	BYTE PTR __InitData$[ebp+4], 1

; 61   :         __std_exception_copy(&_InitData, &_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR __InitData$[ebp]
	push	edx
	call	___std_exception_copy
	add	esp, 8

; 62   :     }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@exception
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@exception:
	DD	1
	DD	$LN4@exception
$LN4@exception:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN3@exception
$LN3@exception:
	DB	95					; 0000005fH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
