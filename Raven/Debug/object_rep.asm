; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\object_rep.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG50723 DB	'invalid argument', 00H
	ORG $+3
$SG50724 DB	'%s', 00H
	ORG $+1
$SG50725 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.34.31933\include\xmemory', 00H
	ORG $+2
$SG50727 DB	00H, 00H
	ORG $+2
$SG50726 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG50728 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG47138 DB	'__finalize', 00H
	ORG $+1
$SG47121 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '_', 00H, 'r', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H
	DB	'p', 00H, 'p', 00H, 00H, 00H
$SG47152 DB	'property ''%s'' is read only', 00H
	ORG $+1
$SG47122 DB	'm', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'y', 00H, '_'
	DB	00H, 'c', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '('
	DB	00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'p', 00H, ')', 00H, 00H, 00H
$SG47171 DB	'No such operator defined', 00H
	ORG $+3
$SG47179 DB	'__luabind_class', 00H
$SG47180 DB	'__gc', 00H
	ORG $+3
$SG47181 DB	'__index', 00H
$SG47182 DB	'__newindex', 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?get_operator_name@detail@luabind@@YAPBDH@Z	; luabind::detail::get_operator_name
PUBLIC	?push@handle@luabind@@QBEXPAUlua_State@@@Z	; luabind::handle::push
PUBLIC	?metatable_ref@class_rep@detail@luabind@@QBEHXZ	; luabind::detail::class_rep::metatable_ref
PUBLIC	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table
PUBLIC	??0object_rep@detail@luabind@@QAE@PAVinstance_holder@12@PAVclass_rep@12@@Z ; luabind::detail::object_rep::object_rep
PUBLIC	??1object_rep@detail@luabind@@QAE@XZ		; luabind::detail::object_rep::~object_rep
PUBLIC	?add_dependency@object_rep@detail@luabind@@QAEXPAUlua_State@@H@Z ; luabind::detail::object_rep::add_dependency
PUBLIC	?release_dependency_refs@object_rep@detail@luabind@@QAEXPAUlua_State@@@Z ; luabind::detail::object_rep::release_dependency_refs
PUBLIC	?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ; luabind::detail::object_rep::deallocate
PUBLIC	??0?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ; boost::aligned_storage<32,4294967295>::aligned_storage<32,4294967295>
PUBLIC	??1?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ; boost::aligned_storage<32,4294967295>::~aligned_storage<32,4294967295>
PUBLIC	??_Gobject_rep@detail@luabind@@QAEPAXI@Z	; luabind::detail::object_rep::`scalar deleting destructor'
PUBLIC	?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z ; luabind::detail::get_instance
PUBLIC	?push_instance_metatable@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::push_instance_metatable
PUBLIC	?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z ; luabind::detail::push_new_instance
PUBLIC	?destroy_instance@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::destroy_instance
PUBLIC	?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA ; `luabind::detail::get_operator_name'::`2'::a
PUBLIC	??_C@_05MEHDOBFN@__add@				; `string'
PUBLIC	??_C@_05HFNNBAII@__sub@				; `string'
PUBLIC	??_C@_05FLJIBNKK@__mul@				; `string'
PUBLIC	??_C@_05IDIBPCOP@__div@				; `string'
PUBLIC	??_C@_05EBGMHPNE@__pow@				; `string'
PUBLIC	??_C@_04BKGOMBLK@__lt@				; `string'
PUBLIC	??_C@_04EJLHOCKK@__le@				; `string'
PUBLIC	??_C@_04GIMIAOHA@__eq@				; `string'
PUBLIC	??_C@_06JPFLIIOJ@__call@			; `string'
PUBLIC	??_C@_05MHFNBPAK@__unm@				; `string'
PUBLIC	??_C@_0L@HDFPAPPH@__tostring@			; `string'
PUBLIC	??_C@_08HGDAODEP@__concat@			; `string'
PUBLIC	??_C@_05MNDELLDN@__len@				; `string'
PUBLIC	__real@3ff0000000000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__wassert:PROC
EXTRN	_free:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_remove:PROC
EXTRN	_lua_insert:PROC
EXTRN	_lua_replace:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_tocfunction:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushfstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_pushlightuserdata:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_newuserdata:PROC
EXTRN	_lua_getmetatable:PROC
EXTRN	_lua_getfenv:PROC
EXTRN	_lua_settable:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_setfenv:PROC
EXTRN	_lua_call:PROC
EXTRN	_lua_error:PROC
EXTRN	_lua_getupvalue:PROC
EXTRN	?property_tag@detail@luabind@@YAHPAUlua_State@@@Z:PROC ; luabind::detail::property_tag
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05MNDELLDN@__len@
CONST	SEGMENT
??_C@_05MNDELLDN@__len@ DB '__len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDAODEP@__concat@
CONST	SEGMENT
??_C@_08HGDAODEP@__concat@ DB '__concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDFPAPPH@__tostring@
CONST	SEGMENT
??_C@_0L@HDFPAPPH@__tostring@ DB '__tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHFNBPAK@__unm@
CONST	SEGMENT
??_C@_05MHFNBPAK@__unm@ DB '__unm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPFLIIOJ@__call@
CONST	SEGMENT
??_C@_06JPFLIIOJ@__call@ DB '__call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIMIAOHA@__eq@
CONST	SEGMENT
??_C@_04GIMIAOHA@__eq@ DB '__eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJLHOCKK@__le@
CONST	SEGMENT
??_C@_04EJLHOCKK@__le@ DB '__le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKGOMBLK@__lt@
CONST	SEGMENT
??_C@_04BKGOMBLK@__lt@ DB '__lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBGMHPNE@__pow@
CONST	SEGMENT
??_C@_05EBGMHPNE@__pow@ DB '__pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDIBPCOP@__div@
CONST	SEGMENT
??_C@_05IDIBPCOP@__div@ DB '__div', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLJIBNKK@__mul@
CONST	SEGMENT
??_C@_05FLJIBNKK@__mul@ DB '__mul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFNNBAII@__sub@
CONST	SEGMENT
??_C@_05HFNNBAII@__sub@ DB '__sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHDOBFN@__add@
CONST	SEGMENT
??_C@_05MEHDOBFN@__add@ DB '__add', 00H			; `string'
CONST	ENDS
;	COMDAT ?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA
_DATA	SEGMENT
?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA DD FLAT:??_C@_05MEHDOBFN@__add@ ; `luabind::detail::get_operator_name'::`2'::a
	DD	FLAT:??_C@_05HFNNBAII@__sub@
	DD	FLAT:??_C@_05FLJIBNKK@__mul@
	DD	FLAT:??_C@_05IDIBPCOP@__div@
	DD	FLAT:??_C@_05EBGMHPNE@__pow@
	DD	FLAT:??_C@_04BKGOMBLK@__lt@
	DD	FLAT:??_C@_04EJLHOCKK@__le@
	DD	FLAT:??_C@_04GIMIAOHA@__eq@
	DD	FLAT:??_C@_06JPFLIIOJ@__call@
	DD	FLAT:??_C@_05MHFNBPAK@__unm@
	DD	FLAT:??_C@_0L@HDFPAPPH@__tostring@
	DD	FLAT:??_C@_08HGDAODEP@__concat@
	DD	FLAT:??_C@_05MNDELLDN@__len@
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$??1object_rep@detail@luabind@@QAE@XZ
	DD	09H
voltbl	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??1object_rep@detail@luabind@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
tv90 = -12						; size = 4
_nargs$1 = -8						; size = 4
_i$2 = -4						; size = 4
_L$ = 8							; size = 4
?dispatch_operator@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::`anonymous namespace'::dispatch_operator

; 172  :       {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 173  :           for (int i = 0; i < 2; ++i)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@dispatch_o
$LN2@dispatch_o:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@dispatch_o:
	cmp	DWORD PTR _i$2[ebp], 2
	jge	$LN3@dispatch_o

; 174  :           {
; 175  :               if (get_instance(L, 1 + i))

	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z ; luabind::detail::get_instance
	add	esp, 8
	test	eax, eax
	je	$LN5@dispatch_o

; 176  :               {
; 177  :                   int nargs = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _nargs$1[ebp], eax

; 178  : 
; 179  :                   lua_pushvalue(L, lua_upvalueindex(1));

	push	-10003					; ffffd8edH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 180  :                   lua_gettable(L, 1 + i);

	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 181  : 
; 182  :                   if (lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@dispatch_o

; 183  :                   {
; 184  :                       lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 185  :                       continue;

	jmp	$LN2@dispatch_o
$LN6@dispatch_o:

; 186  :                   }
; 187  : 
; 188  :                   lua_insert(L, 1); // move the function to the bottom

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_insert
	add	esp, 8

; 189  : 
; 190  :                   nargs = lua_toboolean(L, lua_upvalueindex(2)) ? 1 : nargs;

	push	-10004					; ffffd8ecH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@dispatch_o
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN10@dispatch_o
$LN9@dispatch_o:
	mov	edx, DWORD PTR _nargs$1[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN10@dispatch_o:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _nargs$1[ebp], eax

; 191  : 
; 192  :                   if (lua_toboolean(L, lua_upvalueindex(2))) // remove trailing nil

	push	-10004					; ffffd8ecH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@dispatch_o

; 193  :                   lua_remove(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8
$LN7@dispatch_o:

; 194  : 
; 195  :                   lua_call(L, nargs, 1);

	push	1
	mov	eax, DWORD PTR _nargs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_call
	add	esp, 12					; 0000000cH

; 196  :                   return 1;

	mov	eax, 1
	jmp	SHORT $LN1@dispatch_o
$LN5@dispatch_o:

; 197  :               }
; 198  :           }

	jmp	$LN2@dispatch_o
$LN3@dispatch_o:

; 199  : 
; 200  :           lua_pop(L, lua_gettop(L));

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	neg	eax
	sub	eax, 1
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 201  :           lua_pushstring(L, "No such operator defined");

	push	OFFSET $SG47171
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 202  :           lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4

; 203  : 
; 204  :           return 0;

	xor	eax, eax
$LN1@dispatch_o:

; 205  :       }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dispatch_operator@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::`anonymous namespace'::dispatch_operator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::`anonymous namespace'::get_instance_value

; 149  :       {

	push	ebp
	mov	ebp, esp

; 150  :           lua_getfenv(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfenv
	add	esp, 8

; 151  :           lua_pushvalue(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 152  :           lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawget
	add	esp, 8

; 153  : 
; 154  :           if (lua_isnil(L, -1) && lua_getmetatable(L, -2))

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@get_instan
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getmetatable
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@get_instan

; 155  :           {
; 156  :               lua_pushvalue(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 157  :               lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8
$LN2@get_instan:

; 158  :           }
; 159  : 
; 160  :           if (lua_tocfunction(L, -1) == &property_tag)

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tocfunction
	add	esp, 8
	cmp	eax, OFFSET ?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::property_tag
	jne	SHORT $LN3@get_instan

; 161  :           {
; 162  :               // this member is a property, extract the "get" function and call it.
; 163  :               lua_getupvalue(L, -1, 1);

	push	1
	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_getupvalue
	add	esp, 12					; 0000000cH

; 164  :               lua_pushvalue(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 165  :               lua_call(L, 1, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_call
	add	esp, 12					; 0000000cH
$LN3@get_instan:

; 166  :           }
; 167  : 
; 168  :           return 1;

	mov	eax, 1

; 169  :       }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::`anonymous namespace'::get_instance_value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?set_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::`anonymous namespace'::set_instance_value

; 96   :       {

	push	ebp
	mov	ebp, esp

; 97   :           lua_getfenv(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfenv
	add	esp, 8

; 98   :           lua_pushvalue(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 99   :           lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawget
	add	esp, 8

; 100  : 
; 101  :           if (lua_isnil(L, -1) && lua_getmetatable(L, -2))

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@set_instan
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getmetatable
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@set_instan

; 102  :           {
; 103  :               lua_pushvalue(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 104  :               lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8

; 105  :               lua_replace(L, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_replace
	add	esp, 8

; 106  :               lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN2@set_instan:

; 107  :           }
; 108  : 
; 109  :           if (lua_tocfunction(L, -1) == &property_tag)

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tocfunction
	add	esp, 8
	cmp	eax, OFFSET ?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::property_tag
	jne	$LN3@set_instan

; 110  :           {
; 111  :               // this member is a property, extract the "set" function and call it.
; 112  :               lua_getupvalue(L, -1, 2);

	push	2
	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getupvalue
	add	esp, 12					; 0000000cH

; 113  : 
; 114  :               if (lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@set_instan

; 115  :               {
; 116  :                   lua_pushfstring(L, "property '%s' is read only", lua_tostring(L, 2));

	push	0
	push	2
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tolstring
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET $SG47152
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushfstring
	add	esp, 12					; 0000000cH

; 117  :                   lua_error(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_error
	add	esp, 4
$LN4@set_instan:

; 118  :               }
; 119  : 
; 120  :               lua_pushvalue(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 121  :               lua_pushvalue(L, 3);

	push	3
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 122  :               lua_call(L, 2, 0);

	push	0
	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_call
	add	esp, 12					; 0000000cH

; 123  :               return 0;

	xor	eax, eax
	jmp	$LN1@set_instan
$LN3@set_instan:

; 124  :           }
; 125  : 
; 126  :           lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 127  : 
; 128  :           if (!lua_getmetatable(L, 4))

	push	4
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getmetatable
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@set_instan

; 129  :           {
; 130  :               lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 131  :               lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 132  :               lua_setfenv(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfenv
	add	esp, 8

; 133  :               lua_pushvalue(L, 4);

	push	4
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 134  :               lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setmetatable
	add	esp, 8

; 135  :           }

	jmp	SHORT $LN6@set_instan
$LN5@set_instan:

; 136  :           else
; 137  :           {
; 138  :               lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8
$LN6@set_instan:

; 139  :           }
; 140  : 
; 141  :           lua_pushvalue(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 142  :           lua_pushvalue(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 143  :           lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8

; 144  : 
; 145  :           return 0;

	xor	eax, eax
$LN1@set_instan:

; 146  :       }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?set_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::`anonymous namespace'::set_instance_value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_instance$ = -4						; size = 4
_L$ = 8							; size = 4
?destroy_instance@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::destroy_instance

; 71   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 72   :         object_rep* instance = static_cast<object_rep*>(lua_touserdata(L, 1));

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _instance$[ebp], eax

; 73   : 
; 74   :         lua_pushstring(L, "__finalize");

	push	OFFSET $SG47138
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 75   :         lua_gettable(L, 1);

	push	1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettable
	add	esp, 8

; 76   : 
; 77   :         if (lua_isnil(L, -1))

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@destroy_in

; 78   :         {
; 79   :             lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 80   :         }

	jmp	SHORT $LN3@destroy_in
$LN2@destroy_in:

; 81   :         else
; 82   :         {
; 83   :             lua_pushvalue(L, 1);

	push	1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 84   :             lua_call(L, 1, 0);

	push	0
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_call
	add	esp, 12					; 0000000cH
$LN3@destroy_in:

; 85   :         }
; 86   : 
; 87   :         instance->release_dependency_refs(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _instance$[ebp]
	call	?release_dependency_refs@object_rep@detail@luabind@@QAEXPAUlua_State@@@Z ; luabind::detail::object_rep::release_dependency_refs

; 88   :         instance->~object_rep();

	push	0
	mov	ecx, DWORD PTR _instance$[ebp]
	call	??_Gobject_rep@detail@luabind@@QAEPAXI@Z

; 89   :         return 0;

	xor	eax, eax

; 90   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?destroy_instance@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::destroy_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_result$ = -8						; size = 4
_storage$ = -4						; size = 4
_L$ = 8							; size = 4
_cls$ = 12						; size = 4
?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z PROC ; luabind::detail::push_new_instance

; 261  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 262  :         void* storage = lua_newuserdata(L, sizeof(object_rep));

	push	48					; 00000030H
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_newuserdata
	add	esp, 8
	mov	DWORD PTR _storage$[ebp], eax

; 263  :         object_rep* result = new (storage) object_rep(0, cls);

	mov	ecx, DWORD PTR _storage$[ebp]
	push	ecx
	push	48					; 00000030H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR _cls$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0object_rep@detail@luabind@@QAE@PAVinstance_holder@12@PAVclass_rep@12@@Z ; luabind::detail::object_rep::object_rep
	mov	DWORD PTR _result$[ebp], eax

; 264  :         cls->get_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cls$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 265  :         lua_setfenv(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfenv
	add	esp, 8

; 266  :         lua_rawgeti(L, LUA_REGISTRYINDEX, cls->metatable_ref());

	mov	ecx, DWORD PTR _cls$[ebp]
	call	?metatable_ref@class_rep@detail@luabind@@QBEHXZ ; luabind::detail::class_rep::metatable_ref
	push	eax
	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 267  :         lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setmetatable
	add	esp, 8

; 268  :         return result;

	mov	eax, DWORD PTR _result$[ebp]

; 269  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z ENDP ; luabind::detail::push_new_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
tv139 = -8						; size = 4
_op$1 = -4						; size = 4
_L$ = 8							; size = 4
?push_instance_metatable@detail@luabind@@YAXPAUlua_State@@@Z PROC ; luabind::detail::push_instance_metatable

; 210  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 211  :         lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 212  : 
; 213  :         // just indicate that this really is a class and not just
; 214  :         // any user data
; 215  :         lua_pushboolean(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 216  :         lua_setfield(L, -2, "__luabind_class");

	push	OFFSET $SG47179
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield

; 217  : 
; 218  :         // This is used as a tag to determine if a userdata is a luabind
; 219  :         // instance. We use a numeric key and a cclosure for fast comparision.
; 220  :         lua_pushnumber(L, 1);

	add	esp, 4
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushnumber
	add	esp, 12					; 0000000cH

; 221  :         lua_pushcclosure(L, get_instance_value, 0);

	push	0
	push	OFFSET ?get_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::get_instance_value
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 222  :         lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 223  : 
; 224  :         lua_pushcclosure(L, destroy_instance, 0);

	push	0
	push	OFFSET ?destroy_instance@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::destroy_instance
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 225  :         lua_setfield(L, -2, "__gc");

	push	OFFSET $SG47180
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 226  : 
; 227  :         lua_pushcclosure(L, get_instance_value, 0);

	push	0
	push	OFFSET ?get_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::get_instance_value
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 228  :         lua_setfield(L, -2, "__index");

	push	OFFSET $SG47181
	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 229  : 
; 230  :         lua_pushcclosure(L, set_instance_value, 0);

	push	0
	push	OFFSET ?set_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::set_instance_value
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 231  :         lua_setfield(L, -2, "__newindex");

	push	OFFSET $SG47182
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 232  : 
; 233  :         for (int op = 0; op < number_of_operators; ++op)

	mov	DWORD PTR _op$1[ebp], 0
	jmp	SHORT $LN4@push_insta
$LN2@push_insta:
	mov	eax, DWORD PTR _op$1[ebp]
	add	eax, 1
	mov	DWORD PTR _op$1[ebp], eax
$LN4@push_insta:
	cmp	DWORD PTR _op$1[ebp], 13		; 0000000dH
	jge	SHORT $LN3@push_insta

; 234  :         {
; 235  :             lua_pushstring(L, get_operator_name(op));

	mov	ecx, DWORD PTR _op$1[ebp]
	push	ecx
	call	?get_operator_name@detail@luabind@@YAPBDH@Z ; luabind::detail::get_operator_name
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 236  :             lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 237  :             lua_pushboolean(L, op == op_unm || op == op_len);

	cmp	DWORD PTR _op$1[ebp], 9
	je	SHORT $LN6@push_insta
	cmp	DWORD PTR _op$1[ebp], 12		; 0000000cH
	je	SHORT $LN6@push_insta
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN7@push_insta
$LN6@push_insta:
	mov	DWORD PTR tv139[ebp], 1
$LN7@push_insta:
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 238  :             lua_pushcclosure(L, &dispatch_operator, 2);

	push	2
	push	OFFSET ?dispatch_operator@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::dispatch_operator
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 239  :             lua_settable(L, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settable
	add	esp, 8

; 240  :         }

	jmp	$LN2@push_insta
$LN3@push_insta:

; 241  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?push_instance_metatable@detail@luabind@@YAXPAUlua_State@@@Z ENDP ; luabind::detail::push_instance_metatable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_result$ = -4						; size = 4
_L$ = 8							; size = 4
_index$ = 12						; size = 4
?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z PROC ; luabind::detail::get_instance

; 244  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 245  :         object_rep* result = static_cast<object_rep*>(lua_touserdata(L, index));

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 246  : 
; 247  :         if (!result || !lua_getmetatable(L, index))

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@get_instan
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getmetatable
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@get_instan
$LN3@get_instan:

; 248  :             return 0;

	xor	eax, eax
	jmp	SHORT $LN1@get_instan
$LN2@get_instan:

; 249  : 
; 250  :         lua_rawgeti(L, -1, 1);

	push	1
	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 251  : 
; 252  :         if (lua_tocfunction(L, -1) != &get_instance_value)

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tocfunction
	add	esp, 8
	cmp	eax, OFFSET ?get_instance_value@?A0x4f6ac46e@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::get_instance_value
	je	SHORT $LN4@get_instan

; 253  :             result = 0;

	mov	DWORD PTR _result$[ebp], 0
$LN4@get_instan:

; 254  : 
; 255  :         lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 256  : 
; 257  :         return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN1@get_instan:

; 258  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@H@Z ENDP ; luabind::detail::get_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gobject_rep@detail@luabind@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gobject_rep@detail@luabind@@QAEPAXI@Z PROC		; luabind::detail::object_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1object_rep@detail@luabind@@QAE@XZ	; luabind::detail::object_rep::~object_rep
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gobject_rep@detail@luabind@@QAEPAXI@Z ENDP		; luabind::detail::object_rep::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\type_traits\aligned_storage.hpp
;	COMDAT ??1?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ PROC ; boost::aligned_storage<32,4294967295>::~aligned_storage<32,4294967295>, COMDAT
; _this$ = ecx

; 113  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ENDP ; boost::aligned_storage<32,4294967295>::~aligned_storage<32,4294967295>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\type_traits\aligned_storage.hpp
;	COMDAT ??0?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ PROC ; boost::aligned_storage<32,4294967295>::aligned_storage<32,4294967295>, COMDAT
; _this$ = ecx

; 108  :     aligned_storage()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  :     {
; 110  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ENDP ; boost::aligned_storage<32,4294967295>::aligned_storage<32,4294967295>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\object_rep.hpp
;	COMDAT ?deallocate@object_rep@detail@luabind@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_storage$ = 8						; size = 4
?deallocate@object_rep@detail@luabind@@QAEXPAX@Z PROC	; luabind::detail::object_rep::deallocate, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			if (storage == &m_instance_buffer)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	cmp	DWORD PTR _storage$[ebp], eax
	jne	SHORT $LN2@deallocate

; 83   : 				return;

	jmp	SHORT $LN1@deallocate
$LN2@deallocate:

; 84   : 			std::free(storage);

	mov	ecx, DWORD PTR _storage$[ebp]
	push	ecx
	call	_free
	add	esp, 4
$LN1@deallocate:

; 85   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ENDP	; luabind::detail::object_rep::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_key$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?release_dependency_refs@object_rep@detail@luabind@@QAEXPAUlua_State@@@Z PROC ; luabind::detail::object_rep::release_dependency_refs
; _this$ = ecx

; 60   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 61   :         for (std::size_t i = 0; i < m_dependency_cnt; ++i)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@release_de
$LN2@release_de:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@release_de:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jae	SHORT $LN1@release_de

; 62   :         {
; 63   :             void* key = (char*)this + i;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _key$1[ebp], eax

; 64   :             lua_pushlightuserdata(L, key);

	mov	ecx, DWORD PTR _key$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushlightuserdata
	add	esp, 8

; 65   :             lua_pushnil(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushnil
	add	esp, 4

; 66   :             lua_rawset(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8

; 67   :         }

	jmp	SHORT $LN2@release_de
$LN1@release_de:

; 68   :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?release_dependency_refs@object_rep@detail@luabind@@QAEXPAUlua_State@@@Z ENDP ; luabind::detail::object_rep::release_dependency_refs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_key$ = -8						; size = 4
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_index$ = 12						; size = 4
?add_dependency@object_rep@detail@luabind@@QAEXPAUlua_State@@H@Z PROC ; luabind::detail::object_rep::add_dependency
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 48   :         assert(m_dependency_cnt < sizeof(object_rep));

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 48			; 00000030H
	jb	SHORT $LN3@add_depend
	push	48					; 00000030H
	push	OFFSET $SG47121
	push	OFFSET $SG47122
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@add_depend:

; 49   : 
; 50   :         void* key = (char*)this + m_dependency_cnt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _key$[ebp], eax

; 51   : 
; 52   :         lua_pushlightuserdata(L, key);

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushlightuserdata
	add	esp, 8

; 53   :         lua_pushvalue(L, index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 54   :         lua_rawset(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 55   : 
; 56   :         ++m_dependency_cnt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 57   : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?add_dependency@object_rep@detail@luabind@@QAEXPAUlua_State@@H@Z ENDP ; luabind::detail::object_rep::add_dependency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1object_rep@detail@luabind@@QAE@XZ PROC		; luabind::detail::object_rep::~object_rep
; _this$ = ecx

; 39   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1object_rep@detail@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 40   :         if (!m_instance)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@object_rep

; 41   :             return;

	jmp	SHORT $LN1@object_rep
$LN2@object_rep:

; 42   :         m_instance->~instance_holder();

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   :         deallocate(m_instance);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@object_rep@detail@luabind@@QAEXPAX@Z ; luabind::detail::object_rep::deallocate
$LN1@object_rep:

; 44   : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ; boost::aligned_storage<32,4294967295>::~aligned_storage<32,4294967295>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1object_rep@detail@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1object_rep@detail@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1object_rep@detail@luabind@@QAE@XZ ENDP		; luabind::detail::object_rep::~object_rep
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\object_rep.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_instance$ = 8						; size = 4
_crep$ = 12						; size = 4
??0object_rep@detail@luabind@@QAE@PAVinstance_holder@12@PAVclass_rep@12@@Z PROC ; luabind::detail::object_rep::object_rep
; _this$ = ecx

; 36   : 	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 		: m_instance(instance)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _instance$[ebp]
	mov	DWORD PTR [eax], ecx

; 36   : 	{}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$aligned_storage@$0CA@$0PPPPPPPP@@boost@@QAE@XZ ; boost::aligned_storage<32,4294967295>::aligned_storage<32,4294967295>

; 34   : 		, m_classrep(crep)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _crep$[ebp]
	mov	DWORD PTR [edx+40], eax

; 35   : 		, m_dependency_cnt(0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 36   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0object_rep@detail@luabind@@QAE@PAVinstance_holder@12@PAVclass_rep@12@@Z ENDP ; luabind::detail::object_rep::object_rep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_table, COMDAT
; _this$ = ecx

; 125  : 		void get_table(lua_State* L) const { m_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?metatable_ref@class_rep@detail@luabind@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?metatable_ref@class_rep@detail@luabind@@QBEHXZ PROC	; luabind::detail::class_rep::metatable_ref, COMDAT
; _this$ = ecx

; 123  : 		int metatable_ref() const throw() { return m_instance_metatable; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?metatable_ref@class_rep@detail@luabind@@QBEHXZ ENDP	; luabind::detail::class_rep::metatable_ref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?push@handle@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@handle@luabind@@QBEXPAUlua_State@@@Z PROC		; luabind::handle::push, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     lua_rawgeti(interpreter, LUA_REGISTRYINDEX, m_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 107  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@handle@luabind@@QBEXPAUlua_State@@@Z ENDP		; luabind::handle::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\operator_id.hpp
;	COMDAT ?get_operator_name@detail@luabind@@YAPBDH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?get_operator_name@detail@luabind@@YAPBDH@Z PROC	; luabind::detail::get_operator_name, COMDAT

; 51   : 	{

	push	ebp
	mov	ebp, esp

; 52   : 		static const char* a[number_of_operators] = {
; 53   :             "__add", "__sub", "__mul", "__div", "__pow", 
; 54   :             "__lt", "__le", "__eq", "__call", "__unm", 
; 55   :             "__tostring", "__concat", "__len" };
; 56   : 		return a[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA[eax*4]

; 57   : 	}

	pop	ebp
	ret	0
?get_operator_name@detail@luabind@@YAPBDH@Z ENDP	; luabind::detail::get_operator_name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
