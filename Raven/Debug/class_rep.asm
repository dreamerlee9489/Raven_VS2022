; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31629.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\class_rep.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG108604 DB	'invalid argument', 00H
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
?yield@luabind@@3U?$policy_cons@Uyield_policy@detail@luabind@@Unull_type@23@@detail@1@B	ORG $+1 ; luabind::yield
	ORG $+1
$SG108605 DB	'%s', 00H
	ORG $+1
$SG108606 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.33.31629\include\xmemory', 00H
	ORG $+2
$SG108608 DB	00H, 00H
	ORG $+2
$SG108607 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '3', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '6', 00H, '2', 00H, '9', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG108609 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG101572 DB	'luabind: property_tag function can''t be called', 00H
	ORG $+1
$SG101589 DB	'you must call luabind::open()', 00H
	ORG $+2
$SG101593 DB	'__luabind_class_id_map', 00H
	ORG $+1
$SG102090 DB	'You cannot derive from an unregistered type', 00H
$SG101590 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H
	ORG $+2
$SG101612 DB	'__luabind_class_id_map', 00H
	ORG $+1
$SG102145 DB	'no static ''', 00H
$SG101591 DB	'(', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, '(', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'L', 00H, 'U', 00H, 'A', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'R'
	DB	00H, 'E', 00H, 'F', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '"', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'm'
	DB	00H, 'u', 00H, 's', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, ' ', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, ':', 00H, ':', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, '"', 00H, 00H
	DB	00H
	ORG $+2
$SG101592 DB	'__luabind_cast_graph', 00H
	ORG $+3
$SG101608 DB	'you must call luabind::open()', 00H
	ORG $+2
$SG101807 DB	'__init', 00H
	ORG $+1
$SG102147 DB	'''', 00H
	ORG $+2
$SG101609 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H
	ORG $+2
$SG102122 DB	'__init', 00H
	ORG $+1
$SG102154 DB	'__luabind_classrep', 00H
	ORG $+1
$SG101610 DB	'(', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, '(', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'L', 00H, 'U', 00H, 'A', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'R'
	DB	00H, 'E', 00H, 'F', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '"', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'm'
	DB	00H, 'u', 00H, 's', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, ' ', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, ':', 00H, ':', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, '"', 00H, 00H
	DB	00H
	ORG $+2
$SG101611 DB	'__luabind_cast_graph', 00H
	ORG $+3
$SG101806 DB	'super', 00H
	ORG $+2
$SG101809 DB	'super', 00H
	ORG $+2
$SG102257 DB	'__finalize', 00H
	ORG $+1
$SG102091 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H
	ORG $+6
$SG102092 DB	'b', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '"', 00H, 'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'"', 00H, 00H, 00H
$SG102120 DB	'super', 00H
	ORG $+2
$SG102121 DB	'super', 00H
	ORG $+2
$SG102123 DB	'super', 00H
	ORG $+2
$SG102146 DB	''' in class ''', 00H
CONST	ENDS
PUBLIC	?disable_super_deprecation@luabind@@YAXXZ	; luabind::disable_super_deprecation
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_unlocked
PUBLIC	?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_locked
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
PUBLIC	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$tuple@$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::lua_reference::lua_reference
PUBLIC	??1lua_reference@detail@luabind@@QAE@XZ		; luabind::detail::lua_reference::~lua_reference
PUBLIC	?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z ; luabind::detail::lua_reference::set
PUBLIC	?reset@lua_reference@detail@luabind@@QAEXXZ	; luabind::detail::lua_reference::reset
PUBLIC	??$swap@H$0A@@std@@YAXAAH0@Z			; std::swap<int,0>
PUBLIC	??Rltstr@detail@luabind@@QBE_NPBD0@Z		; luabind::detail::ltstr::operator()
PUBLIC	??0type_id@luabind@@QAE@ABVtype_info@@@Z	; luabind::type_id::type_id
PUBLIC	?cpp_instance@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_instance
PUBLIC	?cpp_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_class
PUBLIC	?lua_instance@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::lua_instance
PUBLIC	?lua_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::lua_class
PUBLIC	?get_operator_name@detail@luabind@@YAPBDH@Z	; luabind::detail::get_operator_name
PUBLIC	??0handle@luabind@@QAE@XZ			; luabind::handle::handle
PUBLIC	??0handle@luabind@@QAE@PAUlua_State@@H@Z	; luabind::handle::handle
PUBLIC	??1handle@luabind@@QAE@XZ			; luabind::handle::~handle
PUBLIC	?swap@handle@luabind@@QAEXAAV12@@Z		; luabind::handle::swap
PUBLIC	?push@handle@luabind@@QBEXPAUlua_State@@@Z	; luabind::handle::push
PUBLIC	??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ; std::swap<lua_State *,0>
PUBLIC	?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::property_tag
PUBLIC	??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z ; luabind::detail::class_rep::class_rep
PUBLIC	??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z ; luabind::detail::class_rep::class_rep
PUBLIC	??1class_rep@detail@luabind@@QAE@XZ		; luabind::detail::class_rep::~class_rep
PUBLIC	?allocate@class_rep@detail@luabind@@QBE?AU?$pair@PAXPAX@std@@PAUlua_State@@@Z ; luabind::detail::class_rep::allocate
PUBLIC	?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::constructor_dispatcher
PUBLIC	?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z ; luabind::detail::class_rep::add_base_class
PUBLIC	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
PUBLIC	?name@class_rep@detail@luabind@@QBEPBDXZ	; luabind::detail::class_rep::name
PUBLIC	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table
PUBLIC	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table
PUBLIC	?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ ; luabind::detail::class_rep::get_class_type
PUBLIC	?super_callback@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::super_callback
PUBLIC	?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::lua_settable_dispatcher
PUBLIC	?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::static_class_gettable
PUBLIC	?has_operator_in_lua@class_rep@detail@luabind@@QAE_NPAUlua_State@@H@Z ; luabind::detail::class_rep::has_operator_in_lua
PUBLIC	?cache_operators@class_rep@detail@luabind@@AAEXPAUlua_State@@@Z ; luabind::detail::class_rep::cache_operators
PUBLIC	??0?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAE@XZ ; std::allocator<luabind::detail::class_rep::base_info>::allocator<luabind::detail::class_rep::base_info>
PUBLIC	?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::deallocate
PUBLIC	?allocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::max_size
PUBLIC	??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	?push_back@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEXABUbase_info@class_rep@detail@luabind@@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::push_back
PUBLIC	?begin@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::begin
PUBLIC	?end@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::end
PUBLIC	?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::empty
PUBLIC	?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::max_size
PUBLIC	?capacity@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::capacity
PUBLIC	??A?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEABUbase_info@class_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEII@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXQAUbase_info@class_rep@detail@luabind@@II@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Change_array
PUBLIC	?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Tidy
PUBLIC	?_Xlength@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@CAXXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range
PUBLIC	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
PUBLIC	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
PUBLIC	??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::end
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::find
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Min
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
PUBLIC	??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
PUBLIC	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
PUBLIC	?is_class_rep@detail@luabind@@YA_NPAUlua_State@@H@Z ; luabind::detail::is_class_rep
PUBLIC	?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z ; luabind::detail::finalize
PUBLIC	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
PUBLIC	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
PUBLIC	??$?0AAPADPAX$0A@@?$pair@PAXPAX@std@@QAE@AAPAD$$QAPAX@Z ; std::pair<void *,void *>::pair<void *,void *><char * &,void *,0>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::operator++
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
PUBLIC	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator->
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
PUBLIC	?pointer_to@?$pointer_traits@PBU?$pair@QBDH@std@@@std@@SAPBU?$pair@QBDH@2@ABU32@@Z ; std::pointer_traits<std::pair<char const * const,int> const *>::pointer_to
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
PUBLIC	??$_Find@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find<char const *>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
PUBLIC	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > const >
PUBLIC	??$emplace_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE?A_TABUbase_info@class_rep@detail@luabind@@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::emplace_back<luabind::detail::class_rep::base_info const &>
PUBLIC	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
PUBLIC	??$_Emplace_one_at_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_one_at_back<luabind::detail::class_rep::base_info const &>
PUBLIC	??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::class_rep::base_info>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1><>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$addressof@$$CBU?$pair@QBDH@std@@@std@@YAPBU?$pair@QBDH@0@ABU10@@Z ; std::addressof<std::pair<char const * const,int> const >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
PUBLIC	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z		; std::forward<void *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>
PUBLIC	??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
PUBLIC	??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
PUBLIC	??$forward@ABQBD@std@@YAABQBDABQBD@Z		; std::forward<char const * const &>
PUBLIC	??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
PUBLIC	??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z		; std::tuple<char const * const &>::tuple<char const * const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Emplace_back_with_unused_capacity@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back_with_unused_capacity<luabind::detail::class_rep::base_info const &>
PUBLIC	??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_reallocate<luabind::detail::class_rep::base_info const &>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ; std::forward<luabind::detail::ltstr const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
PUBLIC	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
PUBLIC	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$_Construct_in_place@Ubase_info@class_rep@detail@luabind@@ABU1234@@std@@YAXAAUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::_Construct_in_place<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
PUBLIC	??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::class_rep::base_info>
PUBLIC	??$construct@Ubase_info@class_rep@detail@luabind@@ABU1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@ABU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
PUBLIC	??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
PUBLIC	??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
PUBLIC	??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ; std::_Voidify_iter<std::pair<char const * const,int> *>
PUBLIC	??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$addressof@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::addressof<luabind::detail::class_rep::base_info>
PUBLIC	??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>
PUBLIC	??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep::base_info * const &>
PUBLIC	??$move@AAUbase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::move<luabind::detail::class_rep::base_info &>
PUBLIC	??$_Copy_memmove@PAUbase_info@class_rep@detail@luabind@@PAU1234@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@00@Z ; std::_Copy_memmove<luabind::detail::class_rep::base_info *,luabind::detail::class_rep::base_info *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Release
PUBLIC	??$_Emplace_back@Ubase_info@class_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEX$$QAUbase_info@class_rep@detail@luabind@@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back<luabind::detail::class_rep::base_info>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
PUBLIC	??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
PUBLIC	??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep::base_info *>
PUBLIC	??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::class_rep::base_info>
PUBLIC	??$construct@Ubase_info@class_rep@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@$$QAU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info>
PUBLIC	??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
PUBLIC	??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ; std::_Tuple_get<0,char const * const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R0?AUnull_type@detail@luabind@@@8		; luabind::detail::null_type `RTTI Type Descriptor'
PUBLIC	?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA ; `luabind::detail::get_operator_name'::`2'::a
PUBLIC	??_C@_05MEHDOBFN@__add@				; `string'
PUBLIC	??_C@_05HFNNBAII@__sub@				; `string'
PUBLIC	??_C@_05FLJIBNKK@__mul@				; `string'
PUBLIC	??_C@_05IDIBPCOP@__div@				; `string'
PUBLIC	??_C@_05EBGMHPNE@__pow@				; `string'
PUBLIC	??_C@_04BKGOMBLK@__lt@				; `string'
PUBLIC	??_C@_04EJLHOCKK@__le@				; `string'
PUBLIC	??_C@_04GIMIAOHA@__eq@				; `string'
PUBLIC	??_C@_06JPFLIIOJ@__call@			; `string'
PUBLIC	??_C@_05MHFNBPAK@__unm@				; `string'
PUBLIC	??_C@_0L@HDFPAPPH@__tostring@			; `string'
PUBLIC	??_C@_08HGDAODEP@__concat@			; `string'
PUBLIC	??_C@_05MNDELLDN@__len@				; `string'
PUBLIC	??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ ; `string'
PUBLIC	??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ ; `string'
PUBLIC	??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GD@JCANJH@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MG@LDPLICNP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_remove:PROC
EXTRN	_lua_insert:PROC
EXTRN	_lua_replace:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_toboolean:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_objlen:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_pushnumber:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushlightuserdata:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_newuserdata:PROC
EXTRN	_lua_getmetatable:PROC
EXTRN	_lua_settable:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_call:PROC
EXTRN	_lua_error:PROC
EXTRN	_luaL_ref:PROC
EXTRN	_luaL_unref:PROC
EXTRN	__wassert:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z:PROC ; luabind::detail::class_registry::get_registry
EXTRN	?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z:PROC ; luabind::detail::push_new_instance
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init
?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init_if
?super_deprecation_disabled@?A0xe7459c65@@3_NA DB 01H DUP (?) ; `anonymous namespace'::super_deprecation_disabled
_BSS	ENDS
CRT$XCU	SEGMENT
?in_place_init$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@LDPLICNP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MG@LDPLICNP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '3', 00H, '.', 00H, '3', 00H, '1', 00H, '6'
	DB	00H, '2', 00H, '9', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@JCANJH@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GD@JCANJH@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program Fil'
	DB	'es\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33'
	DB	'.31629\include\xutility', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ DB 'vector iterators '
	DB	'incompatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
CONST	SEGMENT
??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ DB 'cannot incre'
	DB	'ment end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '3', 00H, '.', 00H, '3', 00H, '1', 00H, '6'
	DB	00H, '2', 00H, '9', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'33.31629\include\xtree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
CONST	SEGMENT
??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ DB 'can''t increm'
	DB	'ent vector iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '3', 00H, '.', 00H, '3', 00H, '1', 00H, '6'
	DB	00H, '2', 00H, '9', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program Fil'
	DB	'es\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33'
	DB	'.31629\include\vector', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ DB 'can''t increm'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNDELLDN@__len@
CONST	SEGMENT
??_C@_05MNDELLDN@__len@ DB '__len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDAODEP@__concat@
CONST	SEGMENT
??_C@_08HGDAODEP@__concat@ DB '__concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDFPAPPH@__tostring@
CONST	SEGMENT
??_C@_0L@HDFPAPPH@__tostring@ DB '__tostring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHFNBPAK@__unm@
CONST	SEGMENT
??_C@_05MHFNBPAK@__unm@ DB '__unm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPFLIIOJ@__call@
CONST	SEGMENT
??_C@_06JPFLIIOJ@__call@ DB '__call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIMIAOHA@__eq@
CONST	SEGMENT
??_C@_04GIMIAOHA@__eq@ DB '__eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJLHOCKK@__le@
CONST	SEGMENT
??_C@_04EJLHOCKK@__le@ DB '__le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKGOMBLK@__lt@
CONST	SEGMENT
??_C@_04BKGOMBLK@__lt@ DB '__lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBGMHPNE@__pow@
CONST	SEGMENT
??_C@_05EBGMHPNE@__pow@ DB '__pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDIBPCOP@__div@
CONST	SEGMENT
??_C@_05IDIBPCOP@__div@ DB '__div', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLJIBNKK@__mul@
CONST	SEGMENT
??_C@_05FLJIBNKK@__mul@ DB '__mul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFNNBAII@__sub@
CONST	SEGMENT
??_C@_05HFNNBAII@__sub@ DB '__sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHDOBFN@__add@
CONST	SEGMENT
??_C@_05MEHDOBFN@__add@ DB '__add', 00H			; `string'
CONST	ENDS
;	COMDAT ?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA
_DATA	SEGMENT
?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA DD FLAT:??_C@_05MEHDOBFN@__add@ ; `luabind::detail::get_operator_name'::`2'::a
	DD	FLAT:??_C@_05HFNNBAII@__sub@
	DD	FLAT:??_C@_05FLJIBNKK@__mul@
	DD	FLAT:??_C@_05IDIBPCOP@__div@
	DD	FLAT:??_C@_05EBGMHPNE@__pow@
	DD	FLAT:??_C@_04BKGOMBLK@__lt@
	DD	FLAT:??_C@_04EJLHOCKK@__le@
	DD	FLAT:??_C@_04GIMIAOHA@__eq@
	DD	FLAT:??_C@_06JPFLIIOJ@__call@
	DD	FLAT:??_C@_05MHFNBPAK@__unm@
	DD	FLAT:??_C@_0L@HDFPAPPH@__tostring@
	DD	FLAT:??_C@_08HGDAODEP@__concat@
	DD	FLAT:??_C@_05MNDELLDN@__len@
_DATA	ENDS
;	COMDAT ??_R0?AUnull_type@detail@luabind@@@8
data$r	SEGMENT
??_R0?AUnull_type@detail@luabind@@@8 DD FLAT:??_7type_info@@6B@ ; luabind::detail::null_type `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUnull_type@detail@luabind@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '3', 00H, '.', 00H, '3', 00H, '1', 00H, '6'
	DB	00H, '2', 00H, '9', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'33.31629\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0
__ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z$1
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$0
	DD	055H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$0
	DD	055H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z$1
	DD	01eH
	DD	02bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z
	DD	02fH
	DD	0249H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z$0
__unwindtable$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z$1
__unwindtable$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z$3
__ehfuncinfo$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$6
__unwindtable$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$6
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1lua_reference@detail@luabind@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?in_place_init_if$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init_if@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init_if$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z PROC ; std::_Tuple_get<0,char const * const &>, COMDAT

; 1005 : _NODISCARD constexpr auto&& _Tuple_get(tuple<_Types...>&& _Tuple) noexcept {

	push	ebp
	mov	ebp, esp

; 1006 :     // used by pair's piecewise constructor
; 1007 :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 1008 :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 1009 :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

	mov	eax, DWORD PTR __Tuple$[ebp]
	mov	eax, DWORD PTR [eax]

; 1010 : }

	pop	ebp
	ret	0
??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ENDP ; std::_Tuple_get<0,char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::move<std::tuple<char const * const &> &>, COMDAT

; 1422 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1423 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1424 : }

	pop	ebp
	ret	0
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::move<std::tuple<char const * const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$construct@Ubase_info@class_rep@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@$$QAU3456@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Ubase_info@class_rep@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@$$QAU3456@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info>, COMDAT

; 675  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 676  : #if _HAS_CXX20
; 677  :         if (_STD is_constant_evaluated()) {
; 678  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 679  :         } else
; 680  : #endif // _HAS_CXX20
; 681  :         {
; 682  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::class_rep::base_info>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 683  :         }
; 684  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@Ubase_info@class_rep@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@$$QAU3456@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z PROC ; std::forward<luabind::detail::class_rep::base_info>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ENDP ; std::forward<luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z PROC ; std::_To_address<luabind::detail::class_rep::base_info *>, COMDAT

; 4023 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 4024 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4025 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 4026 : }

	pop	ebp
	ret	0
??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::_To_address<luabind::detail::class_rep::base_info *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 287  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
	add	esp, 4
	push	eax
	call	??$_Tuple_get@$0A@ABQBD@std@@YA$$QA_P$$QAV?$tuple@ABQBD@0@@Z ; std::_Tuple_get<0,char const * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z PROC	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>, COMDAT
; _this$ = ecx

; 170  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 225  :     constexpr tuple(_Tag) noexcept /* strengthened */ {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Emplace_back@Ubase_info@class_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEX$$QAUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@Ubase_info@class_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEX$$QAUbase_info@class_rep@detail@luabind@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back<luabind::detail::class_rep::base_info>, COMDAT
; _this$ = ecx

; 1661 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1662 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@Ubase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::forward<luabind::detail::class_rep::base_info>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::class_rep::base_info>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@Ubase_info@class_rep@detail@luabind@@U1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@$$QAU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info>
	add	esp, 12					; 0000000cH

; 1663 :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1664 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@Ubase_info@class_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEX$$QAUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back<luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Release, COMDAT
; _this$ = ecx

; 1666 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1668 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1669 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >, COMDAT
; _this$ = ecx

; 1656 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 12					; 0000000cH

; 1658 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >, COMDAT
; _this$ = ecx

; 1651 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Copy_memmove@PAUbase_info@class_rep@detail@luabind@@PAU1234@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUbase_info@class_rep@detail@luabind@@PAU1234@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@00@Z PROC ; std::_Copy_memmove<luabind::detail::class_rep::base_info *,luabind::detail::class_rep::base_info *>, COMDAT

; 4112 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 4113 :     auto _FirstPtr              = _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep::base_info *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 4114 :     auto _LastPtr               = _To_address(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep::base_info *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 4115 :     auto _DestPtr               = _To_address(_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_To_address@PAUbase_info@class_rep@detail@luabind@@@std@@YA?A_PABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_To_address<luabind::detail::class_rep::base_info *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 4116 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 4117 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	ecx, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 4118 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	edx, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 4119 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 4120 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4121 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4122 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 4123 :     } else {
; 4124 :         return _Dest + (_LastPtr - _FirstPtr);
; 4125 :     }
; 4126 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAUbase_info@class_rep@detail@luabind@@PAU1234@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@00@Z ENDP ; std::_Copy_memmove<luabind::detail::class_rep::base_info *,luabind::detail::class_rep::base_info *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$move@AAUbase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUbase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z PROC ; std::move<luabind::detail::class_rep::base_info &>, COMDAT

; 1422 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1423 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1424 : }

	pop	ebp
	ret	0
??$move@AAUbase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ENDP ; std::move<luabind::detail::class_rep::base_info &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z PROC ; std::_Get_unwrapped<luabind::detail::class_rep::base_info * const &>, COMDAT

; 1347 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

	push	ebp
	mov	ebp, esp

; 1348 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1349 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1350 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1351 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1352 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1353 :     } else {
; 1354 :         return static_cast<_Iter&&>(_It);
; 1355 :     }
; 1356 : }

	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::_Get_unwrapped<luabind::detail::class_rep::base_info * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z PROC ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>, COMDAT

; 212  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 213  :     if constexpr (is_pointer_v<_Iter>) {
; 214  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 215  :     } else {
; 216  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 217  :     }
; 218  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@AAU1234@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@AAU1234@@Z PROC ; std::addressof<luabind::detail::class_rep::base_info>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ENDP ; std::addressof<luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>, COMDAT
; _this$ = ecx

; 291  :         : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T1[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z PROC ; std::_Voidify_iter<std::pair<char const * const,int> *>, COMDAT

; 212  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 213  :     if constexpr (is_pointer_v<_Iter>) {
; 214  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 215  :     } else {
; 216  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 217  :     }
; 218  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ENDP ; std::_Voidify_iter<std::pair<char const * const,int> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z PROC ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>, COMDAT
; _this$ = ecx

; 265  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
	mov	ecx, DWORD PTR __This_arg$[ebp]
	push	ecx
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ENDP ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>, COMDAT

; 212  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 213  :     if constexpr (is_pointer_v<_Iter>) {
; 214  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 215  :     } else {
; 216  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 217  :     }
; 218  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$ = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z PROC ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >, COMDAT

; 1740 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1741 :     // move [_First, _Last) to raw _Dest, using _Al
; 1742 :     // note: only called internally from elsewhere in the STL
; 1743 :     using _Ptrval     = typename _Alloc::value_type*;
; 1744 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep::base_info * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1745 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@ABQAUbase_info@class_rep@detail@luabind@@@std@@YA?A_TABQAUbase_info@class_rep@detail@luabind@@@Z ; std::_Get_unwrapped<luabind::detail::class_rep::base_info * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1746 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1747 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1748 : #if _HAS_CXX20
; 1749 :         if (!_STD is_constant_evaluated())
; 1750 : #endif // _HAS_CXX20
; 1751 :         {
; 1752 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::class_rep::base_info>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAUbase_info@class_rep@detail@luabind@@PAU1234@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@00@Z ; std::_Copy_memmove<luabind::detail::class_rep::base_info *,luabind::detail::class_rep::base_info *>
	add	esp, 12					; 0000000cH

; 1753 :             return _Dest + (_ULast - _UFirst);

	mov	edx, DWORD PTR __ULast$[ebp]
	sub	edx, DWORD PTR __UFirst$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	jmp	SHORT $LN1@Uninitiali

; 1754 :         }
; 1755 :     }
; 1756 : 
; 1757 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1758 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 8
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	cmp	ecx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1759 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$move@AAUbase_info@class_rep@detail@luabind@@@std@@YA$$QAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::move<luabind::detail::class_rep::base_info &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@Ubase_info@class_rep@detail@luabind@@@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEX$$QAUbase_info@class_rep@detail@luabind@@@Z ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back<luabind::detail::class_rep::base_info>

; 1760 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1761 : 
; 1762 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1763 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >::~_Uninitialized_backout_al<std::allocator<luabind::detail::class_rep::base_info> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ENDP ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$construct@Ubase_info@class_rep@detail@luabind@@ABU1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@ABU3456@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Ubase_info@class_rep@detail@luabind@@ABU1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@ABU3456@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>, COMDAT

; 675  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 676  : #if _HAS_CXX20
; 677  :         if (_STD is_constant_evaluated()) {
; 678  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 679  :         } else
; 680  : #endif // _HAS_CXX20
; 681  :         {
; 682  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 683  :         }
; 684  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@Ubase_info@class_rep@detail@luabind@@ABU1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@ABU3456@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z PROC ; std::_Unfancy<luabind::detail::class_rep::base_info>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 266  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 267  : }

	pop	ebp
	ret	0
??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z ENDP ; std::_Unfancy<luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Construct_in_place@Ubase_info@class_rep@detail@luabind@@ABU1234@@std@@YAXAAUbase_info@class_rep@detail@luabind@@ABU1234@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@Ubase_info@class_rep@detail@luabind@@ABU1234@@std@@YAXAAUbase_info@class_rep@detail@luabind@@ABU1234@@Z PROC ; std::_Construct_in_place<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>, COMDAT

; 231  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 232  : #if _HAS_CXX20
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 235  :     } else
; 236  : #endif // _HAS_CXX20
; 237  :     {
; 238  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@AAU1234@@Z ; std::addressof<luabind::detail::class_rep::base_info>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAUbase_info@class_rep@detail@luabind@@@std@@YAPAXPAUbase_info@class_rep@detail@luabind@@@Z ; std::_Voidify_iter<luabind::detail::class_rep::base_info *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 239  :     }
; 240  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@Ubase_info@class_rep@detail@luabind@@ABU1234@@std@@YAXAAUbase_info@class_rep@detail@luabind@@ABU1234@@Z ENDP ; std::_Construct_in_place<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 378  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 379  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 380  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
	add	esp, 8

; 381  :         _Freenode0(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 382  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 723  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 724  :     // assign _New_val to _Val, return previous _Val
; 725  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 726  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 727  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 728  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 231  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 232  : #if _HAS_CXX20
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 235  :     } else
; 236  : #endif // _HAS_CXX20
; 237  :     {
; 238  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 239  :     }
; 240  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT

; 675  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 676  : #if _HAS_CXX20
; 677  :         if (_STD is_constant_evaluated()) {
; 678  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 679  :         } else
; 680  : #endif // _HAS_CXX20
; 681  :         {
; 682  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAU?$pair@QBDH@std@@@std@@YAPAXPAU?$pair@QBDH@0@@Z ; std::_Voidify_iter<std::pair<char const * const,int> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	push	ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _<_Args_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	push	ecx
	mov	esi, esp
	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z	; std::tuple<char const * const &>::tuple<char const * const &>
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>

; 683  :         }
; 684  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::forward<std::tuple<char const * const &> >, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::forward<std::tuple<char const * const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z PROC	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>, COMDAT
; _this$ = ecx

; 323  :         : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __This_arg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z PROC ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>, COMDAT

; 1528 :     noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1529 :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 1530 :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Left$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??Rltstr@detail@luabind@@QBE_NPBD0@Z	; luabind::detail::ltstr::operator()
	mov	BYTE PTR __Result$[ebp], al

; 1531 :     if (_Result) {

	movzx	ecx, BYTE PTR __Result$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1532 :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	edx, DWORD PTR __Left$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??Rltstr@detail@luabind@@QBE_NPBD0@Z	; luabind::detail::ltstr::operator()
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1532					; 000005fcH
	push	OFFSET ??_C@_0GD@JCANJH@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	push	0
	push	1532					; 000005fcH
	push	OFFSET ??_C@_1MG@LDPLICNP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
	xor	eax, eax
	jne	SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1533 :     }
; 1534 : 
; 1535 :     return _Result;

	mov	al, BYTE PTR __Result$[ebp]

; 1536 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ENDP ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\map
;	COMDAT ??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z PROC ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>, COMDAT

; 67   :     static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp

; 68   :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 69   :     }

	pop	ebp
	ret	0
??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ENDP ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 661  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 662  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 663  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 664  :         if (_STD is_constant_evaluated()) {
; 665  :             _Al.deallocate(_Ptr, _Count);
; 666  :         } else
; 667  : #endif // _HAS_CXX20
; 668  :         {
; 669  :             (void) _Al;
; 670  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 671  :         }
; 672  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]

; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 67   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 24
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>, COMDAT

; 723  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 724  :     // assign _New_val to _Val, return previous _Val
; 725  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 726  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 727  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 728  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >, COMDAT

; 687  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp

; 688  : #if _HAS_CXX20
; 689  :         _STD destroy_at(_Ptr);
; 690  : #else // _HAS_CXX20
; 691  :         _Ptr->~_Uty();
; 692  : #endif // _HAS_CXX20
; 693  :     }

	pop	ebp
	ret	0
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z PROC ; std::addressof<std::pair<char const * const,int> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ENDP ; std::addressof<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 296  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 297  :     if constexpr (is_array_v<_Ty>) {
; 298  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 299  :     } else {
; 300  :         _Obj.~_Ty();
; 301  :     }
; 302  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 129  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 130  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 131  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 132  :     if (_Block_size <= _Bytes) {

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 133  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 134  :     }
; 135  : 
; 136  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 137  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET $SG108604
	push	OFFSET $SG108605
	push	0
	push	137					; 00000089H
	push	OFFSET $SG108606
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	137					; 00000089H
	push	OFFSET $SG108607
	push	OFFSET $SG108608
	push	OFFSET $SG108609
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 138  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 139  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 140  : 
; 141  : #ifdef _DEBUG
; 142  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 143  : #endif // _DEBUG
; 144  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 145  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 212  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 213  :     if constexpr (is_pointer_v<_Iter>) {
; 214  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 215  :     } else {
; 216  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 217  :     }
; 218  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>, COMDAT

; 231  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 232  : #if _HAS_CXX20
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 235  :     } else
; 236  : #endif // _HAS_CXX20
; 237  :     {
; 238  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<char const * const,int>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 239  :     }
; 240  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT

; 212  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 213  :     if constexpr (is_pointer_v<_Iter>) {
; 214  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 215  :     } else {
; 216  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 217  :     }
; 218  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z PROC ; std::forward<luabind::detail::ltstr const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ENDP ; std::forward<luabind::detail::ltstr const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 231  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 232  : #if _HAS_CXX20
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 235  :     } else
; 236  : #endif // _HAS_CXX20
; 237  :     {
; 238  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 239  :     }
; 240  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_reallocate<luabind::detail::class_rep::base_info const &>, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 853  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 854  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 855  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 856  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 857  :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 858  : 
; 859  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 860  : 
; 861  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 862  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 863  : 
; 864  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 865  :             _Xlength();

	call	?_Xlength@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@CAXXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Xlength
$LN2@Emplace_re:

; 866  :         }
; 867  : 
; 868  :         const size_type _Newsize     = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 869  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEII@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 870  : 
; 871  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 872  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 873  :         pointer _Constructed_first      = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 874  : 
; 875  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 876  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Unfancy@Ubase_info@class_rep@detail@luabind@@@std@@YAPAUbase_info@class_rep@detail@luabind@@PAU1234@@Z ; std::_Unfancy<luabind::detail::class_rep::base_info>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$construct@Ubase_info@class_rep@detail@luabind@@ABU1234@@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAXAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@QAUbase_info@class_rep@detail@luabind@@ABU3456@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::construct<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
	add	esp, 12					; 0000000cH

; 877  :         _Constructed_first = _Newvec + _Whereoff;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 878  : 
; 879  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Whereptr$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@Emplace_re

; 880  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 881  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 16					; 00000010H

; 882  :             } else {
; 883  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 884  :             }
; 885  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 886  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 16					; 00000010H

; 887  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 888  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAUbase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAPAUbase_info@class_rep@detail@luabind@@QAU1234@0PAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Uninitialized_move<luabind::detail::class_rep::base_info *,std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$0:

; 889  :         }
; 890  :         _CATCH_ALL
; 891  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 12					; 0000000cH

; 892  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::deallocate

; 893  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 894  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z$1:

; 895  : 
; 896  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXQAUbase_info@class_rep@detail@luabind@@II@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Change_array

; 897  :         return _Newvec + _Whereoff;

	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
$LN6@Emplace_re:

; 898  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_reallocate<luabind::detail::class_rep::base_info const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back_with_unused_capacity<luabind::detail::class_rep::base_info const &>, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 831  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 832  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 833  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 834  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 835  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 836  :             _ASAN_VECTOR_MODIFY(1);
; 837  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Construct_in_place@Ubase_info@class_rep@detail@luabind@@ABU1234@@std@@YAXAAUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::_Construct_in_place<luabind::detail::class_rep::base_info,luabind::detail::class_rep::base_info const &>
	add	esp, 8

; 838  :         } else {
; 839  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 840  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 841  :             _ASAN_VECTOR_RELEASE_GUARD;
; 842  :         }
; 843  : 
; 844  :         _Orphan_range(_Mylast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range

; 845  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 846  :         ++_Mylast;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 847  : 
; 848  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 849  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back_with_unused_capacity<luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 369  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 370  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 371  :         _Destroy_in_place(_Ptr->_Left);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 372  :         _Destroy_in_place(_Ptr->_Parent);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 373  :         _Destroy_in_place(_Ptr->_Right);

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 8
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 374  :         allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 375  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	eax, DWORD PTR __Rootnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN4@Erase_tree

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	edx, DWORD PTR __Rootnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	lea	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 746  :         }

	jmp	SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 747  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 191  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
_<_Vals_1>$ = 20					; size = 4
_<_Vals_2>$ = 24					; size = 4
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	mov	ecx, DWORD PTR _<_Vals_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _<_Vals_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
	add	esp, 20					; 00000014H

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * &>
	add	esp, 8

; 809  :         this->_Ptr->_Color = _Red;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 810  :         this->_Ptr->_Isnil = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+13], 0

; 811  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 816  :     ~_Tree_temp_node() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 817  :         if (this->_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tree_temp_

; 818  :             _Destroy_in_place(this->_Ptr->_Left);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 819  :             _Destroy_in_place(this->_Ptr->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 820  :             _Destroy_in_place(this->_Ptr->_Right);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *>
	add	esp, 4

; 821  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
	add	esp, 8
$LN1@Tree_temp_:

; 822  :         }
; 823  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 784  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate

; 785  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 1013 :     _CONSTEXPR20 ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1014 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1015 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
$LN3@Alloc_cons:

; 1016 :         }
; 1017 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1008 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1009 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1010 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1011 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1004 :     _NODISCARD _CONSTEXPR20 pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1005 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::nullptr_t>
	add	esp, 8

; 1006 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 1002 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 1060 : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 1061 :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1062 : }

	pop	ebp
	ret	0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z PROC		; std::tuple<char const * const &>::tuple<char const * const &>, COMDAT
; _this$ = ecx

; 367  :     tuple(tuple&&)      = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@ABQBD@std@@QAE@$$QAV01@@Z ENDP		; std::tuple<char const * const &>::tuple<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z PROC ; std::forward_as_tuple<char const * const &>, COMDAT

; 1060 : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 1061 :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1062 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ENDP ; std::forward_as_tuple<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABQBD@std@@YAABQBDABQBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQBD@std@@YAABQBDABQBD@Z PROC		; std::forward<char const * const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABQBD@std@@YAABQBDABQBD@Z ENDP		; std::forward<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>, COMDAT
; _this$ = ecx

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 191  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>, COMDAT
; _this$ = ecx

; 1590 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Bound$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	edx, DWORD PTR __Bound$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
	mov	al, BYTE PTR tv78[ebp]

; 1592 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z
_TEXT	SEGMENT
__Trynode$ = -32					; size = 4
__Result$ = -24						; size = 12
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1596 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Result$[ebp], edx
	mov	DWORD PTR __Result$[ebp+4], 0
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Result$[ebp+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;

	mov	edx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx
$LN2@Find_lower:

; 1599 :         while (!_Trynode->_Isnil) {

	mov	eax, DWORD PTR __Trynode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Find_lower

; 1600 :             _Result._Location._Parent = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp], edx

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Trynode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Kfn@QBDH@?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABUltstr@detail@luabind@@ABQBDABQBD$0A@@std@@YA_NABUltstr@detail@luabind@@ABQBD1@Z ; std::_Debug_lt_pred<luabind::detail::ltstr const &,char const * const &,char const * const &,0>
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;

	mov	DWORD PTR __Result$[ebp+4], 0

; 1603 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 1604 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;

	mov	DWORD PTR __Result$[ebp+4], 1

; 1606 :                 _Result._Bound           = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp+8], edx

; 1607 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], ecx
$LN5@Find_lower:

; 1608 :             }
; 1609 :         }

	jmp	SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1610 : 
; 1611 :         return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Result$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1612 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Find_lower
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@Find_lower:
	DD	1
	DD	$LN8@Find_lower
$LN8@Find_lower:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN7@Find_lower
$LN7@Find_lower:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 977  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 978  :     // deallocate a plain pointer using an allocator
; 979  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 980  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 981  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 982  :     } else {
; 983  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 984  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 985  :     }
; 986  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@PAX@std@@YA$$QAPAXAAPAX@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAX@std@@YA$$QAPAXAAPAX@Z PROC		; std::forward<void *>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@PAX@std@@YA$$QAPAXAAPAX@Z ENDP		; std::forward<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z PROC ; std::move<lua_State * &>, COMDAT

; 1422 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1423 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1424 : }

	pop	ebp
	ret	0
??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ENDP ; std::move<lua_State * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1422 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1423 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1424 : }

	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 223  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 224  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 225  : #if defined(_M_IX86) || defined(_M_X64)
; 226  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 227  :     if (!_STD is_constant_evaluated())
; 228  : #endif // _HAS_CXX20
; 229  :     {
; 230  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 231  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 232  :         }
; 233  :     }
; 234  : #endif // defined(_M_IX86) || defined(_M_X64)
; 235  : 
; 236  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 237  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 238  :     }
; 239  : 
; 240  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 241  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 231  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 232  : #if _HAS_CXX20
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 235  :     } else
; 236  : #endif // _HAS_CXX20
; 237  :     {
; 238  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 239  :     }
; 240  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 266  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 267  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4802 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4803 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4804 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4805 :         auto& _My_data            = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4806 :         const size_type _Old_size = _My_data._Mysize;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __Old_size$[ebp], edx

; 4807 :         if (max_size() - _Old_size < _Size_increase) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 4808 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4809 :         }
; 4810 : 
; 4811 :         const size_type _New_size     = _Old_size + _Size_increase;

	mov	eax, DWORD PTR __Old_size$[ebp]
	add	eax, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], eax

; 4812 :         const size_type _Old_capacity = _My_data._Myres;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Old_capacity$[ebp], edx

; 4813 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4814 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4815 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	ecx, DWORD PTR __New_capacity$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4816 : 
; 4817 : #if _HAS_CXX20
; 4818 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4819 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4820 :         }
; 4821 : #endif // _HAS_CXX20
; 4822 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4823 :         _ASAN_STRING_REMOVE(*this);
; 4824 :         _My_data._Mysize      = _New_size;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [edx+20], eax

; 4825 :         _My_data._Myres       = _New_capacity;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 4826 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

	mov	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 4827 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 4828 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Old_ptr$1[ebp], edx

; 4829 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4830 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4831 :             _My_data._Bx._Ptr = _New_ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4832 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4833 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4834 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4835 :         }
; 4836 : 
; 4837 :         _ASAN_STRING_CREATE(*this);
; 4838 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4839 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN8@Reallocate:
	DD	1
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN6@Reallocate
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 3380 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3377 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3378 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3379 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3380 :             },

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 342  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 343  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
; 344  :         const auto _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	add	edx, 8
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<char const * const,int>,void *> *,std::_Tree_node<std::pair<char const * const,int>,void *> * const &>
	add	esp, 8

; 348  :         _Pnode->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 349  :         _Pnode->_Isnil = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+13], 1

; 350  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 351  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Buyheadnod:
	DD	1
	DD	$LN4@Buyheadnod
$LN4@Buyheadnod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Buyheadnod
$LN3@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1339 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1340 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1341 :             _Delete_plain_internal(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1342 :         }
; 1343 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1325 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1326 :         // create a new _Container_proxy pointing at _Mycont
; 1327 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1328 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1329 :         _Mycont._Myproxy = _Ptr;

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1330 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 244  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 245  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 246  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 247  :     if (_STD is_constant_evaluated()) {
; 248  :         ::operator delete(_Ptr);
; 249  :     } else
; 250  : #endif // _HAS_CXX20
; 251  :     {
; 252  : #if defined(_M_IX86) || defined(_M_X64)
; 253  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 254  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 255  :         }
; 256  : #endif // defined(_M_IX86) || defined(_M_X64)
; 257  :         ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 258  :     }
; 259  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 266  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 267  : }

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 296  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 297  :     if constexpr (is_array_v<_Ty>) {
; 298  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 299  :     } else {
; 300  :         _Obj.~_Ty();
; 301  :     }
; 302  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z PROC ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >, COMDAT

; 944  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp

; 945  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 946  :     using _Ty = typename _Alloc::value_type;
; 947  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 948  :         for (; _First != _Last; ++_First) {
; 949  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 950  :         }
; 951  :     }
; 952  : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>, COMDAT
; _this$ = ecx

; 1375 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 1380 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABUltstr@detail@luabind@@@std@@YAABUltstr@detail@luabind@@ABU123@@Z ; std::forward<luabind::detail::ltstr const &>
	add	esp, 4
	mov	ecx, DWORD PTR _<_Val2_0>$[ebp]
	push	ecx
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1><>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@$$CBU?$pair@QBDH@std@@@std@@YAPBU?$pair@QBDH@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@QBDH@std@@@std@@YAPBU?$pair@QBDH@0@ABU10@@Z PROC ; std::addressof<std::pair<char const * const,int> const >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@$$CBU?$pair@QBDH@std@@@std@@YAPBU?$pair@QBDH@0@ABU10@@Z ENDP ; std::addressof<std::pair<char const * const,int> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
tv83 = -79						; size = 1
$T2 = -78						; size = 1
$T3 = -77						; size = 1
__New_ptr$ = -72					; size = 4
__New_capacity$ = -64					; size = 4
__Stay_small$ = -57					; size = 1
__Proxy$ = -52						; size = 8
_$S17$ = -33						; size = 1
__Alproxy$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2672 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2673 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2674 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2675 :         } else {
; 2676 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2677 :         }
; 2678 : 
; 2679 :         if (_Count > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __Count$[ebp], eax
	jbe	SHORT $LN2@Construct

; 2680 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Construct:

; 2681 :         }
; 2682 : 
; 2683 :         auto& _My_data  = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2684 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2685 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _$S17$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	edx, DWORD PTR _$S17$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], edx

; 2686 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2687 : 
; 2688 : #if _HAS_CXX20
; 2689 :         if (_STD is_constant_evaluated()) {
; 2690 :             _My_data._Myres = _BUF_SIZE; // TRANSITION: constexpr SSO
; 2691 :         }
; 2692 : 
; 2693 :         const bool _Stay_small = _Count < _BUF_SIZE && !_STD is_constant_evaluated();
; 2694 : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 2695 :         const bool _Stay_small = _Count < _BUF_SIZE;

	cmp	DWORD PTR __Count$[ebp], 16		; 00000010H
	jae	SHORT $LN5@Construct
	mov	BYTE PTR tv83[ebp], 1
	jmp	SHORT $LN6@Construct
$LN5@Construct:
	mov	BYTE PTR tv83[ebp], 0
$LN6@Construct:
	mov	dl, BYTE PTR tv83[ebp]
	mov	BYTE PTR __Stay_small$[ebp], dl

; 2696 : #endif // _HAS_CXX20
; 2697 : 
; 2698 :         if (_Stay_small) {

	movzx	eax, BYTE PTR __Stay_small$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct

; 2699 : #if _HAS_CXX20
; 2700 :             // TRANSITION: This is currently unused until SSO support is merged
; 2701 :             if (_STD is_constant_evaluated()) {
; 2702 :                 _Construct_in_place(_My_data._Bx);
; 2703 :             }
; 2704 : #endif // _HAS_CXX20
; 2705 : 
; 2706 :             _My_data._Mysize = _Count;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2707 :             _My_data._Myres  = _BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2708 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2709 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2710 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2711 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2712 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Arg$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 2713 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 2714 :             } else { // _Strat == _Construct_strategy::_From_string
; 2715 : #ifdef _INSERT_STRING_ANNOTATION
; 2716 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2717 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2718 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2719 : #endif // !_INSERT_STRING_ANNOTATION
; 2720 :             }
; 2721 : 
; 2722 :             _ASAN_STRING_CREATE(*this);
; 2723 :             _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2724 :             return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	jmp	$LN4@Construct
$LN3@Construct:

; 2725 :         }
; 2726 : 
; 2727 :         _My_data._Myres               = _BUF_SIZE - 1;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+24], 15			; 0000000fH

; 2728 :         const size_type _New_capacity = _Calculate_growth(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 2729 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	ecx, DWORD PTR __New_capacity$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 2730 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8

; 2731 : 
; 2732 : #if _HAS_CXX20
; 2733 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2734 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2735 :         }
; 2736 : #endif // _HAS_CXX20
; 2737 : 
; 2738 :         _My_data._Mysize = _Count;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2739 :         _My_data._Myres  = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2740 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2741 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2742 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2743 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2744 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2745 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 2746 :         } else { // _Strat == _Construct_strategy::_From_string
; 2747 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2748 :         }
; 2749 : 
; 2750 :         _ASAN_STRING_CREATE(*this);
; 2751 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2752 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
$LN4@Construct:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Construct
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@Construct:
	DD	3
	DD	$LN12@Construct
$LN12@Construct:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN8@Construct
	DD	-52					; ffffffccH
	DD	8
	DD	$LN9@Construct
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN10@Construct
$LN10@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN9@Construct:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN8@Construct:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	55					; 00000037H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 965  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

	push	ebp
	mov	ebp, esp

; 966  :     // convert size_t to _Size_type, avoiding truncation
; 967  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 968  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 969  :             _Xlength_error("size_t too long for _Size_type");
; 970  :         }
; 971  :     }
; 972  : 
; 973  :     return static_cast<_Size_type>(_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 974  : }

	pop	ebp
	ret	0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1375 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1><>, COMDAT
; _this$ = ecx

; 1375 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAE@XZ ; std::allocator<luabind::detail::class_rep::base_info>::allocator<luabind::detail::class_rep::base_info>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::class_rep::base_info>, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z
_TEXT	SEGMENT
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_one_at_back<luabind::detail::class_rep::base_info const &>, COMDAT
; _this$ = ecx

; 816  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 817  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 818  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 819  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 820  : 
; 821  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@Emplace_on

; 822  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_back_with_unused_capacity<luabind::detail::class_rep::base_info const &>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 823  :         }
; 824  : 
; 825  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEPAUbase_info@class_rep@detail@luabind@@QAU2345@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_reallocate<luabind::detail::class_rep::base_info const &>
$LN1@Emplace_on:

; 826  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_one_at_back<luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z PROC ; std::forward<luabind::detail::class_rep::base_info const &>, COMDAT

; 1411 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1412 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1413 : }

	pop	ebp
	ret	0
??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ENDP ; std::forward<luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??$emplace_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE?A_TABUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE?A_TABUbase_info@class_rep@detail@luabind@@@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::emplace_back<luabind::detail::class_rep::base_info const &>, COMDAT
; _this$ = ecx

; 902  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 903  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 904  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABUbase_info@class_rep@detail@luabind@@@std@@YAABUbase_info@class_rep@detail@luabind@@ABU1234@@Z ; std::forward<luabind::detail::class_rep::base_info const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAUbase_info@class_rep@detail@luabind@@ABU2345@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Emplace_one_at_back<luabind::detail::class_rep::base_info const &>
	mov	DWORD PTR __Result$[ebp], eax

; 905  : #if _HAS_CXX17
; 906  :         return _Result;
; 907  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 908  :         (void) _Result;
; 909  : #endif // _HAS_CXX17
; 910  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE?A_TABUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::emplace_back<luabind::detail::class_rep::base_info const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > const >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 253  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 254  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >, COMDAT
; _this$ = ecx

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 751  :         this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 753  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 8

; 754  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??$_Find@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z
_TEXT	SEGMENT
__Loc$ = -20						; size = 12
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Find@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find<char const *>, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>

; 1354 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Find

; 1355 :             return _Loc._Bound;

	mov	eax, DWORD PTR __Loc$[ebp+8]
	jmp	SHORT $LN1@Find
$LN2@Find:

; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	eax, DWORD PTR [eax+4]
$LN1@Find:

; 1359 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Find
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Find:
	DD	1
	DD	$LN5@Find
$LN5@Find:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@Find
$LN4@Find:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Find@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\map
;	COMDAT ??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z
_TEXT	SEGMENT
tv164 = -64						; size = 4
$T1 = -60						; size = 4
$T2 = -53						; size = 1
$T3 = -52						; size = 4
$T4 = -45						; size = 1
$T5 = -44						; size = 8
$T6 = -33						; size = 1
__Inserted$ = -32					; size = 4
__Scary$ = -28						; size = 4
__Loc$ = -20						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>, COMDAT
; _this$ = ecx

; 173  :     pair<_Nodeptr, bool> _Try_emplace(_Keyty&& _Keyval, _Mappedty&&... _Mapval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 174  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find_lower_bound<char const *>

; 175  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Lower_bound_duplicate<char const *>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Try_emplac

; 176  :             return {_Loc._Bound, false};

	mov	BYTE PTR $T6[ebp], 0
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> * const &,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@Try_emplac
$LN2@Try_emplac:

; 177  :         }
; 178  : 
; 179  :         _Mybase::_Check_grow_by_1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1

; 180  : 
; 181  :         const auto _Scary    = _Mybase::_Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 182  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	call	??$forward@ABQBD@std@@YAABQBDABQBD@Z	; std::forward<char const * const &>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
	add	esp, 8
	push	eax
	push	OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > ><std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR tv164[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::_Release
	mov	DWORD PTR __Inserted$[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 183  :             _STD forward_as_tuple(_STD forward<_Keyty>(_Keyval)),
; 184  :             _STD forward_as_tuple(_STD forward<_Mappedty>(_Mapval)...))
; 185  :                                    ._Release();
; 186  : 
; 187  :         // nothrow hereafter
; 188  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, DWORD PTR __Inserted$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
	mov	DWORD PTR $T1[ebp], eax
	mov	BYTE PTR $T2[ebp], 1
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool>::pair<std::_Tree_node<std::pair<char const * const,int>,void *> *,bool><std::_Tree_node<std::pair<char const * const,int>,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Try_emplac:

; 189  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Try_emplac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Try_emplac:
	DD	1
	DD	$LN6@Try_emplac
$LN6@Try_emplac:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@Try_emplac
$LN5@Try_emplac:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1061 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1062 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1063 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1064 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1065 :         _New_proxy->_Mycont = this;

	mov	edx, DWORD PTR __New_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1066 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 989  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp

; 990  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 991  :     using _Ty = typename _Alloc::value_type;
; 992  :     _Ptr->~_Ty();
; 993  :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 994  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 723  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 724  :     // assign _New_val to _Val, return previous _Val
; 725  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 726  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 727  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 728  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 835  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 837  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 838  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PBU?$pair@QBDH@std@@@std@@SAPBU?$pair@QBDH@2@ABU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBU?$pair@QBDH@std@@@std@@SAPBU?$pair@QBDH@2@ABU32@@Z PROC ; std::pointer_traits<std::pair<char const * const,int> const *>::pointer_to, COMDAT

; 274  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 275  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU?$pair@QBDH@std@@@std@@YAPBU?$pair@QBDH@0@ABU10@@Z ; std::addressof<std::pair<char const * const,int> const >
	add	esp, 4

; 276  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBU?$pair@QBDH@std@@@std@@SAPBU?$pair@QBDH@2@ABU32@@Z ENDP ; std::pointer_traits<std::pair<char const * const,int> const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Compat, COMDAT
; _this$ = ecx

; 181  :     _CONSTEXPR20 void _Compat(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 182  :         // test for compatible iterator pair
; 183  : #if _ITERATOR_DEBUG_LEVEL == 0
; 184  :         (void) _Right;
; 185  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 186  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	186					; 000000baH
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	186					; 000000baH
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 187  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 188  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator!=, COMDAT
; _this$ = ecx

; 159  :     _NODISCARD bool operator!=(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 160  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 161  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator==, COMDAT
; _this$ = ecx

; 148  :     _NODISCARD _CONSTEXPR20 bool operator==(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 149  :         _Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Compat

; 150  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 151  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator++, COMDAT
; _this$ = ecx

; 67   :     _CONSTEXPR20 _Vector_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 68   : #if _ITERATOR_DEBUG_LEVEL != 0
; 69   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 70   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 71   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 72   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 73   : 
; 74   :         ++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 75   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 76   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator->, COMDAT
; _this$ = ecx

; 56   :     _NODISCARD _CONSTEXPR20 pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 57   : #if _ITERATOR_DEBUG_LEVEL != 0
; 58   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 59   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	59					; 0000003bH
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	59					; 0000003bH
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 60   :         _STL_VERIFY(

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	61					; 0000003dH
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	61					; 0000003dH
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 61   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 62   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 63   : 
; 64   :         return _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 65   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 42   :         this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 43   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator!=, COMDAT
; _this$ = ecx

; 237  :     _NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 238  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 239  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator==, COMDAT
; _this$ = ecx

; 228  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN12@operator
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN13@operator
$LN12@operator:
	mov	DWORD PTR tv136[ebp], 0
$LN13@operator:
	mov	al, BYTE PTR tv136[ebp]

; 234  :     }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator++, COMDAT
; _this$ = ecx

; 193  :     _Tree_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 194  : #if _ITERATOR_DEBUG_LEVEL == 2
; 195  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 196  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	196					; 000000c4H
	push	OFFSET ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	196					; 000000c4H
	push	OFFSET ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 197  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 198  : 
; 199  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::operator++

; 200  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 201  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->, COMDAT
; _this$ = ecx

; 189  :     _NODISCARD pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 190  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBU?$pair@QBDH@std@@@std@@SAPBU?$pair@QBDH@2@ABU32@@Z ; std::pointer_traits<std::pair<char const * const,int> const *>::pointer_to
	add	esp, 4

; 191  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator*, COMDAT
; _this$ = ecx

; 179  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_0GA@INMJJLGF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_1MA@LBEPAJEF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 187  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN4@operator
$LN2@operator:

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$1[ebp], eax
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 55   :             }

	jmp	SHORT $LN2@operator
$LN3@operator:

; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx+8], eax

; 58   :         } else {

	jmp	SHORT $LN5@operator
$LN4@operator:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN5@operator:

; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 63   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 39   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 40   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$?0AAPADPAX$0A@@?$pair@PAXPAX@std@@QAE@AAPAD$$QAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPADPAX$0A@@?$pair@PAXPAX@std@@QAE@AAPAD$$QAPAX@Z PROC ; std::pair<void *,void *>::pair<void *,void *><char * &,void *,0>, COMDAT
; _this$ = ecx

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@PAX@std@@YA$$QAPAXAAPAX@Z	; std::forward<void *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 191  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPADPAX$0A@@?$pair@PAXPAX@std@@QAE@AAPAD$$QAPAX@Z ENDP ; std::pair<void *,void *>::pair<void *,void *><char * &,void *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init_if@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init_if@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init_if'', COMDAT

; 106  : const in_place_init_if_t in_place_init_if ((in_place_init_if_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B
	call	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init_if@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init_if''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t, COMDAT
; _this$ = ecx

; 104  :   explicit in_place_init_if_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init'', COMDAT

; 98   : const in_place_init_t in_place_init ((in_place_init_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B
	call	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_t::in_place_init_t, COMDAT
; _this$ = ecx

; 96   :   explicit in_place_init_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_t::in_place_init_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv149 = -52						; size = 4
$T2 = -48						; size = 12
$T3 = -33						; size = 1
_i$4 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_crep$ = 12						; size = 4
?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z PROC ; luabind::detail::finalize

; 345  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 346  : 	if (crep->get_class_type() != class_rep::lua_class) return;

	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ ; luabind::detail::class_rep::get_class_type
	cmp	eax, 1
	je	SHORT $LN5@finalize
	jmp	$LN1@finalize
$LN5@finalize:

; 347  : 
; 348  : //	lua_pushvalue(L, -1); // copy the object ref
; 349  : 	crep->get_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 350  :     lua_pushliteral(L, "__finalize");

	push	10					; 0000000aH
	push	OFFSET $SG102257
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 351  : 	lua_gettable(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettable
	add	esp, 8

; 352  : 	lua_remove(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_remove
	add	esp, 8

; 353  : 
; 354  : 	if (lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@finalize

; 355  : 	{
; 356  : 		lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 357  : 	}

	jmp	SHORT $LN7@finalize
$LN6@finalize:

; 358  : 	else
; 359  : 	{
; 360  : 		lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 361  : 		lua_call(L, 1, 0);

	push	0
	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_call
	add	esp, 12					; 0000000cH
$LN7@finalize:

; 362  : 	}
; 363  : 
; 364  : 	for (std::vector<class_rep::base_info>::const_iterator 
; 365  : 			i = crep->bases().begin(); i != crep->bases().end(); ++i)

	lea	edx, DWORD PTR _i$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
	mov	ecx, eax
	call	?begin@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	jmp	SHORT $LN4@finalize
$LN2@finalize:
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator++
$LN4@finalize:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
	mov	ecx, eax
	call	?end@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::end
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	push	ecx
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T3[ebp]
	test	edx, edx
	je	SHORT $LN3@finalize

; 366  : 	{
; 367  : 		if (i->base) finalize(L, i->base);

	lea	ecx, DWORD PTR _i$4[ebp]
	call	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator->
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN8@finalize
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QBEPBUbase_info@class_rep@detail@luabind@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::operator->
	mov	eax, DWORD PTR [eax+4]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z ; luabind::detail::finalize
	add	esp, 8
$LN8@finalize:
	jmp	SHORT $LN2@finalize
$LN3@finalize:

; 368  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ
$LN1@finalize:

; 369  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@finalize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@finalize:
	DD	1
	DD	$LN14@finalize
$LN14@finalize:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN12@finalize
$LN12@finalize:
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z$0:
	lea	ecx, DWORD PTR _i$4[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?finalize@detail@luabind@@YAXPAUlua_State@@PAVclass_rep@12@@Z ENDP ; luabind::detail::finalize
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
_index$ = 12						; size = 4
?is_class_rep@detail@luabind@@YA_NPAUlua_State@@H@Z PROC ; luabind::detail::is_class_rep

; 329  : {

	push	ebp
	mov	ebp, esp

; 330  : 	if (lua_getmetatable(L, index) == 0) return false;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getmetatable
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@is_class_r
	xor	al, al
	jmp	SHORT $LN1@is_class_r
$LN2@is_class_r:

; 331  : 
; 332  : 	lua_pushstring(L, "__luabind_classrep");

	push	OFFSET $SG102154
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 333  : 	lua_gettable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 334  : 	if (lua_toboolean(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@is_class_r

; 335  : 	{
; 336  : 		lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 337  : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@is_class_r
$LN3@is_class_r:

; 338  : 	}
; 339  : 
; 340  : 	lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 341  : 	return false;

	xor	al, al
$LN1@is_class_r:

; 342  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?is_class_rep@detail@luabind@@YA_NPAUlua_State@@H@Z ENDP ; luabind::detail::is_class_rep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::~map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\map
;	COMDAT ??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[], COMDAT
; _this$ = ecx

; 322  :     mapped_type& operator[](const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 323  :         return _Try_emplace(_Keyval).first->_Myval.second;

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Try_emplace@ABQBD$$V@?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@_N@1@ABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
	mov	eax, DWORD PTR [eax]
	add	eax, 20					; 00000014H

; 324  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\map
;	COMDAT ??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 105  :     map() : _Mybase(key_compare()) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ PROC ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ENDP ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1382 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1384 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
__Pnode$3 = -12						; size = 4
__Head$ = -8						; size = 4
_this$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 645  :         ++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 646  :         const auto _Head  = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 647  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR __Head$[ebp]
	jne	SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax

; 650  :             _Head->_Parent   = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 651  :             _Head->_Right    = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 652  :             _Newnode->_Color = _Black; // the root is black

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 653  :             return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	jmp	$LN18@Insert_nod
$LN5@Insert_nod:

; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[ebp+4], 0
	jne	SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN8@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN8@Insert_nod:

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN7@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_nod

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Parent_sibling$2[ebp], eax

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	ecx, DWORD PTR __Parent_sibling$2[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN12@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 676  :                     _Parent_sibling->_Color          = _Black;

	mov	edx, DWORD PTR __Parent_sibling$2[ebp]
	mov	BYTE PTR [edx+12], 1

; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 679  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@Insert_nod

; 681  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 682  :                         _Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
$LN14@Insert_nod:

; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
$LN13@Insert_nod:

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN11@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Parent_sibling$1[ebp], edx

; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@Insert_nod

; 692  :                     _Pnode->_Parent->_Color          = _Black;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 693  :                     _Parent_sibling->_Color          = _Black;

	mov	ecx, DWORD PTR __Parent_sibling$1[ebp]
	mov	BYTE PTR [ecx+12], 1

; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 696  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN17@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$3[ebp], eax

; 699  :                         _Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
$LN17@Insert_nod:

; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
$LN11@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }

	jmp	$LN4@Insert_nod
$LN3@Insert_nod:

; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 1

; 710  :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 711  :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 494  :         } else {

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 500  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 472  :         } else {

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 478  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Min, COMDAT

; 450  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Min

; 452  :             _Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 453  :         }

	jmp	SHORT $LN2@Min
$LN3@Min:

; 454  : 
; 455  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 456  :     }

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1956 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1957 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > const >
	add	esp, 4

; 1958 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1952 :     _Scary_val* _Get_scary() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1953 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >
	add	esp, 4

; 1954 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1948 :     const _Alnode& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1949 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 1950 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1944 :     _Alnode& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1945 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 1946 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1940 :     const key_compare& _Getcomp() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1941 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QBEABUltstr@detail@luabind@@XZ ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Get_first

; 1942 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABUltstr@detail@luabind@@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Proxy$ = -48						; size = 8
_$S9$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
__Scary$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1923 :     void _Alloc_sentinel_and_proxy() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1924 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1925 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S9$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
	lea	eax, DWORD PTR _$S9$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1926 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	ecx, DWORD PTR __Scary$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1927 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	call	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<char const * const,int>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >
	add	esp, 4
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1928 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 1929 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Alloc_sent:
	DD	2
	DD	$LN7@Alloc_sent
$LN7@Alloc_sent:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Alloc_sent
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@Alloc_sent
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	57					; 00000039H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1614 :     void _Check_grow_by_1() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN3@Check_grow

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1617 :         }
; 1618 :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::find, COMDAT
; _this$ = ecx

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find@PBD@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Find<char const *>
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1364 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1194 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1195 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1196 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1197 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::end, COMDAT
; _this$ = ecx

; 1132 :     _NODISCARD iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1133 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1134 :         return iterator(_Scary->_Myhead, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1135 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::begin, COMDAT
; _this$ = ecx

; 1122 :     _NODISCARD iterator begin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1123 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1124 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDH@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1125 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S2$ = -17						; size = 1
__Alproxy$ = -12					; size = 4
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx

; 1077 :     ~_Tree() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1078 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1079 :         _Scary->_Erase_head(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >

; 1080 : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 1081 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S2$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<char const * const,int>,void *> >
	lea	eax, DWORD PTR _$S2$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1082 :         _Delete_plain_internal(_Alproxy, _Scary->_Myproxy);

	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1083 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1084 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Tree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Tree:
	DD	1
	DD	$LN4@Tree
$LN4@Tree:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Tree
$LN3@Tree:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	50					; 00000032H
	DB	0
??1?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::~_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx

; 880  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABUltstr@detail@luabind@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ultstr@detail@luabind@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUltstr@detail@luabind@@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1>::_Compressed_pair<luabind::detail::ltstr,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > >,1>,1><luabind::detail::ltstr const &,std::_Zero_then_variadic_args_t>

; 881  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Alloc_sentinel_and_proxy

; 882  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE@ABUltstr@detail@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size, COMDAT

; 695  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 696  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 178956970				; 0aaaaaaaH

; 697  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate, COMDAT

; 661  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 662  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 663  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 664  :         if (_STD is_constant_evaluated()) {
; 665  :             _Al.deallocate(_Ptr, _Count);
; 666  :         } else
; 667  : #endif // _HAS_CXX20
; 668  :         {
; 669  :             (void) _Al;
; 670  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 671  :         }
; 672  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate, COMDAT
; _this$ = ecx

; 835  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 837  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BI@@std@@YAII@Z	; std::_Get_size_of_n<24>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 838  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 830  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 831  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 832  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 833  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >, COMDAT
; _this$ = ecx

; 821  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >::allocator<std::_Tree_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1382 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1384 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >, COMDAT
; _this$ = ecx

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal, COMDAT
; _this$ = ecx

; 2047 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2048 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QBEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first

; 2049 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal, COMDAT
; _this$ = ecx

; 2043 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2044 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Get_first

; 2045 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Orphan_range@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2028 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2029 :         // orphan iterators within specified (inclusive) range
; 2030 : #if _HAS_CXX20
; 2031 :         if (_STD is_constant_evaluated()) {
; 2032 :             _Orphan_range_unlocked(_First, _Last);
; 2033 :         } else
; 2034 : #endif // _HAS_CXX20
; 2035 :         {
; 2036 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_locked

; 2037 :         }
; 2038 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 2023 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2024 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2025 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_unlocked

; 2026 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z
_TEXT	SEGMENT
__Temp$1 = -20						; size = 4
__Temp$2 = -16						; size = 4
__Pnextptr$3 = -12					; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 2008 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2009 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2010 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Orphan_ran

; 2011 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$3[ebp], edx

; 2012 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$3[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Pnextptr$3[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2013 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Temp$2[ebp], eax

; 2014 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$2[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 2015 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2016 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Temp$1[ebp], eax

; 2017 :                 _Temp->_Myproxy  = nullptr;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [ecx], 0

; 2018 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR __Temp$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
$LN5@Orphan_ran:

; 2019 :             }
; 2020 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN1@Orphan_ran:

; 2021 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEXPAUbase_info@class_rep@detail@luabind@@0@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Xlength@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@CAXXZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Xlength, COMDAT

; 1999 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp

; 2000 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2001 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@CAXXZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -36						; size = 4
__Mylast$ = -32						; size = 4
__Myfirst$ = -28					; size = 4
__My_data$ = -24					; size = 4
__Al$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Tidy, COMDAT
; _this$ = ecx

; 1897 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1898 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1899 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1900 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1901 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1902 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1903 : 
; 1904 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1905 : 
; 1906 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Tidy

; 1907 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 12					; 0000000cH

; 1908 :             _ASAN_VECTOR_REMOVE;
; 1909 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::deallocate

; 1910 : 
; 1911 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 1912 :             _Mylast  = nullptr;

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], 0

; 1913 :             _Myend   = nullptr;

	mov	edx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [edx], 0
$LN3@Tidy:

; 1914 :         }
; 1915 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Change_array@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXQAUbase_info@class_rep@detail@luabind@@II@Z
_TEXT	SEGMENT
__Myend$ = -24						; size = 4
__Mylast$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXQAUbase_info@class_rep@detail@luabind@@II@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Change_array, COMDAT
; _this$ = ecx

; 1875 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1876 :         // orphan all iterators, discard old array, acquire new array
; 1877 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1878 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1879 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1880 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1881 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1882 : 
; 1883 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1884 : 
; 1885 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 1886 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@YAXPAUbase_info@class_rep@detail@luabind@@QAU1234@AAV?$allocator@Ubase_info@class_rep@detail@luabind@@@0@@Z ; std::_Destroy_range<std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 12					; 0000000cH

; 1887 :             _ASAN_VECTOR_REMOVE;
; 1888 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z ; std::allocator<luabind::detail::class_rep::base_info>::deallocate
$LN2@Change_arr:

; 1889 :         }
; 1890 : 
; 1891 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1892 :         _Mylast  = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 1893 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 1894 :         _ASAN_VECTOR_CREATE;
; 1895 :     }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXQAUbase_info@class_rep@detail@luabind@@II@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?_Calculate_growth@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -16					; size = 4
__Max$ = -12						; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEII@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1823 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1824 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1825 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1826 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 1827 : 
; 1828 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 1829 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1830 :         }
; 1831 : 
; 1832 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1833 : 
; 1834 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1835 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1836 :         }
; 1837 : 
; 1838 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1839 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEII@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??A?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEABUbase_info@class_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEABUbase_info@class_rep@detail@luabind@@I@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::operator[], COMDAT
; _this$ = ecx

; 1754 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1755 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1756 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1757 :         _STL_VERIFY(

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1758					; 000006deH
	push	OFFSET ??_C@_0GB@FLOGEF@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1758					; 000006deH
	push	OFFSET ??_C@_1MC@LACENGKK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1758 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1759 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1760 : 
; 1761 :         return _My_data._Myfirst[_Pos];

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [edx+eax*8]

; 1762 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEABUbase_info@class_rep@detail@luabind@@I@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?capacity@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::capacity, COMDAT
; _this$ = ecx

; 1739 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1740 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1741 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3

; 1742 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::max_size, COMDAT
; _this$ = ecx

; 1734 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1735 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@ABEABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@@Z ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1736 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1737 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEIXZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::empty, COMDAT
; _this$ = ecx

; 1724 :     _NODISCARD _CONSTEXPR20 bool empty() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1725 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1726 :         return _My_data._Myfirst == _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv69[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv69[ebp]

; 1727 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?end@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::end, COMDAT
; _this$ = ecx

; 1671 :     _NODISCARD _CONSTEXPR20 const_iterator end() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1672 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1673 :         return const_iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1674 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?begin@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::begin, COMDAT
; _this$ = ecx

; 1661 :     _NODISCARD _CONSTEXPR20 const_iterator begin() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1662 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1663 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@std@@QAE@PAUbase_info@class_rep@detail@luabind@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1664 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@std@@@2@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ?push_back@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEXABUbase_info@class_rep@detail@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEXABUbase_info@class_rep@detail@luabind@@@Z PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::push_back, COMDAT
; _this$ = ecx

; 912  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 913  :         emplace_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@ABUbase_info@class_rep@detail@luabind@@@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE?A_TABUbase_info@class_rep@detail@luabind@@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::emplace_back<luabind::detail::class_rep::base_info const &>

; 914  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEXABUbase_info@class_rep@detail@luabind@@@Z ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
_$S3$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >, COMDAT
; _this$ = ecx

; 806  :     _CONSTEXPR20 ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 807  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEXXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Tidy

; 808  : #if _ITERATOR_DEBUG_LEVEL != 0
; 809  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S3$[ebp]
	call	??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::class_rep::base_info>
	lea	eax, DWORD PTR _$S3$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 810  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 811  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 812  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@vector:
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	51					; 00000033H
	DB	0
??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vector
;	COMDAT ??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ PROC ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >, COMDAT
; _this$ = ecx

; 675  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@V?$_Vector_val@U?$_Simple_types@Ubase_info@class_rep@detail@luabind@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1>::_Compressed_pair<std::allocator<luabind::detail::class_rep::base_info>,std::_Vector_val<std::_Simple_types<luabind::detail::class_rep::base_info> >,1><>

; 676  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@AAEAAV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0Ubase_info@class_rep@detail@luabind@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Ubase_info@class_rep@detail@luabind@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><luabind::detail::class_rep::base_info>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 677  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ENDP ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::max_size, COMDAT

; 695  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 696  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 536870911				; 1fffffffH

; 697  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@SAIABV?$allocator@Ubase_info@class_rep@detail@luabind@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<luabind::detail::class_rep::base_info> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?allocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::class_rep::base_info>::allocate, COMDAT
; _this$ = ecx

; 835  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 837  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 838  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEPAUbase_info@class_rep@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::class_rep::base_info>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z PROC ; std::allocator<luabind::detail::class_rep::base_info>::deallocate, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 830  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 831  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 832  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 833  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAEXQAUbase_info@class_rep@detail@luabind@@I@Z ENDP ; std::allocator<luabind::detail::class_rep::base_info>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAE@XZ PROC ; std::allocator<luabind::detail::class_rep::base_info>::allocator<luabind::detail::class_rep::base_info>, COMDAT
; _this$ = ecx

; 821  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@QAE@XZ ENDP ; std::allocator<luabind::detail::class_rep::base_info>::allocator<luabind::detail::class_rep::base_info>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?cache_operators@class_rep@detail@luabind@@AAEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::cache_operators
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	m_operator_cache = 0x1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 1

; 374  : 
; 375  : 	for (int i = 0; i < number_of_operators; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@cache_oper
$LN2@cache_oper:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@cache_oper:
	cmp	DWORD PTR _i$1[ebp], 13			; 0000000dH
	jge	SHORT $LN1@cache_oper

; 376  : 	{
; 377  : 		get_table(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 378  : 		lua_pushstring(L, get_operator_name(i));

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	?get_operator_name@detail@luabind@@YAPBDH@Z ; luabind::detail::get_operator_name
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 379  : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawget
	add	esp, 8

; 380  : 
; 381  : 		if (lua_isfunction(L, -1)) m_operator_cache |= 1 << (i + 1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	cmp	eax, 6
	jne	SHORT $LN5@cache_oper
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], edx
$LN5@cache_oper:

; 382  : 
; 383  : 		lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 384  : 	}

	jmp	SHORT $LN2@cache_oper
$LN1@cache_oper:

; 385  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?cache_operators@class_rep@detail@luabind@@AAEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::cache_operators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv74 = -12						; size = 4
_mask$ = -8						; size = 4
_this$ = -4						; size = 4
_L$ = 8							; size = 4
_id$ = 12						; size = 4
?has_operator_in_lua@class_rep@detail@luabind@@QAE_NPAUlua_State@@H@Z PROC ; luabind::detail::class_rep::has_operator_in_lua
; _this$ = ecx

; 388  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 389  : 	if ((m_operator_cache & 0x1) == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	and	ecx, 1
	jne	SHORT $LN2@has_operat

; 390  : 		cache_operators(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cache_operators@class_rep@detail@luabind@@AAEXPAUlua_State@@@Z ; luabind::detail::class_rep::cache_operators
$LN2@has_operat:

; 391  : 
; 392  : 	const int mask = 1 << (id + 1);

	mov	ecx, DWORD PTR _id$[ebp]
	add	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _mask$[ebp], eax

; 393  : 
; 394  : 	return (m_operator_cache & mask) != 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	and	edx, DWORD PTR _mask$[ebp]
	je	SHORT $LN4@has_operat
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@has_operat
$LN4@has_operat:
	mov	DWORD PTR tv74[ebp], 0
$LN5@has_operat:
	mov	al, BYTE PTR tv74[ebp]

; 395  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?has_operator_in_lua@class_rep@detail@luabind@@QAE_NPAUlua_State@@H@Z ENDP ; luabind::detail::class_rep::has_operator_in_lua
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv190 = -132						; size = 4
tv187 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 12
$T5 = -101						; size = 1
$T6 = -100						; size = 12
_msg$7 = -84						; size = 28
_j$ = -48						; size = 12
_key$ = -28						; size = 4
_crep$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::class_rep::static_class_gettable

; 283  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 284  : 	class_rep* crep = static_cast<class_rep*>(lua_touserdata(L, 1));

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _crep$[ebp], eax

; 285  : 
; 286  : 	// look in the static function table
; 287  : 	crep->get_default_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table

; 288  : 	lua_pushvalue(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 289  : 	lua_gettable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 290  : 	if (!lua_isnil(L, -1)) return 1;

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@static_cla
	mov	eax, 1
	jmp	$LN1@static_cla
	jmp	SHORT $LN3@static_cla
$LN2@static_cla:

; 291  : 	else lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN3@static_cla:

; 292  : 
; 293  : 	const char* key = lua_tostring(L, 2);

	push	0
	push	2
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tolstring
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax

; 294  : 
; 295  : 	if (std::strlen(key) != lua_strlen(L, 2))

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, eax
	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_objlen
	add	esp, 8
	cmp	esi, eax
	je	SHORT $LN4@static_cla

; 296  : 	{
; 297  : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushnil
	add	esp, 4

; 298  : 		return 1;

	mov	eax, 1
	jmp	$LN1@static_cla
$LN4@static_cla:

; 299  : 	}
; 300  : 
; 301  : 	std::map<const char*, int, ltstr>::const_iterator j = crep->m_static_constants.find(key);

	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _crep$[ebp]
	add	ecx, 56					; 00000038H
	call	?find@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::find
	mov	DWORD PTR tv187[ebp], eax
	mov	eax, DWORD PTR tv187[ebp]
	push	eax
	lea	ecx, DWORD PTR _j$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ

; 302  : 
; 303  : 	if (j != crep->m_static_constants.end())

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _crep$[ebp]
	add	ecx, 56					; 00000038H
	call	?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::end
	mov	DWORD PTR tv190[ebp], eax
	mov	edx, DWORD PTR tv190[ebp]
	push	edx
	lea	ecx, DWORD PTR _j$[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T5[ebp]
	test	eax, eax
	je	SHORT $LN5@static_cla

; 304  : 	{
; 305  : 		lua_pushnumber(L, j->second);

	lea	ecx, DWORD PTR _j$[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushnumber
	add	esp, 12					; 0000000cH

; 306  : 		return 1;

	mov	DWORD PTR $T3[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _j$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T3[ebp]
	jmp	$LN1@static_cla
$LN5@static_cla:

; 307  : 	}
; 308  : 
; 309  : #ifndef LUABIND_NO_ERROR_CHECKING
; 310  : 
; 311  : 	{
; 312  : 		std::string msg = "no static '";

	push	OFFSET $SG102145
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 313  : 		msg += key;

	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 314  : 		msg += "' in class '";

	push	OFFSET $SG102146
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 315  : 		msg += crep->name();

	mov	ecx, DWORD PTR _crep$[ebp]
	call	?name@class_rep@detail@luabind@@QBEPBDXZ ; luabind::detail::class_rep::name
	push	eax
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 316  : 		msg += "'";

	push	OFFSET $SG102147
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 317  : 		lua_pushstring(L, msg.c_str());

	lea	ecx, DWORD PTR _msg$7[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 318  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _msg$7[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 319  : 	lua_error(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_error
	add	esp, 4

; 320  : 
; 321  : #endif
; 322  : 
; 323  : 	lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4

; 324  : 
; 325  : 	return 1;

	mov	DWORD PTR $T2[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _j$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
$LN1@static_cla:

; 326  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@static_cla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@static_cla:
	DD	3
	DD	$LN15@static_cla
$LN15@static_cla:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN11@static_cla
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN12@static_cla
	DD	-84					; ffffffacH
	DD	28					; 0000001cH
	DD	$LN13@static_cla
$LN13@static_cla:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN12@static_cla:
	DB	106					; 0000006aH
	DB	0
$LN11@static_cla:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR _j$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z$3:
	lea	ecx, DWORD PTR _msg$7[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::static_class_gettable
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_crep$ = -4						; size = 4
_L$ = 8							; size = 4
?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::class_rep::lua_settable_dispatcher

; 254  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 255  : 	class_rep* crep = static_cast<class_rep*>(lua_touserdata(L, 1));

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _crep$[ebp], eax

; 256  : 
; 257  : 	// get first table
; 258  : 	crep->get_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 259  : 
; 260  : 	// copy key, value
; 261  : 	lua_pushvalue(L, -3);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 262  : 	lua_pushvalue(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 263  : 	lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8

; 264  : 	// pop table
; 265  : 	lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 266  : 
; 267  : 	// get default table
; 268  : 	crep->get_default_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_default_table

; 269  : 	lua_replace(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_replace
	add	esp, 8

; 270  : 	lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 271  : 
; 272  : 	crep->m_operator_cache = 0; // invalidate cache

	mov	eax, DWORD PTR _crep$[ebp]
	mov	DWORD PTR [eax+68], 0

; 273  : 	
; 274  : 	return 0;

	xor	eax, eax

; 275  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::lua_settable_dispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_base$ = -12						; size = 4
_crep$ = -8						; size = 4
_args$ = -4						; size = 4
_L$ = 8							; size = 4
?super_callback@class_rep@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::class_rep::super_callback

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 210  : 	int args = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _args$[ebp], eax

; 211  : 		
; 212  : 	class_rep* crep = static_cast<class_rep*>(lua_touserdata(L, lua_upvalueindex(1)));

	push	-10003					; ffffd8edH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _crep$[ebp], eax

; 213  : 	class_rep* base = crep->bases()[0].base;

	push	0
	mov	ecx, DWORD PTR _crep$[ebp]
	call	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
	mov	ecx, eax
	call	??A?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBEABUbase_info@class_rep@detail@luabind@@I@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _base$[ebp], edx

; 214  : 
; 215  : 	if (base->bases().empty())

	mov	ecx, DWORD PTR _base$[ebp]
	call	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
	mov	ecx, eax
	call	?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@super_call

; 216  : 	{
; 217  : 		lua_pushstring(L, "super");

	push	OFFSET $SG102120
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 218  : 		lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4

; 219  : 		lua_settable(L, LUA_GLOBALSINDEX);

	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8

; 220  : 	}

	jmp	SHORT $LN3@super_call
$LN2@super_call:

; 221  : 	else
; 222  : 	{
; 223  : 		lua_pushstring(L, "super");

	push	OFFSET $SG102121
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 224  : 		lua_pushlightuserdata(L, base);

	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 225  : 		lua_pushvalue(L, lua_upvalueindex(2));

	push	-10004					; ffffd8ecH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 226  : 		lua_pushcclosure(L, super_callback, 2);

	push	2
	push	OFFSET ?super_callback@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::super_callback
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 227  : 		lua_settable(L, LUA_GLOBALSINDEX);

	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8
$LN3@super_call:

; 228  : 	}
; 229  : 
; 230  : 	base->get_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _base$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 231  : 	lua_pushstring(L, "__init");

	push	OFFSET $SG102122
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 232  : 	lua_gettable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 233  : 	lua_insert(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_insert
	add	esp, 8

; 234  : 	lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 235  : 
; 236  : 	lua_pushvalue(L, lua_upvalueindex(2));

	push	-10004					; ffffd8ecH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 237  : 	lua_insert(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_insert
	add	esp, 8

; 238  : 
; 239  : 	lua_call(L, args + 1, 0);

	push	0
	mov	edx, DWORD PTR _args$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_call
	add	esp, 12					; 0000000cH

; 240  : 
; 241  : 	// TODO: instead of clearing the global variable "super"
; 242  : 	// store it temporarily in the registry. maybe we should
; 243  : 	// have some kind of warning if the super global is used?
; 244  : 	lua_pushstring(L, "super");

	push	OFFSET $SG102123
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 245  : 	lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4

; 246  : 	lua_settable(L, LUA_GLOBALSINDEX);

	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8

; 247  : 
; 248  : 	return 0;

	xor	eax, eax

; 249  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?super_callback@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::super_callback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ PROC ; luabind::detail::class_rep::get_class_type, COMDAT
; _this$ = ecx

; 128  : 		class_type get_class_type() const { return m_class_type; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ ENDP ; luabind::detail::class_rep::get_class_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_default_table, COMDAT
; _this$ = ecx

; 126  : 		void get_default_table(lua_State* L) const { m_default_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_default_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_default_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::class_rep::get_table, COMDAT
; _this$ = ecx

; 125  : 		void get_table(lua_State* L) const { m_table.push(L); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push@handle@luabind@@QBEXPAUlua_State@@@Z ; luabind::handle::push
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::get_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?name@class_rep@detail@luabind@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@class_rep@detail@luabind@@QBEPBDXZ PROC		; luabind::detail::class_rep::name, COMDAT
; _this$ = ecx

; 120  : 		const char* name() const throw() { return m_name; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?name@class_rep@detail@luabind@@QBEPBDXZ ENDP		; luabind::detail::class_rep::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_rep.hpp
;	COMDAT ?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ PROC ; luabind::detail::class_rep::bases, COMDAT
; _this$ = ecx

; 115  : 		const std::vector<base_info>& bases() const throw() { return m_bases; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ENDP ; luabind::detail::class_rep::bases
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv159 = -80						; size = 4
tv156 = -76						; size = 4
$T2 = -72						; size = 12
$T3 = -57						; size = 1
$T4 = -56						; size = 12
_v$5 = -44						; size = 4
_i$6 = -36						; size = 12
_bcrep$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_binfo$ = 8						; size = 4
?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z PROC ; luabind::detail::class_rep::add_base_class
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	// If you hit this assert you are deriving from a type that is not registered
; 183  : 	// in lua. That is, in the class_<> you are giving a baseclass that isn't registered.
; 184  : 	// Please note that if you don't need to have access to the base class or the
; 185  : 	// conversion from the derived class to the base class, you don't need
; 186  : 	// to tell luabind that it derives.
; 187  : 	assert(binfo.base && "You cannot derive from an unregistered type");

	mov	eax, DWORD PTR _binfo$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@add_base_c
	mov	ecx, OFFSET $SG102090
	test	ecx, ecx
	jne	SHORT $LN7@add_base_c
$LN6@add_base_c:
	push	187					; 000000bbH
	push	OFFSET $SG102091
	push	OFFSET $SG102092
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@add_base_c:

; 188  : 
; 189  : 	class_rep* bcrep = binfo.base;

	mov	eax, DWORD PTR _binfo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _bcrep$[ebp], ecx

; 190  : 
; 191  : 	// import all static constants
; 192  : 	for (std::map<const char*, int, ltstr>::const_iterator i = bcrep->m_static_constants.begin(); 

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _bcrep$[ebp]
	add	ecx, 56					; 00000038H
	call	?begin@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::begin
	mov	DWORD PTR tv156[ebp], eax
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$6[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@add_base_c
$LN2@add_base_c:

; 193  : 			i != bcrep->m_static_constants.end(); ++i)

	lea	ecx, DWORD PTR _i$6[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator++
$LN4@add_base_c:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bcrep$[ebp]
	add	ecx, 56					; 00000038H
	call	?end@?$_Tree@V?$_Tmap_traits@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> >,0> >::end
	mov	DWORD PTR tv159[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$6[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	SHORT $LN3@add_base_c

; 194  : 	{
; 195  : 		int& v = m_static_constants[i->first];

	lea	ecx, DWORD PTR _i$6[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAEAAHABQBD@Z ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::operator[]
	mov	DWORD PTR _v$5[ebp], eax

; 196  : 		v = i->second;

	lea	ecx, DWORD PTR _i$6[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPBU?$pair@QBDH@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,int> > > >::operator->
	mov	ecx, DWORD PTR _v$5[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN2@add_base_c
$LN3@add_base_c:

; 197  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ

; 198  : 
; 199  : 	// also, save the baseclass info to be used for typecasts
; 200  : 	m_bases.push_back(binfo);

	mov	eax, DWORD PTR _binfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAEXABUbase_info@class_rep@detail@luabind@@@Z ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::push_back

; 201  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@add_base_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN14@add_base_c:
	DD	1
	DD	$LN13@add_base_c
$LN13@add_base_c:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN11@add_base_c
$LN11@add_base_c:
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z$1:
	lea	ecx, DWORD PTR _i$6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?add_base_class@class_rep@detail@luabind@@QAEXABUbase_info@123@@Z ENDP ; luabind::detail::class_rep::add_base_class
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_args$ = -8						; size = 4
_cls$ = -4						; size = 4
_L$ = 8							; size = 4
?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::class_rep::constructor_dispatcher

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 139  :     class_rep* cls = static_cast<class_rep*>(lua_touserdata(L, 1));

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _cls$[ebp], eax

; 140  : 
; 141  :     int args = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _args$[ebp], eax

; 142  : 
; 143  :     push_new_instance(L, cls);

	mov	edx, DWORD PTR _cls$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?push_new_instance@detail@luabind@@YAPAVobject_rep@12@PAUlua_State@@PAVclass_rep@12@@Z ; luabind::detail::push_new_instance
	add	esp, 8

; 144  : 
; 145  :     if (super_deprecation_disabled
; 146  :         && cls->get_class_type() == class_rep::lua_class
; 147  :         && !cls->bases().empty())

	movzx	ecx, BYTE PTR ?super_deprecation_disabled@?A0xe7459c65@@3_NA ; `anonymous namespace'::super_deprecation_disabled
	test	ecx, ecx
	je	SHORT $LN2@constructo
	mov	ecx, DWORD PTR _cls$[ebp]
	call	?get_class_type@class_rep@detail@luabind@@QBE?AW4class_type@123@XZ ; luabind::detail::class_rep::get_class_type
	cmp	eax, 1
	jne	SHORT $LN2@constructo
	mov	ecx, DWORD PTR _cls$[ebp]
	call	?bases@class_rep@detail@luabind@@QBEABV?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@XZ ; luabind::detail::class_rep::bases
	mov	ecx, eax
	call	?empty@?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QBE_NXZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::empty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@constructo

; 148  :     {
; 149  :         lua_pushstring(L, "super");

	push	OFFSET $SG101806
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 150  :         lua_pushvalue(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 151  :         lua_pushvalue(L, -3);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 152  :         lua_pushcclosure(L, super_callback, 2);

	push	2
	push	OFFSET ?super_callback@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::super_callback
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 153  :         lua_settable(L, LUA_GLOBALSINDEX);

	push	-10002					; ffffd8eeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settable
	add	esp, 8
$LN2@constructo:

; 154  :     }
; 155  : 
; 156  :     lua_pushvalue(L, -1);

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 157  :     lua_replace(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_replace
	add	esp, 8

; 158  : 
; 159  :     cls->get_table(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cls$[ebp]
	call	?get_table@class_rep@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::class_rep::get_table

; 160  :     lua_pushliteral(L, "__init");

	push	6
	push	OFFSET $SG101807
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 161  :     lua_gettable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettable
	add	esp, 8

; 162  : 
; 163  :     lua_insert(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_insert
	add	esp, 8

; 164  : 
; 165  :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 166  :     lua_insert(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_insert
	add	esp, 8

; 167  : 
; 168  :     lua_call(L, args, 0);

	push	0
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_call
	add	esp, 12					; 0000000cH

; 169  : 
; 170  :     if (super_deprecation_disabled)

	movzx	eax, BYTE PTR ?super_deprecation_disabled@?A0xe7459c65@@3_NA ; `anonymous namespace'::super_deprecation_disabled
	test	eax, eax
	je	SHORT $LN3@constructo

; 171  :     {
; 172  :         lua_pushstring(L, "super");

	push	OFFSET $SG101809
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 173  :         lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4

; 174  :         lua_settable(L, LUA_GLOBALSINDEX);

	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settable
	add	esp, 8
$LN3@constructo:

; 175  :     }
; 176  : 
; 177  :     return 1;

	mov	eax, 1

; 178  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::constructor_dispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
_mem$ = -16						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_L$ = 12						; size = 4
?allocate@class_rep@detail@luabind@@QBE?AU?$pair@PAXPAX@std@@PAUlua_State@@@Z PROC ; luabind::detail::class_rep::allocate
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 	const int size = sizeof(object_rep);

	mov	DWORD PTR _size$[ebp], 48		; 00000030H

; 125  : 	char* mem = static_cast<char*>(lua_newuserdata(L, size));

	push	48					; 00000030H
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_newuserdata
	add	esp, 8
	mov	DWORD PTR _mem$[ebp], eax

; 126  : 	return std::pair<void*,void*>(mem, (void*)0);

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	edx, DWORD PTR _mem$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPADPAX$0A@@?$pair@PAXPAX@std@@QAE@AAPAD$$QAPAX@Z ; std::pair<void *,void *>::pair<void *,void *><char * &,void *,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 127  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@allocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@allocate:
	DD	1
	DD	$LN4@allocate
$LN4@allocate:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN3@allocate
$LN3@allocate:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
?allocate@class_rep@detail@luabind@@QBE?AU?$pair@PAXPAX@std@@PAUlua_State@@@Z ENDP ; luabind::detail::class_rep::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1class_rep@detail@luabind@@QAE@XZ PROC		; luabind::detail::class_rep::~class_rep
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 118  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1lua_reference@detail@luabind@@QAE@XZ	; luabind::detail::lua_reference::~lua_reference
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1class_rep@detail@luabind@@QAE@XZ ENDP		; luabind::detail::class_rep::~class_rep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv212 = -52						; size = 4
tv86 = -48						; size = 4
tv210 = -44						; size = 4
tv92 = -40						; size = 4
$T2 = -36						; size = 8
$T3 = -28						; size = 8
_r$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_name$ = 12						; size = 4
??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z PROC ; luabind::detail::class_rep::class_rep
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	: m_type(typeid(null_type))

	push	OFFSET ??_R0?AUnull_type@detail@luabind@@@8
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0type_id@luabind@@QAE@ABVtype_info@@@Z ; luabind::type_id::type_id

; 88   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 85   : 	, m_name(name)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 88   : {

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::lua_reference::lua_reference
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 86   : 	, m_class_type(lua_class)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 1

; 88   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 87   : 	, m_operator_cache(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 89   : 	lua_newtable(L);

	push	0
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 90   : 	handle(L, -1).swap(m_table);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR tv210[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv210[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 91   : 	lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 92   : 	handle(L, -1).swap(m_default_table);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv212[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv212[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 93   : 	lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 94   : 
; 95   : 	class_registry* r = class_registry::get_registry(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax

; 96   : 	assert((r->cpp_class() != LUA_NOREF) && "you must call luabind::open()");

	mov	ecx, DWORD PTR _r$[ebp]
	call	?cpp_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_class
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN3@class_rep
	mov	edx, OFFSET $SG101608
	test	edx, edx
	jne	SHORT $LN4@class_rep
$LN3@class_rep:
	push	96					; 00000060H
	push	OFFSET $SG101609
	push	OFFSET $SG101610
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@class_rep:

; 97   : 
; 98   : 	lua_rawgeti(L, LUA_REGISTRYINDEX, r->lua_class());

	mov	ecx, DWORD PTR _r$[ebp]
	call	?lua_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::lua_class
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 99   : 	lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setmetatable
	add	esp, 8

; 100  : 	lua_pushvalue(L, -1); // duplicate our user data

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 101  : 	m_self_ref.set(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z ; luabind::detail::lua_reference::set

; 102  : 
; 103  : 	m_instance_metatable = r->lua_instance();

	mov	ecx, DWORD PTR _r$[ebp]
	call	?lua_instance@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::lua_instance
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax

; 104  : 
; 105  :     lua_pushstring(L, "__luabind_cast_graph");

	push	OFFSET $SG101611
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 106  :     lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 107  :     m_casts = static_cast<cast_graph*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 108  :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 109  : 
; 110  :     lua_pushstring(L, "__luabind_class_id_map");

	push	OFFSET $SG101612
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 111  :     lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 112  :     m_classes = static_cast<class_id_map*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 113  :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 114  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1lua_reference@detail@luabind@@QAE@XZ	; luabind::detail::lua_reference::~lua_reference
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$5:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z$6:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_rep@detail@luabind@@QAE@PAUlua_State@@PBD@Z ENDP ; luabind::detail::class_rep::class_rep
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
tv211 = -52						; size = 4
tv85 = -48						; size = 4
tv209 = -44						; size = 4
tv91 = -40						; size = 4
$T2 = -36						; size = 8
$T3 = -28						; size = 8
_r$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_name$ = 12						; size = 4
_L$ = 16						; size = 4
??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z PROC ; luabind::detail::class_rep::class_rep
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	: m_type(type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 54   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 51   : 	, m_name(name)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 54   : {

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::lua_reference::lua_reference
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0handle@luabind@@QAE@XZ		; luabind::handle::handle
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 52   : 	, m_class_type(cpp_class)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 0

; 54   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >::map<char const *,int,luabind::detail::ltstr,std::allocator<std::pair<char const * const,int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 53   : 	, m_operator_cache(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 55   : 	lua_newtable(L);

	push	0
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 56   : 	handle(L, -1).swap(m_table);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR tv209[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv209[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 57   : 	lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 58   : 	handle(L, -1).swap(m_default_table);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0handle@luabind@@QAE@PAUlua_State@@H@Z ; luabind::handle::handle
	mov	DWORD PTR tv85[ebp], eax
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR tv211[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv211[ebp]
	call	?swap@handle@luabind@@QAEXAAV12@@Z	; luabind::handle::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle

; 59   : 	lua_pop(L, 2);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 60   : 
; 61   : 	class_registry* r = class_registry::get_registry(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax

; 62   : 	assert((r->cpp_class() != LUA_NOREF) && "you must call luabind::open()");

	mov	ecx, DWORD PTR _r$[ebp]
	call	?cpp_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_class
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN3@class_rep
	mov	edx, OFFSET $SG101589
	test	edx, edx
	jne	SHORT $LN4@class_rep
$LN3@class_rep:
	push	62					; 0000003eH
	push	OFFSET $SG101590
	push	OFFSET $SG101591
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@class_rep:

; 63   : 
; 64   : 	lua_rawgeti(L, LUA_REGISTRYINDEX, r->cpp_class());

	mov	ecx, DWORD PTR _r$[ebp]
	call	?cpp_class@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_class
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 65   : 	lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setmetatable
	add	esp, 8

; 66   : 
; 67   : 	lua_pushvalue(L, -1); // duplicate our user data

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 68   : 	m_self_ref.set(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z ; luabind::detail::lua_reference::set

; 69   : 
; 70   : 	m_instance_metatable = r->cpp_instance();

	mov	ecx, DWORD PTR _r$[ebp]
	call	?cpp_instance@class_registry@detail@luabind@@QBEHXZ ; luabind::detail::class_registry::cpp_instance
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax

; 71   : 
; 72   :     lua_pushstring(L, "__luabind_cast_graph");

	push	OFFSET $SG101592
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 73   :     lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 74   :     m_casts = static_cast<cast_graph*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 75   :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 76   : 
; 77   :     lua_pushstring(L, "__luabind_class_id_map");

	push	OFFSET $SG101593
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 78   :     lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 79   :     m_classes = static_cast<class_id_map*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 80   :     lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 81   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@Ubase_info@class_rep@detail@luabind@@V?$allocator@Ubase_info@class_rep@detail@luabind@@@std@@@std@@QAE@XZ ; std::vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >::~vector<luabind::detail::class_rep::base_info,std::allocator<luabind::detail::class_rep::base_info> >
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1lua_reference@detail@luabind@@QAE@XZ	; luabind::detail::lua_reference::~lua_reference
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$map@PBDHUltstr@detail@luabind@@V?$allocator@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$5:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
__unwindfunclet$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z$6:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1handle@luabind@@QAE@XZ		; luabind::handle::~handle
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_rep@detail@luabind@@QAE@ABVtype_id@2@PBDPAUlua_State@@@Z ENDP ; luabind::detail::class_rep::class_rep
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?property_tag@detail@luabind@@YAHPAUlua_State@@@Z PROC	; luabind::detail::property_tag

; 39   : 	{

	push	ebp
	mov	ebp, esp

; 40   : 		lua_pushstring(L, "luabind: property_tag function can't be called");

	push	OFFSET $SG101572
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 41   : 		lua_error(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_error
	add	esp, 4

; 42   : 		return 0;

	xor	eax, eax

; 43   : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?property_tag@detail@luabind@@YAHPAUlua_State@@@Z ENDP	; luabind::detail::property_tag
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z PROC ; std::swap<lua_State *,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAPAUlua_State@@@std@@YA$$QAPAUlua_State@@AAPAU1@@Z ; std::move<lua_State * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ENDP ; std::swap<lua_State *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?push@handle@luabind@@QBEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
?push@handle@luabind@@QBEXPAUlua_State@@@Z PROC		; luabind::handle::push, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     lua_rawgeti(interpreter, LUA_REGISTRYINDEX, m_index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 107  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@handle@luabind@@QBEXPAUlua_State@@@Z ENDP		; luabind::handle::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ?swap@handle@luabind@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?swap@handle@luabind@@QAEXAAV12@@Z PROC			; luabind::handle::swap, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  :     std::swap(m_interpreter, other.m_interpreter);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$swap@PAUlua_State@@$0A@@std@@YAXAAPAUlua_State@@0@Z ; std::swap<lua_State *,0>
	add	esp, 8

; 101  :     std::swap(m_index, other.m_index);

	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$swap@H$0A@@std@@YAXAAH0@Z		; std::swap<int,0>
	add	esp, 8

; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@handle@luabind@@QAEXAAV12@@Z ENDP			; luabind::handle::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??1handle@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1handle@luabind@@QAE@XZ PROC				; luabind::handle::~handle, COMDAT
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 88   :     if (m_interpreter && m_index != LUA_NOREF)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@handle
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -2			; fffffffeH
	je	SHORT $LN3@handle

; 89   :         luaL_unref(m_interpreter, LUA_REGISTRYINDEX, m_index);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_luaL_unref
	add	esp, 12					; 0000000cH
$LN3@handle:

; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1handle@luabind@@QAE@XZ ENDP				; luabind::handle::~handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??0handle@luabind@@QAE@PAUlua_State@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpreter$ = 8					; size = 4
_stack_index$ = 12					; size = 4
??0handle@luabind@@QAE@PAUlua_State@@H@Z PROC		; luabind::handle::handle, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 71   :   : m_interpreter(interpreter)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _interpreter$[ebp]
	mov	DWORD PTR [eax], ecx

; 72   :   , m_index(LUA_NOREF)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], -2			; fffffffeH

; 74   :     lua_pushvalue(interpreter, stack_index);

	mov	eax, DWORD PTR _stack_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interpreter$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 75   :     m_index = luaL_ref(interpreter, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _interpreter$[ebp]
	push	edx
	call	_luaL_ref
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 76   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0handle@luabind@@QAE@PAUlua_State@@H@Z ENDP		; luabind::handle::handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\handle.hpp
;	COMDAT ??0handle@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0handle@luabind@@QAE@XZ PROC				; luabind::handle::handle, COMDAT
; _this$ = ecx

; 59   : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   :   : m_interpreter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 58   :   , m_index(LUA_NOREF)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -2			; fffffffeH

; 59   : {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0handle@luabind@@QAE@XZ ENDP				; luabind::handle::handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\operator_id.hpp
;	COMDAT ?get_operator_name@detail@luabind@@YAPBDH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?get_operator_name@detail@luabind@@YAPBDH@Z PROC	; luabind::detail::get_operator_name, COMDAT

; 51   : 	{

	push	ebp
	mov	ebp, esp

; 52   : 		static const char* a[number_of_operators] = {
; 53   :             "__add", "__sub", "__mul", "__div", "__pow", 
; 54   :             "__lt", "__le", "__eq", "__call", "__unm", 
; 55   :             "__tostring", "__concat", "__len" };
; 56   : 		return a[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?a@?1??get_operator_name@detail@luabind@@YAPBDH@Z@4PAPBDA[eax*4]

; 57   : 	}

	pop	ebp
	ret	0
?get_operator_name@detail@luabind@@YAPBDH@Z ENDP	; luabind::detail::get_operator_name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_registry.hpp
;	COMDAT ?lua_class@class_registry@detail@luabind@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?lua_class@class_registry@detail@luabind@@QBEHXZ PROC	; luabind::detail::class_registry::lua_class, COMDAT
; _this$ = ecx

; 47   : 		int lua_class() const { return m_lua_class_metatable; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?lua_class@class_registry@detail@luabind@@QBEHXZ ENDP	; luabind::detail::class_registry::lua_class
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_registry.hpp
;	COMDAT ?lua_instance@class_registry@detail@luabind@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?lua_instance@class_registry@detail@luabind@@QBEHXZ PROC ; luabind::detail::class_registry::lua_instance, COMDAT
; _this$ = ecx

; 46   : 		int lua_instance() const { return m_instance_metatable; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?lua_instance@class_registry@detail@luabind@@QBEHXZ ENDP ; luabind::detail::class_registry::lua_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_registry.hpp
;	COMDAT ?cpp_class@class_registry@detail@luabind@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?cpp_class@class_registry@detail@luabind@@QBEHXZ PROC	; luabind::detail::class_registry::cpp_class, COMDAT
; _this$ = ecx

; 44   : 		int cpp_class() const { return m_cpp_class_metatable; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?cpp_class@class_registry@detail@luabind@@QBEHXZ ENDP	; luabind::detail::class_registry::cpp_class
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\class_registry.hpp
;	COMDAT ?cpp_instance@class_registry@detail@luabind@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?cpp_instance@class_registry@detail@luabind@@QBEHXZ PROC ; luabind::detail::class_registry::cpp_instance, COMDAT
; _this$ = ecx

; 43   : 		int cpp_instance() const { return m_instance_metatable; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?cpp_instance@class_registry@detail@luabind@@QBEHXZ ENDP ; luabind::detail::class_registry::cpp_instance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??0type_id@luabind@@QAE@ABVtype_info@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
??0type_id@luabind@@QAE@ABVtype_info@@@Z PROC		; luabind::type_id::type_id, COMDAT
; _this$ = ecx

; 32   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   :       : id(&id)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0type_id@luabind@@QAE@ABVtype_info@@@Z ENDP		; luabind::type_id::type_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\primitives.hpp
;	COMDAT ??Rltstr@detail@luabind@@QBE_NPBD0@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??Rltstr@detail@luabind@@QBE_NPBD0@Z PROC		; luabind::detail::ltstr::operator(), COMDAT
; _this$ = ecx

; 62   : 		bool operator()(const char* s1, const char* s2) const { return std::strcmp(s1, s2) < 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv68[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??Rltstr@detail@luabind@@QBE_NPBD0@Z ENDP		; luabind::detail::ltstr::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$swap@H$0A@@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H$0A@@std@@YAXAAH0@Z PROC			; std::swap<int,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAH@std@@YA$$QAHAAH@Z		; std::move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@H$0A@@std@@YAXAAH0@Z ENDP			; std::swap<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\ref.hpp
;	COMDAT ?reset@lua_reference@detail@luabind@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?reset@lua_reference@detail@luabind@@QAEXXZ PROC	; luabind::detail::lua_reference::reset, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			if (L && m_ref != LUA_NOREF) luaL_unref(L, LUA_REGISTRYINDEX, m_ref);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@reset
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -2			; fffffffeH
	je	SHORT $LN2@reset
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_luaL_unref
	add	esp, 12					; 0000000cH
$LN2@reset:

; 95   : 			m_ref = LUA_NOREF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -2			; fffffffeH

; 96   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@lua_reference@detail@luabind@@QAEXXZ ENDP	; luabind::detail::lua_reference::reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\ref.hpp
;	COMDAT ?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L_$ = 8						; size = 4
?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z PROC ; luabind::detail::lua_reference::set, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 			reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@lua_reference@detail@luabind@@QAEXXZ ; luabind::detail::lua_reference::reset

; 72   : 			L = L_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _L_$[ebp]
	mov	DWORD PTR [eax], ecx

; 73   : 			m_ref = luaL_ref(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_luaL_ref
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 74   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set@lua_reference@detail@luabind@@QAEXPAUlua_State@@@Z ENDP ; luabind::detail::lua_reference::set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\ref.hpp
;	COMDAT ??1lua_reference@detail@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1lua_reference@detail@luabind@@QAE@XZ PROC		; luabind::detail::lua_reference::~lua_reference, COMDAT
; _this$ = ecx

; 53   : 		~lua_reference() { reset(); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1lua_reference@detail@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@lua_reference@detail@luabind@@QAEXXZ ; luabind::detail::lua_reference::reset
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1lua_reference@detail@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1lua_reference@detail@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1lua_reference@detail@luabind@@QAE@XZ ENDP		; luabind::detail::lua_reference::~lua_reference
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\ref.hpp
;	COMDAT ??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L_$ = 8						; size = 4
??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z PROC ; luabind::detail::lua_reference::lua_reference, COMDAT
; _this$ = ecx

; 44   : 		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 			: L(L_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _L_$[ebp]
	mov	DWORD PTR [eax], ecx

; 43   : 			, m_ref(LUA_NOREF)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], -2			; fffffffeH

; 44   : 		{}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0lua_reference@detail@luabind@@QAE@PAUlua_State@@@Z ENDP ; luabind::detail::lua_reference::lua_reference
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 415  : [[noreturn]] inline void _Throw_tree_length_error() {

	push	ebp
	mov	ebp, esp

; 416  :     _Xlength_error("map/set too long");

	push	OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Throw_tree:

; 417  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 216  :     constexpr tuple(const tuple&) noexcept /* strengthened */ {} // TRANSITION, ABI: should be defaulted

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1382 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1384 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4935 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4936 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4937 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4931 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4932 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4933 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -29						; size = 1
__Al$3 = -28						; size = 4
__Ptr$4 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4892 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4893 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4894 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4895 :         _ASAN_STRING_REMOVE(*this);
; 4896 :         if (_My_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Tidy_deall

; 4897 :             const pointer _Ptr = _My_data._Bx._Ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$4[ebp], eax

; 4898 :             auto& _Al          = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$3[ebp], eax

; 4899 :             _Destroy_in_place(_My_data._Bx._Ptr);

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
	add	esp, 4

; 4900 : #if _HAS_CXX20
; 4901 :             if (_STD is_constant_evaluated()) { // begin the lifetime of the array elements before copying into them
; 4902 :                 _Construct_in_place(_My_data._Bx);
; 4903 :             }
; 4904 : #endif // _HAS_CXX20
; 4905 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Ptr$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$3[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4906 :         }
; 4907 : 
; 4908 :         _My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], 0

; 4909 : #if _HAS_CXX20
; 4910 :         if (_STD is_constant_evaluated()) {
; 4911 :             _My_data._Myres = 0;
; 4912 :         } else
; 4913 : #endif // _HAS_CXX20
; 4914 :         {
; 4915 :             _My_data._Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 4916 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4917 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR __My_data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 4918 :         }
; 4919 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4763 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4764 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Requested$[ebp]
	push	edx
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH

; 4765 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4750 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 4751 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 4752 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	ecx, DWORD PTR __Masked$[ebp]
	cmp	ecx, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 4753 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4754 :         }
; 4755 : 
; 4756 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	mov	edx, DWORD PTR __Old$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR __Max$[ebp]
	sub	eax, edx
	cmp	DWORD PTR __Old$[ebp], eax
	jbe	SHORT $LN3@Calculate_

; 4757 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4758 :         }
; 4759 : 
; 4760 :         return (_STD max)(_Masked, _Old + _Old / 2);

	mov	ecx, DWORD PTR __Old$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	lea	eax, DWORD PTR __Masked$[ebp]
	push	eax
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4761 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Calculate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Calculate_:
	DD	1
	DD	$LN6@Calculate_
$LN6@Calculate_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Calculate_
$LN5@Calculate_:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 4157 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4158 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 4159 :         const size_type _Storage_max = // can always store small string

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 4160 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4161 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 4162 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4163 :         );
; 4164 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@max_size
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@max_size:
	DD	1
	DD	$LN4@max_size
$LN4@max_size:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@max_size
$LN3@max_size:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 4135 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 4136 :         return _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 4137 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3384 :     _CONSTEXPR20 basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3385 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3386 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -14						; size = 1
$T2 = -13						; size = 1
__Old_ptr$3 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3361 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3362 :         // append [_Ptr, _Ptr + _Count)
; 3363 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3364 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], eax
	ja	SHORT $LN2@append

; 3365 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3366 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3367 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3368 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3369 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Old_ptr$3[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3370 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@append
$LN2@append:

; 3371 :         }
; 3372 : 
; 3373 :         return _Reallocate_grow_by(

	xor	edx, edx
	mov	BYTE PTR $T1[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 3374 :             _Count,
; 3375 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 3376 :                 const size_type _Count) {
; 3377 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3378 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 3379 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3380 :             },
; 3381 :             _Ptr, _Count);
; 3382 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 3324 :     _CONSTEXPR20 basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3325 :         return append(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3326 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -24					; size = 4
_$S8$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3206 :     _CONSTEXPR20 ~basic_string() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3207 :         _Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3208 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3209 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S8$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	eax, DWORD PTR _$S8$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 3210 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __To_delete$[ebp], edx

; 3211 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3212 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	ecx, DWORD PTR __To_delete$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 3213 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3214 :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@basic_stri:
	DD	1
	DD	$LN4@basic_stri
$LN4@basic_stri:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@basic_stri
$LN3@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	56					; 00000038H
	DB	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2621 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2622 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2623 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2313 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2311 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2278 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2279 : #if _HAS_CXX20
; 2280 :         if (_STD is_constant_evaluated()) {
; 2281 :             return true;
; 2282 :         }
; 2283 : #endif // _HAS_CXX20
; 2284 :         return _BUF_SIZE <= _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
	mov	al, BYTE PTR tv66[ebp]

; 2285 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2269 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2270 :         const value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2271 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2272 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2273 :         }
; 2274 : 
; 2275 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2276 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2260 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2261 :         value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2262 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2263 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2264 :         }
; 2265 : 
; 2266 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2267 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2249 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2250 : 
; 2251 :     // length of internal buffer, [1, 16]:
; 2252 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2253 :     // roundup mask for allocated buffers, [0, 15]:
; 2254 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2255 :                                            : sizeof(value_type) <= 2 ? 7
; 2256 :                                            : sizeof(value_type) <= 4 ? 3
; 2257 :                                            : sizeof(value_type) <= 8 ? 1
; 2258 :                                                                      : 0;
; 2259 : 
; 2260 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2261 :         value_type* _Result = _Bx._Buf;
; 2262 :         if (_Large_string_engaged()) {
; 2263 :             _Result = _Unfancy(_Bx._Ptr);
; 2264 :         }
; 2265 : 
; 2266 :         return _Result;
; 2267 :     }
; 2268 : 
; 2269 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2270 :         const value_type* _Result = _Bx._Buf;
; 2271 :         if (_Large_string_engaged()) {
; 2272 :             _Result = _Unfancy(_Bx._Ptr);
; 2273 :         }
; 2274 : 
; 2275 :         return _Result;
; 2276 :     }
; 2277 : 
; 2278 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2279 : #if _HAS_CXX20
; 2280 :         if (_STD is_constant_evaluated()) {
; 2281 :             return true;
; 2282 :         }
; 2283 : #endif // _HAS_CXX20
; 2284 :         return _BUF_SIZE <= _Myres;
; 2285 :     }
; 2286 : 
; 2287 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2288 :         // checks whether _Off is in the bounds of [0, size()]
; 2289 :         if (_Mysize < _Off) {
; 2290 :             _Xran();
; 2291 :         }
; 2292 :     }
; 2293 : 
; 2294 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2295 :         // checks whether _Off is in the bounds of [0, size())
; 2296 :         if (_Mysize <= _Off) {
; 2297 :             _Xran();
; 2298 :         }
; 2299 :     }
; 2300 : 
; 2301 :     [[noreturn]] static void _Xran() {
; 2302 :         _Xout_of_range("invalid string position");
; 2303 :     }
; 2304 : 
; 2305 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2306 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2307 :         return (_STD min)(_Size, _Mysize - _Off);
; 2308 :     }
; 2309 : 
; 2310 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2311 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2312 : 
; 2313 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2314 : 
; 2315 :         value_type _Buf[_BUF_SIZE];
; 2316 :         pointer _Ptr;
; 2317 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2318 :     } _Bx;
; 2319 : 
; 2320 :     size_type _Mysize = 0; // current length of string

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2321 :     size_type _Myres  = 0; // current storage reserved for string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 2249 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 695  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 696  :         return static_cast<size_t>(-1) / sizeof(value_type);

	or	eax, -1

; 697  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 835  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 837  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 838  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 830  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	830					; 0000033eH
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 831  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 832  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 833  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 821  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2337 : [[noreturn]] inline void _Xlen_string() {

	push	ebp
	mov	ebp, esp

; 2338 :     _Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen_strin:

; 2339 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

	push	ebp
	mov	ebp, esp

; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             return _Primary_char_traits::assign(_Left, _Right);
; 442  :         }
; 443  : #endif // _HAS_CXX20
; 444  :         _Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 445  :     }

	pop	ebp
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // _HAS_U8_INTRINSICS
; 395  :         } else
; 396  : #endif // __cpp_char8_t
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // _HAS_CXX17
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 402  : #endif // _HAS_CXX17
; 403  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 121  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 68   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 :     _Container_proxy* _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1304 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1305 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1306 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked_v3, COMDAT
; _this$ = ecx

; 1217 :     void _Orphan_me_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1218 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1219 :         _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1220 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_me_:
	DD	1
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_me_
$LN3@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Temp$1 = -12						; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ PROC ; std::_Iterator_base12::_Orphan_me_unlocked_v3, COMDAT
; _this$ = ecx

; 1200 :     _CONSTEXPR20 void _Orphan_me_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1201 :         if (!_Myproxy) { // already orphaned

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Orphan_me_

; 1202 :             return;

	jmp	$LN13@Orphan_me_
$LN10@Orphan_me_:

; 1203 :         }
; 1204 : 
; 1205 :         // adopted, remove self from list
; 1206 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$[ebp], edx
$LN2@Orphan_me_:

; 1207 :         while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me_
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me_

; 1208 :             const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 1209 :             _Pnext           = &_Temp->_Mynextiter;

	mov	edx, DWORD PTR __Temp$1[ebp]
	add	edx, 4
	mov	DWORD PTR __Pnext$[ebp], edx

; 1210 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN6@Orphan_me_:

; 1211 : 
; 1212 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@Orphan_me_
	jmp	SHORT $LN4@Orphan_me_
$LN9@Orphan_me_:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1212					; 000004bcH
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me_
	int	3
$LN14@Orphan_me_:
	push	0
	push	1212					; 000004bcH
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN9@Orphan_me_
$LN4@Orphan_me_:
	xor	eax, eax
	jne	SHORT $LN6@Orphan_me_

; 1213 :         *_Pnext  = _Mynextiter;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax

; 1214 :         _Myproxy = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN13@Orphan_me_:

; 1215 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ENDP ; std::_Iterator_base12::_Orphan_me_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1195 :     void _Adopt_locked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1196 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1197 :         _Adopt_unlocked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1198 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Adopt_lock:
	DD	1
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Adopt_lock
$LN3@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1178 :     _CONSTEXPR20 void _Adopt_unlocked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1179 :         if (!_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt_unlo

; 1180 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1181 :             return;

	jmp	SHORT $LN5@Adopt_unlo
$LN2@Adopt_unlo:

; 1182 :         }
; 1183 : 
; 1184 :         _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$[ebp], ecx

; 1185 :         if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$[ebp]
	je	SHORT $LN5@Adopt_unlo

; 1186 :             if (_Myproxy) { // adopted, remove self from list

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Adopt_unlo

; 1187 :                 _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN4@Adopt_unlo:

; 1188 :             }
; 1189 :             _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1190 :             _Parent_proxy->_Myfirstiter = this;

	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1191 :             _Myproxy                    = _Parent_proxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@Adopt_unlo:

; 1192 :         }
; 1193 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z PROC	; std::_Iterator_base12::_Assign_locked, COMDAT
; _this$ = ecx

; 1173 :     void _Assign_locked(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1174 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1175 :         _Assign_unlocked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_unlocked

; 1176 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Assign_loc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Assign_loc:
	DD	1
	DD	$LN4@Assign_loc
$LN4@Assign_loc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Assign_loc
$LN3@Assign_loc:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ENDP	; std::_Iterator_base12::_Assign_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z PROC ; std::_Iterator_base12::_Assign_unlocked, COMDAT
; _this$ = ecx

; 1161 :     _CONSTEXPR20 void _Assign_unlocked(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1162 :         if (_Myproxy == _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@Assign_unl

; 1163 :             return;

	jmp	SHORT $LN5@Assign_unl
$LN2@Assign_unl:

; 1164 :         }
; 1165 : 
; 1166 :         if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Assign_unl

; 1167 :             _Adopt_unlocked(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1168 :         } else { // becoming invalid, disown current parent

	jmp	SHORT $LN5@Assign_unl
$LN3@Assign_unl:

; 1169 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN5@Assign_unl:

; 1170 :         }
; 1171 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Assign_unlocked@_Iterator_base12@std@@AAEXABU12@@Z ENDP ; std::_Iterator_base12::_Assign_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1150 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1151 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1152 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1130 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1131 : #if _HAS_CXX20
; 1132 :         if (_STD is_constant_evaluated()) {
; 1133 :             _Adopt_unlocked(_Parent);
; 1134 :         } else
; 1135 : #endif // _HAS_CXX20
; 1136 :         {
; 1137 :             _Adopt_locked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked

; 1138 :         }
; 1139 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1119 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1120 : #if _HAS_CXX20
; 1121 :         if (_STD is_constant_evaluated()) {
; 1122 :             _Orphan_me_unlocked_v3();
; 1123 :         } else
; 1124 : #endif // _HAS_CXX20
; 1125 :         {
; 1126 :             _Orphan_me_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3

; 1127 :         }
; 1128 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1102 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1104 : #if _HAS_CXX20
; 1105 :         if (_STD is_constant_evaluated()) {
; 1106 :             _Assign_unlocked(_Right);
; 1107 :         } else
; 1108 : #endif // _HAS_CXX20
; 1109 :         {
; 1110 :             _Assign_locked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_locked@_Iterator_base12@std@@AAEXABU12@@Z ; std::_Iterator_base12::_Assign_locked

; 1111 :         }
; 1112 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1113 :         _Myproxy = _Right._Myproxy;
; 1114 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1115 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1116 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1098 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1101 : 
; 1102 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1103 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1104 : #if _HAS_CXX20
; 1105 :         if (_STD is_constant_evaluated()) {
; 1106 :             _Assign_unlocked(_Right);
; 1107 :         } else
; 1108 : #endif // _HAS_CXX20
; 1109 :         {
; 1110 :             _Assign_locked(_Right);
; 1111 :         }
; 1112 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1113 :         _Myproxy = _Right._Myproxy;
; 1114 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1115 :         return *this;
; 1116 :     }
; 1117 : 
; 1118 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1119 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1120 : #if _HAS_CXX20
; 1121 :         if (_STD is_constant_evaluated()) {
; 1122 :             _Orphan_me_unlocked_v3();
; 1123 :         } else
; 1124 : #endif // _HAS_CXX20
; 1125 :         {
; 1126 :             _Orphan_me_locked_v3();
; 1127 :         }
; 1128 :     }
; 1129 : 
; 1130 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1131 : #if _HAS_CXX20
; 1132 :         if (_STD is_constant_evaluated()) {
; 1133 :             _Adopt_unlocked(_Parent);
; 1134 :         } else
; 1135 : #endif // _HAS_CXX20
; 1136 :         {
; 1137 :             _Adopt_locked(_Parent);
; 1138 :         }
; 1139 :     }
; 1140 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1141 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1142 :         if (_Parent) { // have a parent, do adoption
; 1143 :             _Myproxy = _Parent->_Myproxy;
; 1144 :         } else { // no future parent, just disown current parent
; 1145 :             _Myproxy = nullptr;
; 1146 :         }
; 1147 :     }
; 1148 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1149 : 
; 1150 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1151 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1152 :     }
; 1153 : 
; 1154 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1155 : 
; 1156 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1157 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1099 :         *this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1100 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1096 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1097 : 
; 1098 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1099 :         *this = _Right;
; 1100 :     }
; 1101 : 
; 1102 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1103 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1104 : #if _HAS_CXX20
; 1105 :         if (_STD is_constant_evaluated()) {
; 1106 :             _Assign_unlocked(_Right);
; 1107 :         } else
; 1108 : #endif // _HAS_CXX20
; 1109 :         {
; 1110 :             _Assign_locked(_Right);
; 1111 :         }
; 1112 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1113 :         _Myproxy = _Right._Myproxy;
; 1114 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1115 :         return *this;
; 1116 :     }
; 1117 : 
; 1118 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1119 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1120 : #if _HAS_CXX20
; 1121 :         if (_STD is_constant_evaluated()) {
; 1122 :             _Orphan_me_unlocked_v3();
; 1123 :         } else
; 1124 : #endif // _HAS_CXX20
; 1125 :         {
; 1126 :             _Orphan_me_locked_v3();
; 1127 :         }
; 1128 :     }
; 1129 : 
; 1130 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1131 : #if _HAS_CXX20
; 1132 :         if (_STD is_constant_evaluated()) {
; 1133 :             _Adopt_unlocked(_Parent);
; 1134 :         } else
; 1135 : #endif // _HAS_CXX20
; 1136 :         {
; 1137 :             _Adopt_locked(_Parent);
; 1138 :         }
; 1139 :     }
; 1140 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1141 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1142 :         if (_Parent) { // have a parent, do adoption
; 1143 :             _Myproxy = _Parent->_Myproxy;
; 1144 :         } else { // no future parent, just disown current parent
; 1145 :             _Myproxy = nullptr;
; 1146 :         }
; 1147 :     }
; 1148 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1149 : 
; 1150 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1151 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1152 :     }
; 1153 : 
; 1154 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1155 : 
; 1156 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1157 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1096 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1083 :     void _Orphan_all_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1084 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1085 :         _Orphan_all_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1086 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_all:
	DD	1
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_all
$LN3@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1224 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1225 :     if (!_Myproxy) { // no proxy, already done

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Orphan_all

; 1226 :         return;

	jmp	SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1227 :     }
; 1228 : 
; 1229 :     // proxy allocated, drain it
; 1230 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 1231 :         _Pnext->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0

; 1232 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1233 :     _Myproxy->_Myfirstiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0
$LN6@Orphan_all:

; 1234 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1236 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1237 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1238 : #if _HAS_CXX20
; 1239 :     if (_STD is_constant_evaluated()) {
; 1240 :         _Orphan_all_unlocked_v3();
; 1241 :     } else
; 1242 : #endif // _HAS_CXX20
; 1243 :     {
; 1244 :         _Orphan_all_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1245 :     }
; 1246 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1247 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1052 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1053 : 
; 1054 :     _Container_base12(const _Container_base12&) = delete;
; 1055 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1056 : 
; 1057 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1058 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1059 : 
; 1060 :     template <class _Alloc>
; 1061 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1062 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1063 :         _Construct_in_place(*_New_proxy, this);
; 1064 :         _Myproxy            = _New_proxy;
; 1065 :         _New_proxy->_Mycont = this;
; 1066 :     }
; 1067 : 
; 1068 :     template <class _Alloc>
; 1069 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1070 :         // pre: no iterators refer to the existing proxy
; 1071 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1072 :         _Construct_in_place(*_New_proxy, this);
; 1073 :         _New_proxy->_Mycont = this;
; 1074 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1075 :     }
; 1076 : 
; 1077 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1052 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1044 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1045 : 
; 1046 :     const _Container_base12* _Mycont       = nullptr;
; 1047 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1044 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 147  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 148  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 149  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 150  : 
; 151  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 152  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 153  : 
; 154  :     // If the following asserts, it likely means that we are performing
; 155  :     // an aligned delete on memory coming from an unaligned allocation.
; 156  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	156					; 0000009cH
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	156					; 0000009cH
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 157  : 
; 158  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 159  :     // in range [_Min_back_shift, _Non_user_size]
; 160  : #ifdef _DEBUG
; 161  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 162  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 163  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 164  : #endif // _DEBUG
; 165  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 166  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	166					; 000000a6H
	push	OFFSET ??_C@_0GC@GFIHGGPN@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	166					; 000000a6H
	push	OFFSET ??_C@_1ME@KDCJLOP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 167  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 168  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 79   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 80   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_rep.cpp
_TEXT	SEGMENT
?disable_super_deprecation@luabind@@YAXXZ PROC		; luabind::disable_super_deprecation

; 204  : {

	push	ebp
	mov	ebp, esp

; 205  :     super_deprecation_disabled = true;

	mov	BYTE PTR ?super_deprecation_disabled@?A0xe7459c65@@3_NA, 1 ; `anonymous namespace'::super_deprecation_disabled

; 206  : }

	pop	ebp
	ret	0
?disable_super_deprecation@luabind@@YAXXZ ENDP		; luabind::disable_super_deprecation
_TEXT	ENDS
END
