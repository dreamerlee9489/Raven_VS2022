; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\exception_handler.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG41658 DB	': ''', 00H
$SG41659 DB	'''', 00H
	ORG $+2
$SG41679 DB	'std::logic_error', 00H
	ORG $+3
$SG41680 DB	'std::runtime_error', 00H
	ORG $+1
$SG41681 DB	'std::exception', 00H
	ORG $+1
$SG41683 DB	'c-string', 00H
	ORG $+3
$SG41684 DB	'Unknown C++ exception', 00H
	ORG $+2
$SG44388 DB	'invalid argument', 00H
	ORG $+3
$SG44389 DB	'%s', 00H
	ORG $+1
$SG44392 DB	00H, 00H
	ORG $+2
$SG44390 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.34.31933\include\xmemory', 00H
	ORG $+6
$SG44391 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG44393 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
PUBLIC	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
PUBLIC	?try_next@exception_handler_base@detail@luabind@@QBEXPAUlua_State@@@Z ; luabind::detail::exception_handler_base::try_next
PUBLIC	?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::handle_exception_aux
PUBLIC	?register_exception_handler@detail@luabind@@YAXPAUexception_handler_base@12@@Z ; luabind::detail::register_exception_handler
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R0?AVerror@luabind@@@8			; luabind::error `RTTI Type Descriptor'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_concat:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init
	ALIGN	4

?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init_if
	ALIGN	4

?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A DD 01H DUP (?) ; luabind::detail::`anonymous namespace'::handler_chain
_BSS	ENDS
CRT$XCU	SEGMENT
?in_place_init$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
data$r	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVerror@luabind@@@8
data$r	SEGMENT
??_R0?AVerror@luabind@@@8 DD FLAT:??_7type_info@@6B@	; luabind::error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror@luabind@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z
	DD	09H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z DD 00H
	DD	00H
	DD	01H
	DD	06H
	DD	FLAT:__catchsym$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$7
__ehfuncinfo$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$7 DD 09H
	DD	FLAT:??_R0?AVerror@luabind@@@8
	DD	00H
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$0
	DD	09H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$1
	DD	09H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$2
	DD	09H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$3
	DD	01H
	DD	FLAT:??_R0PAD@8
	DD	0ffffffc4H
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$4
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
?in_place_init_if$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init_if@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init_if$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\exception_handler.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
_exception$ = 12					; size = 4
_what$ = 16						; size = 4
?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z PROC ; luabind::detail::`anonymous namespace'::push_exception_string

; 21   :   {

	push	ebp
	mov	ebp, esp

; 22   :       lua_pushstring(L, exception);

	mov	eax, DWORD PTR _exception$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 23   :       lua_pushstring(L, ": '");

	push	OFFSET $SG41658
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 24   :       lua_pushstring(L, what);

	mov	eax, DWORD PTR _what$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 25   :       lua_pushstring(L, "'");

	push	OFFSET $SG41659
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 26   :       lua_concat(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_concat
	add	esp, 8

; 27   :   }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z ENDP ; luabind::detail::`anonymous namespace'::push_exception_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\exception_handler.cpp
_TEXT	SEGMENT
_p$1 = -4						; size = 4
_handler$ = 8						; size = 4
?register_exception_handler@detail@luabind@@YAXPAUexception_handler_base@12@@Z PROC ; luabind::detail::register_exception_handler

; 72   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 73   :     if (!handler_chain) handler_chain = handler;

	cmp	DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A, 0 ; luabind::detail::`anonymous namespace'::handler_chain
	jne	SHORT $LN5@register_e
	mov	eax, DWORD PTR _handler$[ebp]
	mov	DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A, eax ; luabind::detail::`anonymous namespace'::handler_chain
	jmp	SHORT $LN1@register_e
$LN5@register_e:

; 74   :     else
; 75   :     {
; 76   :         exception_handler_base* p = handler_chain;

	mov	ecx, DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A ; luabind::detail::`anonymous namespace'::handler_chain
	mov	DWORD PTR _p$1[ebp], ecx
	jmp	SHORT $LN4@register_e
$LN2@register_e:

; 77   : 
; 78   :         for (; p->next; p = p->next);

	mov	edx, DWORD PTR _p$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _p$1[ebp], eax
$LN4@register_e:
	mov	ecx, DWORD PTR _p$1[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@register_e
	jmp	SHORT $LN2@register_e
$LN3@register_e:

; 79   : 
; 80   :         handler->next = 0;

	mov	edx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [edx+4], 0

; 81   :         p->next = handler;

	mov	eax, DWORD PTR _p$1[ebp]
	mov	ecx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@register_e:

; 82   :     }
; 83   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?register_exception_handler@detail@luabind@@YAXPAUexception_handler_base@12@@Z ENDP ; luabind::detail::register_exception_handler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\exception_handler.cpp
_TEXT	SEGMENT
_str$2 = -60						; size = 4
_e$3 = -48						; size = 4
_e$4 = -36						; size = 4
_e$5 = -24						; size = 4
__$EHRec$ = -16						; size = 16
_L$ = 8							; size = 4
?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z PROC ; luabind::detail::handle_exception_aux

; 39   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 40   :     try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 41   :     {
; 42   :         if (handler_chain)

	cmp	DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A, 0 ; luabind::detail::`anonymous namespace'::handler_chain
	je	SHORT $LN3@handle_exc

; 43   :             handler_chain->handle(L);

	mov	esi, esp
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A ; luabind::detail::`anonymous namespace'::handler_chain
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?handler_chain@?A0xda7b1ab8@detail@luabind@@3PAUexception_handler_base@23@A ; luabind::detail::`anonymous namespace'::handler_chain
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@handle_exc
$LN3@handle_exc:

; 44   :         else
; 45   :             throw;

	push	0
	push	0
	call	__CxxThrowException@8
$LN4@handle_exc:

; 46   :     }

	jmp	$LN6@handle_exc
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$0:

; 47   :     catch (error const&)
; 48   :     {}

	mov	eax, $LN14@handle_exc
	ret	0
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$1:

; 49   :     catch (std::logic_error const& e)
; 50   :     {
; 51   :         push_exception_string(L, "std::logic_error", e.what());

	mov	esi, esp
	mov	ecx, DWORD PTR _e$5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$5[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG41679
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z ; luabind::detail::`anonymous namespace'::push_exception_string
	add	esp, 12					; 0000000cH

; 52   :     }

	mov	eax, $LN16@handle_exc
	ret	0
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$2:

; 53   :     catch (std::runtime_error const& e)
; 54   :     {
; 55   :         push_exception_string(L, "std::runtime_error", e.what());

	mov	esi, esp
	mov	edx, DWORD PTR _e$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$4[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG41680
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z ; luabind::detail::`anonymous namespace'::push_exception_string
	add	esp, 12					; 0000000cH

; 56   :     }

	mov	eax, $LN18@handle_exc
	ret	0
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$3:

; 57   :     catch (std::exception const& e)
; 58   :     {
; 59   :         push_exception_string(L, "std::exception", e.what());

	mov	esi, esp
	mov	ecx, DWORD PTR _e$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG41681
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z ; luabind::detail::`anonymous namespace'::push_exception_string
	add	esp, 12					; 0000000cH

; 60   :     }

	mov	eax, $LN20@handle_exc
	ret	0
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$4:

; 61   :     catch (char const* str)
; 62   :     {
; 63   :         push_exception_string(L, "c-string", str);

	mov	edx, DWORD PTR _str$2[ebp]
	push	edx
	push	OFFSET $SG41683
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?push_exception_string@?A0xda7b1ab8@detail@luabind@@YAXPAUlua_State@@PBD1@Z ; luabind::detail::`anonymous namespace'::push_exception_string
	add	esp, 12					; 0000000cH

; 64   :     }

	mov	eax, $LN22@handle_exc
	ret	0
__catch$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z$5:

; 65   :     catch (...)
; 66   :     {
; 67   :         lua_pushstring(L, "Unknown C++ exception");

	push	OFFSET $SG41684
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   :     }

	mov	eax, $LN24@handle_exc
	ret	0
$LN6@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN23@handle_exc
$LN24@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN5@handle_exc
$LN23@handle_exc:
	jmp	SHORT $LN21@handle_exc
$LN22@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 64   :     }

	jmp	SHORT $LN5@handle_exc
$LN21@handle_exc:
	jmp	SHORT $LN19@handle_exc
$LN20@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 60   :     }

	jmp	SHORT $LN5@handle_exc
$LN19@handle_exc:
	jmp	SHORT $LN17@handle_exc
$LN18@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 56   :     }

	jmp	SHORT $LN5@handle_exc
$LN17@handle_exc:
	jmp	SHORT $LN15@handle_exc
$LN16@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 52   :     }

	jmp	SHORT $LN5@handle_exc
$LN15@handle_exc:
	jmp	SHORT $LN5@handle_exc
$LN14@handle_exc:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN5@handle_exc:

; 69   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@handle_exc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@handle_exc:
	DD	4
	DD	$LN30@handle_exc
$LN30@handle_exc:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN25@handle_exc
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN26@handle_exc
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN27@handle_exc
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN28@handle_exc
$LN28@handle_exc:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN27@handle_exc:
	DB	101					; 00000065H
	DB	0
$LN26@handle_exc:
	DB	101					; 00000065H
	DB	0
$LN25@handle_exc:
	DB	101					; 00000065H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?handle_exception_aux@detail@luabind@@YAXPAUlua_State@@@Z ENDP ; luabind::detail::handle_exception_aux
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\exception_handler.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?try_next@exception_handler_base@detail@luabind@@QBEXPAUlua_State@@@Z PROC ; luabind::detail::exception_handler_base::try_next
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 32   :     if (next)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@try_next

; 33   :         next->handle(L);

	mov	esi, esp
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@try_next
$LN2@try_next:

; 34   :     else
; 35   :         throw;

	push	0
	push	0
	call	__CxxThrowException@8
$LN4@try_next:

; 36   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?try_next@exception_handler_base@detail@luabind@@QBEXPAUlua_State@@@Z ENDP ; luabind::detail::exception_handler_base::try_next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init_if@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init_if@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init_if'', COMDAT

; 106  : const in_place_init_if_t in_place_init_if ((in_place_init_if_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B
	call	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init_if@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init_if''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t, COMDAT
; _this$ = ecx

; 104  :   explicit in_place_init_if_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init'', COMDAT

; 98   : const in_place_init_t in_place_init ((in_place_init_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B
	call	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_t::in_place_init_t, COMDAT
; _this$ = ecx

; 96   :   explicit in_place_init_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_t::in_place_init_t
_TEXT	ENDS
END
