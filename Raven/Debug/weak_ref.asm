; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31629.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\weak_ref.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG23751 DB	'__mode', 00H
	ORG $+1
$SG23752 DB	'v', 00H
	ORG $+2
$SG23836 DB	'L', 00H, 00H, 00H
$SG23823 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG23824 DB	'm', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	00H, 00H
	ORG $+2
$SG23833 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG23834 DB	'm', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	00H, 00H
	ORG $+2
$SG23835 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG23842 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG23843 DB	'm', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	??0weak_ref@luabind@@QAE@XZ			; luabind::weak_ref::weak_ref
PUBLIC	??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z	; luabind::weak_ref::weak_ref
PUBLIC	??0weak_ref@luabind@@QAE@ABV01@@Z		; luabind::weak_ref::weak_ref
PUBLIC	??1weak_ref@luabind@@QAE@XZ			; luabind::weak_ref::~weak_ref
PUBLIC	??4weak_ref@luabind@@QAEAAV01@ABV01@@Z		; luabind::weak_ref::operator=
PUBLIC	?swap@weak_ref@luabind@@QAEXAAV12@@Z		; luabind::weak_ref::swap
PUBLIC	?id@weak_ref@luabind@@QBEHXZ			; luabind::weak_ref::id
PUBLIC	?state@weak_ref@luabind@@QBEPAUlua_State@@XZ	; luabind::weak_ref::state
PUBLIC	?get@weak_ref@luabind@@QBEXPAUlua_State@@@Z	; luabind::weak_ref::get
PUBLIC	?get_weak_table@luabind@@YAXPAUlua_State@@@Z	; luabind::get_weak_table
PUBLIC	??0impl@weak_ref@luabind@@QAE@PAUlua_State@@0H@Z ; luabind::weak_ref::impl::impl
PUBLIC	??1impl@weak_ref@luabind@@QAE@XZ		; luabind::weak_ref::impl::~impl
PUBLIC	??_Gimpl@weak_ref@luabind@@QAEPAXI@Z		; luabind::weak_ref::impl::`scalar deleting destructor'
PUBLIC	??$swap@PAUimpl@weak_ref@luabind@@$0A@@std@@YAXAAPAUimpl@weak_ref@luabind@@0@Z ; std::swap<luabind::weak_ref::impl *,0>
PUBLIC	??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z ; std::move<luabind::weak_ref::impl * &>
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_lua_settop:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_remove:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_pushlstring:PROC
EXTRN	_lua_pushlightuserdata:PROC
EXTRN	_lua_rawget:PROC
EXTRN	_lua_rawgeti:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_luaL_ref:PROC
EXTRN	_luaL_unref:PROC
EXTRN	__wassert:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?weak_table_tag@?A0xa2bc1e4e@luabind@@3HA DD 01H DUP (?) ; luabind::`anonymous namespace'::weak_table_tag
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1impl@weak_ref@luabind@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z$0
	DD	01dH
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z$0
__unwindtable$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z$0
__ehfuncinfo$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\type_traits
;	COMDAT ??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z PROC ; std::move<luabind::weak_ref::impl * &>, COMDAT

; 1422 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1423 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1424 : }

	pop	ebp
	ret	0
??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z ENDP ; std::move<luabind::weak_ref::impl * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.33.31629\include\utility
;	COMDAT ??$swap@PAUimpl@weak_ref@luabind@@$0A@@std@@YAXAAPAUimpl@weak_ref@luabind@@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUimpl@weak_ref@luabind@@$0A@@std@@YAXAAPAUimpl@weak_ref@luabind@@0@Z PROC ; std::swap<luabind::weak_ref::impl *,0>, COMDAT

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z ; std::move<luabind::weak_ref::impl * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z ; std::move<luabind::weak_ref::impl * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 102  :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAPAUimpl@weak_ref@luabind@@@std@@YA$$QAPAUimpl@weak_ref@luabind@@AAPAU123@@Z ; std::move<luabind::weak_ref::impl * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@PAUimpl@weak_ref@luabind@@$0A@@std@@YAXAAPAUimpl@weak_ref@luabind@@0@Z ENDP ; std::swap<luabind::weak_ref::impl *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gimpl@weak_ref@luabind@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gimpl@weak_ref@luabind@@QAEPAXI@Z PROC		; luabind::weak_ref::impl::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1impl@weak_ref@luabind@@QAE@XZ	; luabind::weak_ref::impl::~impl
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gimpl@weak_ref@luabind@@QAEPAXI@Z ENDP		; luabind::weak_ref::impl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
;	COMDAT ??1impl@weak_ref@luabind@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1impl@weak_ref@luabind@@QAE@XZ PROC			; luabind::weak_ref::impl::~impl, COMDAT
; _this$ = ecx

; 84   :         {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1impl@weak_ref@luabind@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 85   :             get_weak_table(state);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?get_weak_table@luabind@@YAXPAUlua_State@@@Z ; luabind::get_weak_table
	add	esp, 4

; 86   :             luaL_unref(state, -1, ref);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_luaL_unref
	add	esp, 12					; 0000000cH

; 87   :             lua_pop(state, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 88   :         }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1impl@weak_ref@luabind@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1impl@weak_ref@luabind@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1impl@weak_ref@luabind@@QAE@XZ ENDP			; luabind::weak_ref::impl::~impl
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
;	COMDAT ??0impl@weak_ref@luabind@@QAE@PAUlua_State@@0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_main$ = 8						; size = 4
_s$ = 12						; size = 4
_index$ = 16						; size = 4
??0impl@weak_ref@luabind@@QAE@PAUlua_State@@0H@Z PROC	; luabind::weak_ref::impl::impl, COMDAT
; _this$ = ecx

; 76   :         {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 73   :             : count(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 74   :             , state(main)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _main$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 75   :             , ref(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 77   :             get_weak_table(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?get_weak_table@luabind@@YAXPAUlua_State@@@Z ; luabind::get_weak_table
	add	esp, 4

; 78   :             lua_pushvalue(s, index);

	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 79   :             ref = luaL_ref(s, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_luaL_ref
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 80   :             lua_pop(s, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 81   :         }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0impl@weak_ref@luabind@@QAE@PAUlua_State@@0H@Z ENDP	; luabind::weak_ref::impl::impl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?get_weak_table@luabind@@YAXPAUlua_State@@@Z PROC	; luabind::get_weak_table

; 43   : {

	push	ebp
	mov	ebp, esp

; 44   :     lua_pushlightuserdata(L, &weak_table_tag);

	push	OFFSET ?weak_table_tag@?A0xa2bc1e4e@luabind@@3HA ; luabind::`anonymous namespace'::weak_table_tag
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 45   :     lua_rawget(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 46   : 
; 47   :     if (lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN1@get_weak_t

; 48   :     {
; 49   :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 50   :         lua_newtable(L);

	push	0
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 51   :         // metatable
; 52   :         lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 53   :         lua_pushliteral(L, "__mode");

	push	6
	push	OFFSET $SG23751
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 54   :         lua_pushliteral(L, "v");

	push	1
	push	OFFSET $SG23752
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushlstring
	add	esp, 12					; 0000000cH

; 55   :         lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 56   :         // set metatable
; 57   :         lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setmetatable
	add	esp, 8

; 58   : 
; 59   :         lua_pushlightuserdata(L, &weak_table_tag);

	push	OFFSET ?weak_table_tag@?A0xa2bc1e4e@luabind@@3HA ; luabind::`anonymous namespace'::weak_table_tag
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushlightuserdata
	add	esp, 8

; 60   :         lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 61   :         lua_rawset(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8
$LN1@get_weak_t:

; 62   :     }
; 63   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?get_weak_table@luabind@@YAXPAUlua_State@@@Z ENDP	; luabind::get_weak_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_L$ = 8							; size = 4
?get@weak_ref@luabind@@QBEXPAUlua_State@@@Z PROC	; luabind::weak_ref::get
; _this$ = ecx

; 142  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 143  :         assert(m_impl);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@get
	push	143					; 0000008fH
	push	OFFSET $SG23833
	push	OFFSET $SG23834
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@get:

; 144  : 		assert(L);

	cmp	DWORD PTR _L$[ebp], 0
	jne	SHORT $LN4@get
	push	144					; 00000090H
	push	OFFSET $SG23835
	push	OFFSET $SG23836
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@get:

; 145  :         get_weak_table(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?get_weak_table@luabind@@YAXPAUlua_State@@@Z ; luabind::get_weak_table
	add	esp, 4

; 146  :         lua_rawgeti(L, -1, m_impl->ref);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawgeti
	add	esp, 12					; 0000000cH

; 147  :         lua_remove(L, -2);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8

; 148  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get@weak_ref@luabind@@QBEXPAUlua_State@@@Z ENDP	; luabind::weak_ref::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?state@weak_ref@luabind@@QBEPAUlua_State@@XZ PROC	; luabind::weak_ref::state
; _this$ = ecx

; 151  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 152  :         assert(m_impl);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@state
	push	152					; 00000098H
	push	OFFSET $SG23842
	push	OFFSET $SG23843
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@state:

; 153  :         return m_impl->state;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]

; 154  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?state@weak_ref@luabind@@QBEPAUlua_State@@XZ ENDP	; luabind::weak_ref::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?id@weak_ref@luabind@@QBEHXZ PROC			; luabind::weak_ref::id
; _this$ = ecx

; 132  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 133  :         assert(m_impl);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@id
	push	133					; 00000085H
	push	OFFSET $SG23823
	push	OFFSET $SG23824
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@id:

; 134  : 		return m_impl->ref;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+8]

; 135  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?id@weak_ref@luabind@@QBEHXZ ENDP			; luabind::weak_ref::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?swap@weak_ref@luabind@@QAEXAAV12@@Z PROC		; luabind::weak_ref::swap
; _this$ = ecx

; 127  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 128  :         std::swap(m_impl, other.m_impl);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$swap@PAUimpl@weak_ref@luabind@@$0A@@std@@YAXAAPAUimpl@weak_ref@luabind@@0@Z ; std::swap<luabind::weak_ref::impl *,0>
	add	esp, 8

; 129  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@weak_ref@luabind@@QAEXAAV12@@Z ENDP		; luabind::weak_ref::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
tv72 = -28						; size = 4
tv73 = -24						; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
??4weak_ref@luabind@@QAEAAV01@ABV01@@Z PROC		; luabind::weak_ref::operator=
; _this$ = ecx

; 121  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 122  :         weak_ref(other).swap(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0weak_ref@luabind@@QAE@ABV01@@Z	; luabind::weak_ref::weak_ref
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv72[ebp]
	call	?swap@weak_ref@luabind@@QAEXAAV12@@Z	; luabind::weak_ref::swap
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1weak_ref@luabind@@QAE@XZ		; luabind::weak_ref::~weak_ref

; 123  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 124  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1weak_ref@luabind@@QAE@XZ		; luabind::weak_ref::~weak_ref
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4weak_ref@luabind@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4weak_ref@luabind@@QAEAAV01@ABV01@@Z ENDP		; luabind::weak_ref::operator=
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
tv77 = -16						; size = 4
tv70 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1weak_ref@luabind@@QAE@XZ PROC			; luabind::weak_ref::~weak_ref
; _this$ = ecx

; 113  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 114  :         if (m_impl && --m_impl->count == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@weak_ref
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx], eax
	cmp	DWORD PTR tv70[ebp], 0
	jne	SHORT $LN3@weak_ref

; 115  :         {
; 116  :             delete m_impl;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@weak_ref
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_Gimpl@weak_ref@luabind@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN3@weak_ref
$LN4@weak_ref:
	mov	DWORD PTR tv77[ebp], 0
$LN3@weak_ref:

; 117  :         }
; 118  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1weak_ref@luabind@@QAE@XZ ENDP			; luabind::weak_ref::~weak_ref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0weak_ref@luabind@@QAE@ABV01@@Z PROC			; luabind::weak_ref::weak_ref
; _this$ = ecx

; 108  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  :         : m_impl(other.m_impl)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 109  :         if (m_impl) ++m_impl->count;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@weak_ref
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
$LN1@weak_ref:

; 110  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0weak_ref@luabind@@QAE@ABV01@@Z ENDP			; luabind::weak_ref::weak_ref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_main$ = 8						; size = 4
_L$ = 12						; size = 4
_index$ = 16						; size = 4
??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z PROC	; luabind::weak_ref::weak_ref
; _this$ = ecx

; 102  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 101  :         : m_impl(new impl(main, L, index))

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@weak_ref
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _main$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0impl@weak_ref@luabind@@QAE@PAUlua_State@@0H@Z ; luabind::weak_ref::impl::impl
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@weak_ref
$LN3@weak_ref:
	mov	DWORD PTR tv79[ebp], 0
$LN4@weak_ref:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx

; 103  :         m_impl->count = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 1

; 104  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z$0:
	push	12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0weak_ref@luabind@@QAE@PAUlua_State@@0H@Z ENDP	; luabind::weak_ref::weak_ref
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\weak_ref.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0weak_ref@luabind@@QAE@XZ PROC			; luabind::weak_ref::weak_ref
; _this$ = ecx

; 97   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :         : m_impl(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 98   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0weak_ref@luabind@@QAE@XZ ENDP			; luabind::weak_ref::weak_ref
_TEXT	ENDS
END
