; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32215.0 

	TITLE	D:\__Repos\__MyRepos\Raven_VS2022\Raven\Debug\class_registry.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG100142 DB	'__luabind_classrep', 00H
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
$SG100143 DB	'__gc', 00H
?yield@luabind@@3U?$policy_cons@Uyield_policy@detail@luabind@@Unull_type@23@@detail@1@B	ORG $+1 ; luabind::yield
	ORG $+2
$SG100144 DB	'__call', 00H
	ORG $+1
$SG100145 DB	'__index', 00H
$SG100146 DB	'__newindex', 00H
	ORG $+1
$SG100150 DB	'__luabind_classrep', 00H
	ORG $+1
$SG100151 DB	'__gc', 00H
	ORG $+3
$SG100152 DB	'__newindex', 00H
	ORG $+1
$SG100153 DB	'__call', 00H
	ORG $+1
$SG100154 DB	'__index', 00H
$SG100166 DB	'__luabind_classes', 00H
	ORG $+2
$SG100428 DB	'you are trying to register a class twice', 00H
	ORG $+3
$SG100429 DB	'D', 00H, ':', 00H, '\', 00H, '_', 00H, '_', 00H, 'R', 00H
	DB	'e', 00H, 'p', 00H, 'o', 00H, 's', 00H, '\', 00H, '_', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'o', 00H
	DB	's', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o'
	DB	00H, 'n', 00H, '\', 00H, 'l', 00H, 'u', 00H, 'a', 00H, 'b', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, '-', 00H, '0', 00H, '.', 00H, '9'
	DB	00H, '.', 00H, '1', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	'\', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'y', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
$SG106310 DB	'invalid argument', 00H
	ORG $+3
$SG100430 DB	'(', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, 'e', 00H, 's', 00H, '.', 00H, 'f', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, '(', 00H, 'i', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'm'
	DB	00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	'e', 00H, 's', 00H, '.', 00H, 'e', 00H, 'n', 00H, 'd', 00H, '('
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'r', 00H, 'y', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 't', 00H, 'w', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, '"', 00H, 00H, 00H
$SG106311 DB	'%s', 00H
	ORG $+1
$SG106314 DB	00H, 00H
	ORG $+2
$SG106312 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.35.32215\include\xmemory', 00H
	ORG $+6
$SG106313 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2'
	DB	00H, '2', 00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG106315 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
PUBLIC	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
PUBLIC	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??0?$tuple@$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?before@type_info@@QBE_NABV1@@Z			; type_info::before
PUBLIC	??Mtype_id@luabind@@QBE_NABV01@@Z		; luabind::type_id::operator<
PUBLIC	??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z ; luabind::detail::class_registry::class_registry
PUBLIC	?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ; luabind::detail::class_registry::get_registry
PUBLIC	?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z ; luabind::detail::class_registry::add_class
PUBLIC	?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z ; luabind::detail::class_registry::find_class
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::max_size
PUBLIC	??0?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@ABU?$less@Vtype_id@luabind@@@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::~_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::max_size
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
PUBLIC	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Rrotate
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Insert_node
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Get_first
PUBLIC	??0?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
PUBLIC	??A?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAEAAPAVclass_rep@detail@luabind@@ABVtype_id@4@@Z ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::operator[]
PUBLIC	??1?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::~map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
PUBLIC	??_Gclass_rep@detail@luabind@@QAEPAXI@Z		; luabind::detail::class_rep::`scalar deleting destructor'
PUBLIC	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
PUBLIC	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
PUBLIC	?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::garbage_collector_s<luabind::detail::class_rep>::apply
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Try_emplace@ABVtype_id@luabind@@$$V@?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@1@ABVtype_id@luabind@@@Z ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Try_emplace<luabind::type_id const &>
PUBLIC	??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find<luabind::type_id>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
PUBLIC	??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
PUBLIC	??$?0ABU?$less@Vtype_id@luabind@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@Vtype_id@luabind@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1><std::less<luabind::type_id> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1><>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find_lower_bound<luabind::type_id>
PUBLIC	??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Lower_bound_duplicate<luabind::type_id>
PUBLIC	??$?0ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &,bool,0>
PUBLIC	??$forward_as_tuple@ABVtype_id@luabind@@@std@@YA?AV?$tuple@ABVtype_id@luabind@@@0@ABVtype_id@luabind@@@Z ; std::forward_as_tuple<luabind::type_id const &>
PUBLIC	??0?$tuple@ABVtype_id@luabind@@@std@@QAE@$$QAV01@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > ><std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$forward@ABU?$less@Vtype_id@luabind@@@std@@@std@@YAABU?$less@Vtype_id@luabind@@@0@ABU10@@Z ; std::forward<std::less<luabind::type_id> const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
PUBLIC	??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
PUBLIC	??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::destroy<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::nullptr_t>
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
PUBLIC	??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0>::_Kfn<luabind::type_id const ,luabind::detail::class_rep *>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><luabind::type_id const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ; std::forward<std::tuple<luabind::type_id const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$construct@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABVtype_id@luabind@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::construct<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * *>
PUBLIC	??$?0U_Exact_args_t@std@@ABVtype_id@luabind@@$$V$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@U_Exact_args_t@1@ABVtype_id@luabind@@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><std::_Exact_args_t,luabind::type_id const &,0>
PUBLIC	??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id const ,luabind::detail::class_rep *> *>
PUBLIC	??$?0ABVtype_id@luabind@@$$Z$$V@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@Z ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><luabind::type_id const &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABVtype_id@luabind@@@?$_Tuple_val@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ; std::_Tuple_val<luabind::type_id const &>::_Tuple_val<luabind::type_id const &><luabind::type_id const &>
PUBLIC	??$?0V?$tuple@ABVtype_id@luabind@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@AAV?$tuple@ABVtype_id@luabind@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><std::tuple<luabind::type_id const &>,std::tuple<>,0>
PUBLIC	??$move@AAV?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ; std::move<std::tuple<luabind::type_id const &> &>
PUBLIC	??$_Tuple_get@$0A@ABVtype_id@luabind@@@std@@YA$$QA_P$$QAV?$tuple@ABVtype_id@luabind@@@0@@Z ; std::_Tuple_get<0,luabind::type_id const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GD@PKIJFGH@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MG@EMNPDMPD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_touserdata:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_pushboolean:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_luaL_ref:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__wassert:PROC
EXTRN	___std_type_info_compare:PROC
EXTRN	??1class_rep@detail@luabind@@QAE@XZ:PROC	; luabind::detail::class_rep::~class_rep
EXTRN	?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z:PROC ; luabind::detail::class_rep::constructor_dispatcher
EXTRN	?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z:PROC ; luabind::detail::class_rep::lua_settable_dispatcher
EXTRN	?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z:PROC ; luabind::detail::class_rep::static_class_gettable
EXTRN	?push_instance_metatable@detail@luabind@@YAXPAUlua_State@@@Z:PROC ; luabind::detail::push_instance_metatable
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init
?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B DB 01H DUP (?) ; boost::optional_ns::in_place_init_if
_BSS	ENDS
CRT$XCU	SEGMENT
?in_place_init$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@EMNPDMPD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MG@EMNPDMPD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@PKIJFGH@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GD@PKIJFGH@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program Fi'
	DB	'les\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.3'
	DB	'5.32215\include\xutility', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'35.32215\include\xtree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'35.32215\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z$0
	DD	027H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z$0
	DD	016H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z$0
__unwindtable$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z$0
__ehfuncinfo$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?in_place_init_if$initializer$@optional_ns@boost@@3P6AXXZA DD FLAT:??__Ein_place_init_if@optional_ns@boost@@YAXXZ ; boost::optional_ns::in_place_init_if$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$_Tuple_get@$0A@ABVtype_id@luabind@@@std@@YA$$QA_P$$QAV?$tuple@ABVtype_id@luabind@@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$_Tuple_get@$0A@ABVtype_id@luabind@@@std@@YA$$QA_P$$QAV?$tuple@ABVtype_id@luabind@@@0@@Z PROC ; std::_Tuple_get<0,luabind::type_id const &>, COMDAT

; 768  : _NODISCARD constexpr auto&& _Tuple_get(tuple<_Types...>&& _Tuple) noexcept {

	push	ebp
	mov	ebp, esp

; 769  :     // used by pair's piecewise constructor
; 770  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 771  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 772  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

	mov	eax, DWORD PTR __Tuple$[ebp]
	mov	eax, DWORD PTR [eax]

; 773  : }

	pop	ebp
	ret	0
??$_Tuple_get@$0A@ABVtype_id@luabind@@@std@@YA$$QA_P$$QAV?$tuple@ABVtype_id@luabind@@@0@@Z ENDP ; std::_Tuple_get<0,luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z PROC ; std::move<std::tuple<luabind::type_id const &> &>, COMDAT

; 1437 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1438 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1439 : }

	pop	ebp
	ret	0
??$move@AAV?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ENDP ; std::move<std::tuple<luabind::type_id const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0V?$tuple@ABVtype_id@luabind@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@AAV?$tuple@ABVtype_id@luabind@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABVtype_id@luabind@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@AAV?$tuple@ABVtype_id@luabind@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><std::tuple<luabind::type_id const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AAV?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ; std::move<std::tuple<luabind::type_id const &> &>
	add	esp, 4
	push	eax
	call	??$_Tuple_get@$0A@ABVtype_id@luabind@@@std@@YA$$QA_P$$QAV?$tuple@ABVtype_id@luabind@@@0@@Z ; std::_Tuple_get<0,luabind::type_id const &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0V?$tuple@ABVtype_id@luabind@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@AAV?$tuple@ABVtype_id@luabind@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><std::tuple<luabind::type_id const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$?0ABVtype_id@luabind@@@?$_Tuple_val@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0ABVtype_id@luabind@@@?$_Tuple_val@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z PROC ; std::_Tuple_val<luabind::type_id const &>::_Tuple_val<luabind::type_id const &><luabind::type_id const &>, COMDAT
; _this$ = ecx

; 144  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0ABVtype_id@luabind@@@?$_Tuple_val@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ENDP ; std::_Tuple_val<luabind::type_id const &>::_Tuple_val<luabind::type_id const &><luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 199  :     constexpr tuple(_Tag) noexcept /* strengthened */ {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0ABVtype_id@luabind@@$$Z$$V@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABVtype_id@luabind@@$$Z$$V@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><luabind::type_id const &>, COMDAT
; _this$ = ecx

; 218  :         : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T1[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$tuple@ABVtype_id@luabind@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@AAV?$tuple@ABVtype_id@luabind@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><std::tuple<luabind::type_id const &>,std::tuple<>,0>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABVtype_id@luabind@@$$Z$$V@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@@Z PROC ; std::_Voidify_iter<std::pair<luabind::type_id const ,luabind::detail::class_rep *> *>, COMDAT

; 244  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 245  :     if constexpr (is_pointer_v<_Iter>) {
; 246  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 247  :     } else {
; 248  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 249  :     }
; 250  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@@Z ENDP ; std::_Voidify_iter<std::pair<luabind::type_id const ,luabind::detail::class_rep *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABVtype_id@luabind@@$$V$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@U_Exact_args_t@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABVtype_id@luabind@@$$V$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@U_Exact_args_t@1@ABVtype_id@luabind@@@Z PROC ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><std::_Exact_args_t,luabind::type_id const &,0>, COMDAT
; _this$ = ecx

; 239  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
	mov	ecx, DWORD PTR __This_arg$[ebp]
	push	ecx
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABVtype_id@luabind@@@?$_Tuple_val@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ; std::_Tuple_val<luabind::type_id const &>::_Tuple_val<luabind::type_id const &><luabind::type_id const &>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0U_Exact_args_t@std@@ABVtype_id@luabind@@$$V$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@U_Exact_args_t@1@ABVtype_id@luabind@@@Z ENDP ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><std::_Exact_args_t,luabind::type_id const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * *>, COMDAT

; 244  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 245  :     if constexpr (is_pointer_v<_Iter>) {
; 246  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 247  :     } else {
; 248  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 249  :     }
; 250  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT

; 380  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 381  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::destroy<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
	add	esp, 8

; 383  :         _Freenode0(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	add	esp, 8

; 384  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>, COMDAT

; 652  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 653  :     // assign _New_val to _Val, return previous _Val
; 654  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 655  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 656  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABVtype_id@luabind@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABVtype_id@luabind@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::construct<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAXPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@@Z ; std::_Voidify_iter<std::pair<luabind::type_id const ,luabind::detail::class_rep *> *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	push	ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _<_Args_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	push	ecx
	mov	esi, esp
	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ; std::forward<std::tuple<luabind::type_id const &> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@ABVtype_id@luabind@@@std@@QAE@$$QAV01@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &>
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??$?0ABVtype_id@luabind@@$$Z$$V@?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@Z ; std::pair<luabind::type_id const ,luabind::detail::class_rep *>::pair<luabind::type_id const ,luabind::detail::class_rep *><luabind::type_id const &>

; 681  :         }
; 682  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABVtype_id@luabind@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::construct<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z PROC ; std::forward<std::tuple<luabind::type_id const &> >, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ENDP ; std::forward<std::tuple<luabind::type_id const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z PROC ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><luabind::type_id const &,0>, COMDAT
; _this$ = ecx

; 277  :         : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __This_arg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@ABVtype_id@luabind@@$$V$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@U_Exact_args_t@1@ABVtype_id@luabind@@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><std::_Exact_args_t,luabind::type_id const &,0>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ENDP ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><luabind::type_id const &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\map
;	COMDAT ??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z PROC ; std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0>::_Kfn<luabind::type_id const ,luabind::detail::class_rep *>, COMDAT

; 67   :     static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp

; 68   :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 69   :     }

	pop	ebp
	ret	0
??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ENDP ; std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0>::_Kfn<luabind::type_id const ,luabind::detail::class_rep *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z PROC ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>, COMDAT

; 1137 :     noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1138 :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 1139 :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
	mov	BYTE PTR __Result$[ebp], al

; 1140 :     if (_Result) {

	movzx	edx, BYTE PTR __Result$[ebp]
	test	edx, edx
	je	SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1141 :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ; std::less<luabind::type_id>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1141					; 00000475H
	push	OFFSET ??_C@_0GD@PKIJFGH@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	push	0
	push	1141					; 00000475H
	push	OFFSET ??_C@_1MG@EMNPDMPD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
	xor	edx, edx
	jne	SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1142 :     }
; 1143 : 
; 1144 :     return _Result;

	movzx	eax, BYTE PTR __Result$[ebp]

; 1145 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ENDP ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 669  :         }
; 670  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 67   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 24
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::nullptr_t>, COMDAT

; 652  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 653  :     // assign _New_val to _Val, return previous _Val
; 654  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 655  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 656  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::destroy<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

	pop	ebp
	ret	0
??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::destroy<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z PROC ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z ENDP ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	ebp
	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 130  :     if (_Block_size <= _Bytes) {

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET $SG106310
	push	OFFSET $SG106311
	push	0
	push	135					; 00000087H
	push	OFFSET $SG106312
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	135					; 00000087H
	push	OFFSET $SG106313
	push	OFFSET $SG106314
	push	OFFSET $SG106315
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 143  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 244  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 245  :     if constexpr (is_pointer_v<_Iter>) {
; 246  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 247  :     } else {
; 248  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 249  :     }
; 250  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABU?$less@Vtype_id@luabind@@@std@@@std@@YAABU?$less@Vtype_id@luabind@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@Vtype_id@luabind@@@std@@@std@@YAABU?$less@Vtype_id@luabind@@@0@ABU10@@Z PROC ; std::forward<std::less<luabind::type_id> const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABU?$less@Vtype_id@luabind@@@std@@@std@@YAABU?$less@Vtype_id@luabind@@@0@ABU10@@Z ENDP ; std::forward<std::less<luabind::type_id> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT

; 371  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 372  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 373  :         _Destroy_in_place(_Ptr->_Left);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 374  :         _Destroy_in_place(_Ptr->_Parent);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 375  :         _Destroy_in_place(_Ptr->_Right);

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 8
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 376  :         allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 377  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	eax, DWORD PTR __Rootnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN4@Erase_tree

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	edx, DWORD PTR __Rootnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	lea	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	add	esp, 8

; 748  :         }

	jmp	SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 749  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
_<_Vals_1>$ = 20					; size = 4
_<_Vals_2>$ = 24					; size = 4
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > ><std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	mov	ecx, DWORD PTR _<_Vals_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _<_Vals_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABVtype_id@luabind@@@std@@@std@@YA$$QAV?$tuple@ABVtype_id@luabind@@@0@AAV10@@Z ; std::forward<std::tuple<luabind::type_id const &> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$construct@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABVtype_id@luabind@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::construct<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
	add	esp, 20					; 00000014H

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
	add	esp, 8

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
	add	esp, 8

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	edx, DWORD PTR __Myhead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * &>
	add	esp, 8

; 811  :         this->_Ptr->_Color = _Red;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 812  :         this->_Ptr->_Isnil = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+13], 0

; 813  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > ><std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 818  :     ~_Tree_temp_node() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 819  :         if (this->_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tree_temp_

; 820  :             _Destroy_in_place(this->_Ptr->_Left);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 821  :             _Destroy_in_place(this->_Ptr->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 822  :             _Destroy_in_place(this->_Ptr->_Right);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *>
	add	esp, 4

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@AAU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$destroy@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@QAU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::destroy<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >
	add	esp, 8
$LN1@Tree_temp_:

; 824  :         }
; 825  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 786  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Allocate

; 787  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 1015 :     _CONSTEXPR20 ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1016 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1017 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::deallocate
$LN3@Alloc_cons:

; 1018 :         }
; 1019 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1010 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1011 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1012 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1013 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1006 :     _NODISCARD _CONSTEXPR20 pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1007 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::nullptr_t>
	add	esp, 8

; 1008 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 1004 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 823  : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 824  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 825  : }

	pop	ebp
	ret	0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??0?$tuple@ABVtype_id@luabind@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$tuple@ABVtype_id@luabind@@@std@@QAE@$$QAV01@@Z PROC ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &>, COMDAT
; _this$ = ecx

; 288  :     tuple(tuple&&)      = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@ABVtype_id@luabind@@@std@@QAE@$$QAV01@@Z ENDP ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??$forward_as_tuple@ABVtype_id@luabind@@@std@@YA?AV?$tuple@ABVtype_id@luabind@@@0@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABVtype_id@luabind@@@std@@YA?AV?$tuple@ABVtype_id@luabind@@@0@ABVtype_id@luabind@@@Z PROC ; std::forward_as_tuple<luabind::type_id const &>, COMDAT

; 823  : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp

; 824  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABVtype_id@luabind@@$0A@@?$tuple@ABVtype_id@luabind@@@std@@QAE@ABVtype_id@luabind@@@Z ; std::tuple<luabind::type_id const &>::tuple<luabind::type_id const &><luabind::type_id const &,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 825  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$forward_as_tuple@ABVtype_id@luabind@@@std@@YA?AV?$tuple@ABVtype_id@luabind@@@0@ABVtype_id@luabind@@@Z ENDP ; std::forward_as_tuple<luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$?0ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 173  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Lower_bound_duplicate<luabind::type_id>, COMDAT
; _this$ = ecx

; 1604 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Bound$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	edx, DWORD PTR __Bound$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0>::_Kfn<luabind::type_id const ,luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
	movzx	eax, BYTE PTR tv78[ebp]

; 1606 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Lower_bound_duplicate<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
__Trynode$ = -32					; size = 4
__Result$ = -24						; size = 12
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find_lower_bound<luabind::type_id>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1610 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Result$[ebp], edx
	mov	DWORD PTR __Result$[ebp+4], 0
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Result$[ebp+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;

	mov	edx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx
$LN2@Find_lower:

; 1613 :         while (!_Trynode->_Isnil) {

	mov	eax, DWORD PTR __Trynode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Find_lower

; 1614 :             _Result._Location._Parent = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp], edx

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Trynode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Kfn@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@SAABVtype_id@luabind@@ABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@@Z ; std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0>::_Kfn<luabind::type_id const ,luabind::detail::class_rep *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@Vtype_id@luabind@@@std@@ABVtype_id@luabind@@ABV34@$0A@@std@@YA_NABU?$less@Vtype_id@luabind@@@0@ABVtype_id@luabind@@1@Z ; std::_Debug_lt_pred<std::less<luabind::type_id> const &,luabind::type_id const &,luabind::type_id const &,0>
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;

	mov	DWORD PTR __Result$[ebp+4], 0

; 1617 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 1618 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;

	mov	DWORD PTR __Result$[ebp+4], 1

; 1620 :                 _Result._Bound           = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp+8], edx

; 1621 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], ecx
$LN5@Find_lower:

; 1622 :             }
; 1623 :         }

	jmp	SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1624 : 
; 1625 :         return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Result$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1626 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Find_lower
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@Find_lower:
	DD	1
	DD	$LN8@Find_lower
$LN8@Find_lower:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN7@Find_lower
$LN7@Find_lower:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find_lower_bound<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 979  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 980  :     // deallocate a plain pointer using an allocator
; 981  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 982  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 983  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 984  :     } else {
; 985  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 986  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 987  :     }
; 988  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\type_traits
;	COMDAT ??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z PROC ; std::forward<luabind::type_id const &>, COMDAT

; 1426 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp

; 1427 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1428 : }

	pop	ebp
	ret	0
??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ENDP ; std::forward<luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 66   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 268  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 269  : #if _HAS_CXX20
; 270  :     if (_STD is_constant_evaluated()) {
; 271  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 272  :     } else
; 273  : #endif // _HAS_CXX20
; 274  :     {
; 275  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 276  :     }
; 277  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 294  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 295  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT

; 344  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 345  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
; 346  :         const auto _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
	add	esp, 8

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	push	eax
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
	add	esp, 8

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	add	edx, 8
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &>
	add	esp, 8

; 350  :         _Pnode->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 351  :         _Pnode->_Isnil = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+13], 1

; 352  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 353  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Buyheadnod:
	DD	1
	DD	$LN4@Buyheadnod
$LN4@Buyheadnod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Buyheadnod
$LN3@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1339 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1340 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1341 :             _Delete_plain_internal(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1342 :         }
; 1343 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1325 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1326 :         // create a new _Container_proxy pointing at _Mycont
; 1327 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1328 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1329 :         _Mycont._Myproxy = _Ptr;

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1330 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 256  :     }
; 257  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1><>, COMDAT
; _this$ = ecx

; 1375 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0ABU?$less@Vtype_id@luabind@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@Vtype_id@luabind@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@Vtype_id@luabind@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@Vtype_id@luabind@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1><std::less<luabind::type_id> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 1380 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABU?$less@Vtype_id@luabind@@@std@@@std@@YAABU?$less@Vtype_id@luabind@@@0@ABU10@@Z ; std::forward<std::less<luabind::type_id> const &>
	add	esp, 4
	mov	ecx, DWORD PTR _<_Val2_0>$[ebp]
	push	ecx
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1><>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABU?$less@Vtype_id@luabind@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@Vtype_id@luabind@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1><std::less<luabind::type_id> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z PROC ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ENDP ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >, COMDAT
; _this$ = ecx

; 822  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >, COMDAT
; _this$ = ecx

; 752  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 753  :         this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >

; 755  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	add	esp, 8

; 756  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
__Loc$ = -20						; size = 12
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find<luabind::type_id>, COMDAT
; _this$ = ecx

; 1366 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find_lower_bound<luabind::type_id>

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Lower_bound_duplicate<luabind::type_id>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Find

; 1369 :             return _Loc._Bound;

	mov	eax, DWORD PTR __Loc$[ebp+8]
	jmp	SHORT $LN1@Find
$LN2@Find:

; 1370 :         }
; 1371 : 
; 1372 :         return _Get_scary()->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	eax, DWORD PTR [eax+4]
$LN1@Find:

; 1373 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Find
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Find:
	DD	1
	DD	$LN5@Find
$LN5@Find:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@Find
$LN4@Find:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find<luabind::type_id>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\map
;	COMDAT ??$_Try_emplace@ABVtype_id@luabind@@$$V@?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@1@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
tv164 = -64						; size = 4
$T1 = -60						; size = 4
$T2 = -53						; size = 1
$T3 = -52						; size = 4
$T4 = -45						; size = 1
$T5 = -44						; size = 8
$T6 = -33						; size = 1
__Inserted$ = -32					; size = 4
__Scary$ = -28						; size = 4
__Loc$ = -20						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABVtype_id@luabind@@$$V@?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@1@ABVtype_id@luabind@@@Z PROC ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Try_emplace<luabind::type_id const &>, COMDAT
; _this$ = ecx

; 195  :     pair<_Nodeptr, bool> _Try_emplace(_Keyty&& _Keyval, _Mappedty&&... _Mapval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find_lower_bound<luabind::type_id>

; 197  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Lower_bound_duplicate<luabind::type_id>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Try_emplac

; 198  :             return {_Loc._Bound, false};

	mov	BYTE PTR $T6[ebp], 0
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR __Loc$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> * const &,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@Try_emplac
$LN2@Try_emplac:

; 199  :         }
; 200  : 
; 201  :         _Mybase::_Check_grow_by_1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Check_grow_by_1

; 202  : 
; 203  :         const auto _Scary    = _Mybase::_Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	call	??$forward@ABVtype_id@luabind@@@std@@YAABVtype_id@luabind@@ABV12@@Z ; std::forward<luabind::type_id const &>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$forward_as_tuple@ABVtype_id@luabind@@@std@@YA?AV?$tuple@ABVtype_id@luabind@@@0@ABVtype_id@luabind@@@Z ; std::forward_as_tuple<luabind::type_id const &>
	add	esp, 8
	push	eax
	push	OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABVtype_id@luabind@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABVtype_id@luabind@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > ><std::piecewise_construct_t const &,std::tuple<luabind::type_id const &>,std::tuple<> >
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR tv164[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::_Release
	mov	DWORD PTR __Inserted$[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >

; 205  :             _STD forward_as_tuple(_STD forward<_Keyty>(_Keyval)),
; 206  :             _STD forward_as_tuple(_STD forward<_Mappedty>(_Mapval)...))
; 207  :                                    ._Release();
; 208  : 
; 209  :         // nothrow hereafter
; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, DWORD PTR __Inserted$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Insert_node
	mov	DWORD PTR $T1[ebp], eax
	mov	BYTE PTR $T2[ebp], 1
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool>::pair<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Try_emplac:

; 211  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Try_emplac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Try_emplac:
	DD	1
	DD	$LN6@Try_emplac
$LN6@Try_emplac:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@Try_emplac
$LN5@Try_emplac:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Try_emplace@ABVtype_id@luabind@@$$V@?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@1@ABVtype_id@luabind@@@Z ENDP ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Try_emplace<luabind::type_id const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 991  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp

; 992  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 993  :     using _Ty = typename _Alloc::value_type;
; 994  :     _Ptr->~_Ty();
; 995  :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 996  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 832  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 833  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 835  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z PROC ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to, COMDAT

; 312  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 313  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@YAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@0@ABU10@@Z ; std::addressof<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const >
	add	esp, 4

; 314  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ENDP ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==, COMDAT
; _this$ = ecx

; 228  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	230					; 000000e6H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN12@operator
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN13@operator
$LN12@operator:
	mov	DWORD PTR tv136[ebp], 0
$LN13@operator:
	movzx	eax, BYTE PTR tv136[ebp]

; 234  :     }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->, COMDAT
; _this$ = ecx

; 189  :     _NODISCARD pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 190  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@SAPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@2@ABU32@@Z ; std::pointer_traits<std::pair<luabind::type_id const ,luabind::detail::class_rep *> const *>::pointer_to
	add	esp, 4

; 191  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*, COMDAT
; _this$ = ecx

; 179  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_0GA@KDHOBIAG@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	183					; 000000b7H
	push	OFFSET ??_C@_1MA@MHBPBNNN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 187  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 39   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 40   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?create_lua_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::`anonymous namespace'::create_lua_class_metatable

; 75   :         {

	push	ebp
	mov	ebp, esp

; 76   :             lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 77   : 
; 78   :             lua_pushstring(L, "__luabind_classrep");

	push	OFFSET $SG100150
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 79   :             lua_pushboolean(L, 1);

	push	1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 80   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 81   : 
; 82   :             lua_pushstring(L, "__gc");

	push	OFFSET $SG100151
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 83   :             lua_pushcclosure(

	push	0
	push	OFFSET ?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::garbage_collector_s<luabind::detail::class_rep>::apply
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 84   :                 L
; 85   :               , &detail::garbage_collector_s<
; 86   :                     detail::class_rep
; 87   :                 >::apply
; 88   :                 , 0);
; 89   : 
; 90   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 91   : 
; 92   :             lua_pushstring(L, "__newindex");

	push	OFFSET $SG100152
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 93   :             lua_pushcclosure(L, &class_rep::lua_settable_dispatcher, 0);

	push	0
	push	OFFSET ?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::lua_settable_dispatcher
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 94   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 95   : 
; 96   :             lua_pushstring(L, "__call");

	push	OFFSET $SG100153
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 97   :             lua_pushcclosure(L, &class_rep::constructor_dispatcher, 0);

	push	0
	push	OFFSET ?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::constructor_dispatcher
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 98   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 99   : 
; 100  :             lua_pushstring(L, "__index");

	push	OFFSET $SG100154
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 101  :             lua_pushcclosure(L, &class_rep::static_class_gettable, 0);

	push	0
	push	OFFSET ?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::static_class_gettable
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 102  :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 103  : 
; 104  :             return luaL_ref(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_ref
	add	esp, 8

; 105  :         }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?create_lua_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::`anonymous namespace'::create_lua_class_metatable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\detail\garbage_collector.hpp
;	COMDAT ?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
_obj$ = -4						; size = 4
_L$ = 8							; size = 4
?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z PROC ; luabind::detail::garbage_collector_s<luabind::detail::class_rep>::apply, COMDAT

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 45   : 			T* obj = static_cast<T*>(lua_touserdata(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _obj$[ebp], eax

; 46   : 			obj->~T();

	push	0
	mov	ecx, DWORD PTR _obj$[ebp]
	call	??_Gclass_rep@detail@luabind@@QAEPAXI@Z

; 47   : 			return 0;

	xor	eax, eax

; 48   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z ENDP ; luabind::detail::garbage_collector_s<luabind::detail::class_rep>::apply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
_L$ = 8							; size = 4
?create_cpp_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z PROC ; luabind::detail::`anonymous namespace'::create_cpp_class_metatable

; 39   :         {

	push	ebp
	mov	ebp, esp

; 40   :             lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 41   : 
; 42   :             // mark the table with our (hopefully) unique tag
; 43   :             // that says that the user data that has this
; 44   :             // metatable is a class_rep
; 45   :             lua_pushstring(L, "__luabind_classrep");

	push	OFFSET $SG100142
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 46   :             lua_pushboolean(L, 1);

	push	1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 47   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 48   : 
; 49   :             lua_pushstring(L, "__gc");

	push	OFFSET $SG100143
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 50   :             lua_pushcclosure(

	push	0
	push	OFFSET ?apply@?$garbage_collector_s@Vclass_rep@detail@luabind@@@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::garbage_collector_s<luabind::detail::class_rep>::apply
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 51   :                 L
; 52   :               , &garbage_collector_s<
; 53   :                     detail::class_rep
; 54   :                 >::apply
; 55   :                 , 0);
; 56   : 
; 57   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 58   : 
; 59   :             lua_pushstring(L, "__call");

	push	OFFSET $SG100144
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 60   :             lua_pushcclosure(L, &class_rep::constructor_dispatcher, 0);

	push	0
	push	OFFSET ?constructor_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::constructor_dispatcher
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 61   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 62   : 
; 63   :             lua_pushstring(L, "__index");

	push	OFFSET $SG100145
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 64   :             lua_pushcclosure(L, &class_rep::static_class_gettable, 0);

	push	0
	push	OFFSET ?static_class_gettable@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::static_class_gettable
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 65   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 66   : 
; 67   :             lua_pushstring(L, "__newindex");

	push	OFFSET $SG100146
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   :             lua_pushcclosure(L, &class_rep::lua_settable_dispatcher, 0);

	push	0
	push	OFFSET ?lua_settable_dispatcher@class_rep@detail@luabind@@SAHPAUlua_State@@@Z ; luabind::detail::class_rep::lua_settable_dispatcher
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 69   :             lua_rawset(L, -3);

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 70   : 
; 71   :             return luaL_ref(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_ref
	add	esp, 8

; 72   :         }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?create_cpp_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z ENDP ; luabind::detail::`anonymous namespace'::create_cpp_class_metatable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init_if@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init_if@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init_if'', COMDAT

; 106  : const in_place_init_if_t in_place_init_if ((in_place_init_if_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init_if@optional_ns@boost@@3Uin_place_init_if_t@12@B
	call	??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init_if@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init_if''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t, COMDAT
; _this$ = ecx

; 104  :   explicit in_place_init_if_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_if_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_if_t::in_place_init_if_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??__Ein_place_init@optional_ns@boost@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Ein_place_init@optional_ns@boost@@YAXXZ PROC	; boost::optional_ns::`dynamic initializer for 'in_place_init'', COMDAT

; 98   : const in_place_init_t in_place_init ((in_place_init_t::init_tag()));

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?in_place_init@optional_ns@boost@@3Uin_place_init_t@12@B
	call	??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ; boost::optional_ns::in_place_init_t::in_place_init_t
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ein_place_init@optional_ns@boost@@YAXXZ ENDP	; boost::optional_ns::`dynamic initializer for 'in_place_init''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\boost\optional\optional.hpp
;	COMDAT ??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z PROC ; boost::optional_ns::in_place_init_t::in_place_init_t, COMDAT
; _this$ = ecx

; 96   :   explicit in_place_init_t(init_tag){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0in_place_init_t@optional_ns@boost@@QAE@Uinit_tag@012@@Z ENDP ; boost::optional_ns::in_place_init_t::in_place_init_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gclass_rep@detail@luabind@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gclass_rep@detail@luabind@@QAEPAXI@Z PROC		; luabind::detail::class_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1class_rep@detail@luabind@@QAE@XZ	; luabind::detail::class_rep::~class_rep
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gclass_rep@detail@luabind@@QAEPAXI@Z ENDP		; luabind::detail::class_rep::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ PROC ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::~map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::~_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ ENDP ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::~map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\map
;	COMDAT ??A?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAEAAPAVclass_rep@detail@luabind@@ABVtype_id@4@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAEAAPAVclass_rep@detail@luabind@@ABVtype_id@4@@Z PROC ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::operator[], COMDAT
; _this$ = ecx

; 344  :     mapped_type& operator[](const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Try_emplace@ABVtype_id@luabind@@$$V@?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@_N@1@ABVtype_id@luabind@@@Z ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Try_emplace<luabind::type_id const &>
	mov	eax, DWORD PTR [eax]
	add	eax, 20					; 00000014H

; 346  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAEAAPAVclass_rep@detail@luabind@@ABVtype_id@4@@Z ENDP ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\map
;	COMDAT ??0?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ PROC ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >, COMDAT
; _this$ = ecx

; 105  :     map() : _Mybase(key_compare()) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@ABU?$less@Vtype_id@luabind@@@1@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ ENDP ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ PROC ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ENDP ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1386 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1387 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1388 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1382 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1384 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
__Pnode$3 = -12						; size = 4
__Head$ = -8						; size = 4
_this$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 647  :         ++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 648  :         const auto _Head  = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 649  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR __Head$[ebp]
	jne	SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax

; 652  :             _Head->_Parent   = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 653  :             _Head->_Right    = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 654  :             _Newnode->_Color = _Black; // the root is black

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 655  :             return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	jmp	$LN18@Insert_nod
$LN5@Insert_nod:

; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[ebp+4], 0
	jne	SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN8@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN8@Insert_nod:

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN7@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_nod

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Parent_sibling$2[ebp], eax

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	ecx, DWORD PTR __Parent_sibling$2[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN12@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 678  :                     _Parent_sibling->_Color          = _Black;

	mov	edx, DWORD PTR __Parent_sibling$2[ebp]
	mov	BYTE PTR [edx+12], 1

; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 681  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@Insert_nod

; 683  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 684  :                         _Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Lrotate
$LN14@Insert_nod:

; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Rrotate
$LN13@Insert_nod:

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

	jmp	$LN11@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Parent_sibling$1[ebp], edx

; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@Insert_nod

; 694  :                     _Pnode->_Parent->_Color          = _Black;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 695  :                     _Parent_sibling->_Color          = _Black;

	mov	ecx, DWORD PTR __Parent_sibling$1[ebp]
	mov	BYTE PTR [ecx+12], 1

; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 698  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN17@Insert_nod

; 700  :                         _Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$3[ebp], eax

; 701  :                         _Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Rrotate
$LN17@Insert_nod:

; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	edx, DWORD PTR __Pnode$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Lrotate
$LN11@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }

	jmp	$LN4@Insert_nod
$LN3@Insert_nod:

; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	ecx, DWORD PTR __Head$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 1

; 712  :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 713  :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 496  :         } else {

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 502  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 474  :         } else {

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 479  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 480  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >, COMDAT
; _this$ = ecx

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstddef
;	COMDAT ??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z PROC ; std::less<luabind::type_id>::operator(), COMDAT
; _this$ = ecx

; 142  :         noexcept(noexcept(_Fake_copy_init<bool>(_Left < _Right))) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 143  :         return _Left < _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	??Mtype_id@luabind@@QBE_NABV01@@Z	; luabind::type_id::operator<

; 144  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@Vtype_id@luabind@@@std@@QBE_NABVtype_id@luabind@@0@Z ENDP ; std::less<luabind::type_id>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1970 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1971 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > const >
	add	esp, 4

; 1972 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1966 :     _Scary_val* _Get_scary() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1967 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >
	add	esp, 4

; 1968 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1962 :     const _Alnode& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1963 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first

; 1964 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1958 :     _Alnode& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1959 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>::_Get_first

; 1960 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1954 :     const key_compare& _Getcomp() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1955 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@Vtype_id@luabind@@@2@XZ ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Get_first

; 1956 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABU?$less@Vtype_id@luabind@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Proxy$ = -48						; size = 8
_$S9$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
__Scary$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1937 :     void _Alloc_sentinel_and_proxy() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1938 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1939 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S9$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
	lea	eax, DWORD PTR _$S9$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1940 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	ecx, DWORD PTR __Scary$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	call	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >
	add	esp, 4
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1942 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 1943 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Alloc_sent:
	DD	2
	DD	$LN7@Alloc_sent
$LN7@Alloc_sent:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Alloc_sent
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@Alloc_sent
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	57					; 00000039H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1628 :     void _Check_grow_by_1() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN3@Check_grow

; 1630 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1631 :         }
; 1632 :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find, COMDAT
; _this$ = ecx

; 1380 :     _NODISCARD const_iterator find(const key_type& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1381 :         return const_iterator(_Find(_Keyval), _Get_scary());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find<luabind::type_id>
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1382 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find, COMDAT
; _this$ = ecx

; 1376 :     _NODISCARD iterator find(const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1377 :         return iterator(_Find(_Keyval), _Get_scary());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find@Vtype_id@luabind@@@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Find<luabind::type_id>
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1378 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1196 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1198 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1199 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end, COMDAT
; _this$ = ecx

; 1139 :     _NODISCARD const_iterator end() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1140 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1141 :         return const_iterator(_Scary->_Myhead, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1142 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end, COMDAT
; _this$ = ecx

; 1134 :     _NODISCARD iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1135 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1136 :         return iterator(_Scary->_Myhead, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1137 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S3$ = -17						; size = 1
__Alproxy$ = -12					; size = 4
__Scary$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::~_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1080 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1081 :         _Scary->_Erase_head(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >

; 1082 : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 1083 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S3$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
	lea	eax, DWORD PTR _$S3$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1084 :         _Delete_plain_internal(_Alproxy, _Scary->_Myproxy);

	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1085 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1086 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Tree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Tree:
	DD	1
	DD	$LN4@Tree
$LN4@Tree:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Tree
$LN3@Tree:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	51					; 00000033H
	DB	0
??1?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::~_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@ABU?$less@Vtype_id@luabind@@@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@ABU?$less@Vtype_id@luabind@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >, COMDAT
; _this$ = ecx

; 882  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABU?$less@Vtype_id@luabind@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@Vtype_id@luabind@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@Vtype_id@luabind@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1>::_Compressed_pair<std::less<luabind::type_id>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >,1>,1><std::less<luabind::type_id> const &,std::_Zero_then_variadic_args_t>

; 883  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Alloc_sentinel_and_proxy

; 884  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE@ABU?$less@Vtype_id@luabind@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 178956970				; 0aaaaaaaH

; 695  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 669  :         }
; 670  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocate, COMDAT
; _this$ = ecx

; 832  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 833  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BI@@std@@YAII@Z	; std::_Get_size_of_n<24>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 835  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 826  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 827  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN7@deallocate
$LN10@deallocate:
	jmp	SHORT $LN2@deallocate
$LN7@deallocate:
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	827					; 0000033bH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	push	0
	push	827					; 0000033bH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@deallocate
$LN2@deallocate:
	xor	edx, edx
	jne	SHORT $LN4@deallocate

; 828  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 829  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 830  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >, COMDAT
; _this$ = ecx

; 818  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >::allocator<std::_Tree_node<std::pair<luabind::type_id const ,luabind::detail::class_rep *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
tv94 = -52						; size = 4
$T1 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 12
$T4 = -25						; size = 1
_i$ = -20						; size = 12
_this$ = -4						; size = 4
_info$ = 8						; size = 4
?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z PROC ; luabind::detail::class_registry::find_class
; _this$ = ecx

; 157  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  :         std::map<type_id, class_rep*>::const_iterator i(

	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find

; 159  :             m_classes.find(info));
; 160  : 
; 161  :         if (i == m_classes.end()) return 0; // the type is not registered

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
	mov	BYTE PTR $T4[ebp], al
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T4[ebp]
	test	ecx, ecx
	je	SHORT $LN2@find_class
	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR _i$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN1@find_class
$LN2@find_class:

; 162  :         return i->second;

	lea	ecx, DWORD PTR _i$[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator->
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR _i$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T1[ebp]
$LN1@find_class:

; 163  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@find_class
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@find_class:
	DD	1
	DD	$LN7@find_class
$LN7@find_class:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN6@find_class
$LN6@find_class:
	DB	105					; 00000069H
	DB	0
?find_class@class_registry@detail@luabind@@QBEPAVclass_rep@23@ABVtype_id@3@@Z ENDP ; luabind::detail::class_registry::find_class
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
tv148 = -56						; size = 4
tv143 = -52						; size = 4
tv153 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 12
$T4 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_info$ = 8						; size = 4
_crep$ = 12						; size = 4
?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z PROC ; luabind::detail::class_registry::add_class
; _this$ = ecx

; 149  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 150  :         // class is already registered
; 151  :         assert((m_classes.find(info) == m_classes.end()) 

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::end
	mov	DWORD PTR tv153[ebp], eax
	mov	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@?$_Tree@V?$_Tmap_traits@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@2@ABVtype_id@luabind@@@Z ; std::_Tree<std::_Tmap_traits<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> >,0> >::find
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 2
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@add_class
	mov	edx, OFFSET $SG100428
	test	edx, edx
	jne	SHORT $LN4@add_class
$LN3@add_class:
	push	152					; 00000098H
	push	OFFSET $SG100429
	push	OFFSET $SG100430
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@add_class:
	mov	ecx, DWORD PTR $T2[ebp]
	and	ecx, 2
	je	SHORT $LN9@add_class
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN9@add_class:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 1
	je	SHORT $LN10@add_class
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN10@add_class:

; 152  :             && "you are trying to register a class twice");
; 153  :         m_classes[info] = crep;

	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAEAAPAVclass_rep@detail@luabind@@ABVtype_id@4@@Z ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::operator[]
	mov	ecx, DWORD PTR _crep$[ebp]
	mov	DWORD PTR [eax], ecx

; 154  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@add_class
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN6@add_class:
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?add_class@class_registry@detail@luabind@@QAEXABVtype_id@3@PAVclass_rep@23@@Z ENDP ; luabind::detail::class_registry::add_class
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
_p$ = -4						; size = 4
_L$ = 8							; size = 4
?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z PROC ; luabind::detail::class_registry::get_registry

; 120  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 121  : 
; 122  : #ifdef LUABIND_NOT_THREADSAFE
; 123  : 
; 124  :         // if we don't have to be thread safe, we can keep a
; 125  :         // chache of the class_registry pointer without the
; 126  :         // need of a mutex
; 127  :         static lua_State* cache_key = 0;
; 128  :         static class_registry* registry_cache = 0;
; 129  :         if (cache_key == L) return registry_cache;
; 130  : 
; 131  : #endif
; 132  : 
; 133  :         lua_pushstring(L, "__luabind_classes");

	push	OFFSET $SG100166
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 134  :         lua_gettable(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettable
	add	esp, 8

; 135  :         class_registry* p = static_cast<class_registry*>(lua_touserdata(L, -1));

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 136  :         lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 137  : 
; 138  : #ifdef LUABIND_NOT_THREADSAFE
; 139  : 
; 140  :         cache_key = L;
; 141  :         registry_cache = p;
; 142  : 
; 143  : #endif
; 144  : 
; 145  :         return p;

	mov	eax, DWORD PTR _p$[ebp]

; 146  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_registry@class_registry@detail@luabind@@SAPAU123@PAUlua_State@@@Z ENDP ; luabind::detail::class_registry::get_registry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\src\class_registry.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z PROC ; luabind::detail::class_registry::class_registry
; _this$ = ecx

; 114  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ ; std::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >::map<luabind::type_id,luabind::detail::class_rep *,std::less<luabind::type_id>,std::allocator<std::pair<luabind::type_id const ,luabind::detail::class_rep *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 112  :         : m_cpp_class_metatable(create_cpp_class_metatable(L))

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?create_cpp_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::create_cpp_class_metatable
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 113  :         , m_lua_class_metatable(create_lua_class_metatable(L))

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?create_lua_class_metatable@?A0xcd9669c8@detail@luabind@@YAHPAUlua_State@@@Z ; luabind::detail::`anonymous namespace'::create_lua_class_metatable
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 115  :         push_instance_metatable(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?push_instance_metatable@detail@luabind@@YAXPAUlua_State@@@Z ; luabind::detail::push_instance_metatable
	add	esp, 4

; 116  :         m_instance_metatable = luaL_ref(L, LUA_REGISTRYINDEX);

	push	-10000					; ffffd8f0H
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_ref
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 117  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$map@Vtype_id@luabind@@PAVclass_rep@detail@2@U?$less@Vtype_id@luabind@@@std@@V?$allocator@U?$pair@$$CBVtype_id@luabind@@PAVclass_rep@detail@2@@std@@@6@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0class_registry@detail@luabind@@QAE@PAUlua_State@@@Z ENDP ; luabind::detail::class_registry::class_registry
; Function compile flags: /Odtp /RTCsu
; File D:\__Repos\__MyRepos\Raven_VS2022\Common\luabind-0.9.1\luabind\typeid.hpp
;	COMDAT ??Mtype_id@luabind@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??Mtype_id@luabind@@QBE_NABV01@@Z PROC			; luabind::type_id::operator<, COMDAT
; _this$ = ecx

; 45   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :         return id->before(*other.id);

	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?before@type_info@@QBE_NABV1@@Z		; type_info::before

; 47   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Mtype_id@luabind@@QBE_NABV01@@Z ENDP			; luabind::type_id::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_typeinfo.h
;	COMDAT ?before@type_info@@QBE_NABV1@@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?before@type_info@@QBE_NABV1@@Z PROC			; type_info::before, COMDAT
; _this$ = ecx

; 109  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 110  :         return __std_type_info_compare(&_Data, &_Other._Data) < 0;

	mov	eax, DWORD PTR __Other$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_type_info_compare
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@before
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@before
$LN3@before:
	mov	DWORD PTR tv70[ebp], 0
$LN4@before:
	movzx	eax, BYTE PTR tv70[ebp]

; 111  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?before@type_info@@QBE_NABV1@@Z ENDP			; type_info::before
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  : [[noreturn]] inline void _Throw_tree_length_error() {

	push	ebp
	mov	ebp, esp

; 418  :     _Xlength_error("map/set too long");

	push	OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Throw_tree:

; 419  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 190  :     constexpr tuple(const tuple&) noexcept /* strengthened */ {} // TRANSITION, ABI: should be defaulted

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 :     _Container_proxy* _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1309 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1304 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1305 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1306 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility
;	COMDAT ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 652  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 653  :     // assign _New_val to _Val, return previous _Val
; 654  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 655  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 656  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked_v3, COMDAT
; _this$ = ecx

; 1218 :     void _Orphan_me_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1219 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1220 :         _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1221 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_me_:
	DD	1
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_me_
$LN3@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ PROC ; std::_Iterator_base12::_Orphan_me_unlocked_v3, COMDAT
; _this$ = ecx

; 1202 :     _CONSTEXPR20 void _Orphan_me_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1203 :         if (!_Myproxy) { // already orphaned

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Orphan_me_

; 1204 :             return;

	jmp	$LN13@Orphan_me_
$LN10@Orphan_me_:

; 1205 :         }
; 1206 : 
; 1207 :         // adopted, remove self from list
; 1208 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$[ebp], edx
$LN2@Orphan_me_:

; 1209 :         while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me_
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me_

; 1210 :             _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1211 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN6@Orphan_me_:

; 1212 : 
; 1213 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me_
	jmp	SHORT $LN4@Orphan_me_
$LN9@Orphan_me_:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1213					; 000004bdH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me_
	int	3
$LN14@Orphan_me_:
	push	0
	push	1213					; 000004bdH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me_
$LN4@Orphan_me_:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me_

; 1214 :         *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1215 :         _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me_:

; 1216 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ENDP ; std::_Iterator_base12::_Orphan_me_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1197 :     void _Adopt_locked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1198 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1199 :         _Adopt_unlocked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1200 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Adopt_lock:
	DD	1
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Adopt_lock
$LN3@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1180 :     _CONSTEXPR20 void _Adopt_unlocked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1181 :         if (!_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt_unlo

; 1182 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3

; 1183 :             return;

	jmp	SHORT $LN5@Adopt_unlo
$LN2@Adopt_unlo:

; 1184 :         }
; 1185 : 
; 1186 :         _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$[ebp], ecx

; 1187 :         if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$[ebp]
	je	SHORT $LN5@Adopt_unlo

; 1188 :             if (_Myproxy) { // adopted, remove self from list

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Adopt_unlo

; 1189 :                 _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
$LN4@Adopt_unlo:

; 1190 :             }
; 1191 :             _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1192 :             _Parent_proxy->_Myfirstiter = this;

	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1193 :             _Myproxy                    = _Parent_proxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@Adopt_unlo:

; 1194 :         }
; 1195 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1152 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1153 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1154 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1132 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1133 : #if _HAS_CXX20
; 1134 :         if (_STD is_constant_evaluated()) {
; 1135 :             _Adopt_unlocked(_Parent);
; 1136 :         } else
; 1137 : #endif // _HAS_CXX20
; 1138 :         {
; 1139 :             _Adopt_locked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked

; 1140 :         }
; 1141 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1121 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1122 : #if _HAS_CXX20
; 1123 :         if (_STD is_constant_evaluated()) {
; 1124 :             _Orphan_me_unlocked_v3();
; 1125 :         } else
; 1126 : #endif // _HAS_CXX20
; 1127 :         {
; 1128 :             _Orphan_me_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3

; 1129 :         }
; 1130 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1098 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1099 : 
; 1100 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1101 :         *this = _Right;
; 1102 :     }
; 1103 : 
; 1104 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1105 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1106 : #if _HAS_CXX20
; 1107 :         if (_STD is_constant_evaluated()) {
; 1108 :             _Assign_unlocked(_Right);
; 1109 :         } else
; 1110 : #endif // _HAS_CXX20
; 1111 :         {
; 1112 :             _Assign_locked(_Right);
; 1113 :         }
; 1114 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1115 :         _Myproxy = _Right._Myproxy;
; 1116 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1117 :         return *this;
; 1118 :     }
; 1119 : 
; 1120 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1121 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1122 : #if _HAS_CXX20
; 1123 :         if (_STD is_constant_evaluated()) {
; 1124 :             _Orphan_me_unlocked_v3();
; 1125 :         } else
; 1126 : #endif // _HAS_CXX20
; 1127 :         {
; 1128 :             _Orphan_me_locked_v3();
; 1129 :         }
; 1130 :     }
; 1131 : 
; 1132 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1133 : #if _HAS_CXX20
; 1134 :         if (_STD is_constant_evaluated()) {
; 1135 :             _Adopt_unlocked(_Parent);
; 1136 :         } else
; 1137 : #endif // _HAS_CXX20
; 1138 :         {
; 1139 :             _Adopt_locked(_Parent);
; 1140 :         }
; 1141 :     }
; 1142 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1143 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1144 :         if (_Parent) { // have a parent, do adoption
; 1145 :             _Myproxy = _Parent->_Myproxy;
; 1146 :         } else { // no future parent, just disown current parent
; 1147 :             _Myproxy = nullptr;
; 1148 :         }
; 1149 :     }
; 1150 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1151 : 
; 1152 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1153 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1154 :     }
; 1155 : 
; 1156 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1157 : 
; 1158 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1159 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1098 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1085 :     void _Orphan_all_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1086 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1087 :         _Orphan_all_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1088 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_all:
	DD	1
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_all
$LN3@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Pnext$2 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1225 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1226 :     if (!_Myproxy) { // no proxy, already done

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Orphan_all

; 1227 :         return;

	jmp	SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1228 :     }
; 1229 : 
; 1230 :     // proxy allocated, drain it
; 1231 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	push	eax
	call	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
	add	esp, 8
	mov	DWORD PTR __Pnext$2[ebp], eax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnext$2[ebp], edx
$LN4@Orphan_all:
	cmp	DWORD PTR __Pnext$2[ebp], 0
	je	SHORT $LN6@Orphan_all

; 1232 :         _Pnext->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	DWORD PTR [eax], 0

; 1233 :     }

	jmp	SHORT $LN2@Orphan_all
$LN6@Orphan_all:

; 1234 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1236 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1237 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1238 : #if _HAS_CXX20
; 1239 :     if (_STD is_constant_evaluated()) {
; 1240 :         _Orphan_all_unlocked_v3();
; 1241 :     } else
; 1242 : #endif // _HAS_CXX20
; 1243 :     {
; 1244 :         _Orphan_all_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1245 :     }
; 1246 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1247 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1054 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1055 : 
; 1056 :     _Container_base12(const _Container_base12&)            = delete;
; 1057 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1058 : 
; 1059 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1060 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1061 : 
; 1062 :     template <class _Alloc>
; 1063 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1064 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1065 :         _Construct_in_place(*_New_proxy, this);
; 1066 :         _Myproxy            = _New_proxy;
; 1067 :         _New_proxy->_Mycont = this;
; 1068 :     }
; 1069 : 
; 1070 :     template <class _Alloc>
; 1071 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1072 :         // pre: no iterators refer to the existing proxy
; 1073 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1074 :         _Construct_in_place(*_New_proxy, this);
; 1075 :         _New_proxy->_Mycont = this;
; 1076 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1077 :     }
; 1078 : 
; 1079 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1054 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1046 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1047 : 
; 1048 :     const _Container_base12* _Mycont       = nullptr;
; 1049 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1046 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	154					; 0000009aH
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_0GC@FPOGKCLE@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	164					; 000000a4H
	push	OFFSET ??_C@_1ME@GKDENAFF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 166  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 77   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 78   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 328  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 329  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 330  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
